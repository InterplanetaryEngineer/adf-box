pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
const struct_unnamed_1 = extern struct {
    __clang_max_align_nonce1: c_longlong align(8),
    __clang_max_align_nonce2: c_longdouble align(16),
};
pub const max_align_t = struct_unnamed_1;
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
const struct_unnamed_2 = extern struct {
    __val: [2]c_int,
};
pub const __fsid_t = struct_unnamed_2;
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*c_void;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const Bool32 = u32;
pub const DeviceAddress = u64;
pub const DeviceSize = u64;
pub const Flags = u32;
pub const SampleMask = u32;
pub const struct_Buffer_T = opaque {};
pub const Buffer = ?*struct_Buffer_T;
pub const struct_Image_T = opaque {};
pub const Image = ?*struct_Image_T;
pub const struct_Instance_T = opaque {};
pub const Instance = ?*struct_Instance_T;
pub const struct_PhysicalDevice_T = opaque {};
pub const PhysicalDevice = ?*struct_PhysicalDevice_T;
pub const struct_Device_T = opaque {};
pub const Device = ?*struct_Device_T;
pub const struct_Queue_T = opaque {};
pub const Queue = ?*struct_Queue_T;
pub const struct_Semaphore_T = opaque {};
pub const Semaphore = ?*struct_Semaphore_T;
pub const struct_CommandBuffer_T = opaque {};
pub const CommandBuffer = ?*struct_CommandBuffer_T;
pub const struct_Fence_T = opaque {};
pub const Fence = ?*struct_Fence_T;
pub const struct_DeviceMemory_T = opaque {};
pub const DeviceMemory = ?*struct_DeviceMemory_T;
pub const struct_Event_T = opaque {};
pub const Event = ?*struct_Event_T;
pub const struct_QueryPool_T = opaque {};
pub const QueryPool = ?*struct_QueryPool_T;
pub const struct_BufferView_T = opaque {};
pub const BufferView = ?*struct_BufferView_T;
pub const struct_ImageView_T = opaque {};
pub const ImageView = ?*struct_ImageView_T;
pub const struct_ShaderModule_T = opaque {};
pub const ShaderModule = ?*struct_ShaderModule_T;
pub const struct_PipelineCache_T = opaque {};
pub const PipelineCache = ?*struct_PipelineCache_T;
pub const struct_PipelineLayout_T = opaque {};
pub const PipelineLayout = ?*struct_PipelineLayout_T;
pub const struct_Pipeline_T = opaque {};
pub const Pipeline = ?*struct_Pipeline_T;
pub const struct_RenderPass_T = opaque {};
pub const RenderPass = ?*struct_RenderPass_T;
pub const struct_DescriptorSetLayout_T = opaque {};
pub const DescriptorSetLayout = ?*struct_DescriptorSetLayout_T;
pub const struct_Sampler_T = opaque {};
pub const Sampler = ?*struct_Sampler_T;
pub const struct_DescriptorSet_T = opaque {};
pub const DescriptorSet = ?*struct_DescriptorSet_T;
pub const struct_DescriptorPool_T = opaque {};
pub const DescriptorPool = ?*struct_DescriptorPool_T;
pub const struct_Framebuffer_T = opaque {};
pub const Framebuffer = ?*struct_Framebuffer_T;
pub const struct_CommandPool_T = opaque {};
pub const CommandPool = ?*struct_CommandPool_T;
pub const SUCCESS = @enumToInt(enum_Result.SUCCESS);
pub const NOT_READY = @enumToInt(enum_Result.NOT_READY);
pub const TIMEOUT = @enumToInt(enum_Result.TIMEOUT);
pub const EVENT_SET = @enumToInt(enum_Result.EVENT_SET);
pub const EVENT_RESET = @enumToInt(enum_Result.EVENT_RESET);
pub const INCOMPLETE = @enumToInt(enum_Result.INCOMPLETE);
pub const ERROR_OUT_OF_HOST_MEMORY = @enumToInt(enum_Result.ERROR_OUT_OF_HOST_MEMORY);
pub const ERROR_OUT_OF_DEVICE_MEMORY = @enumToInt(enum_Result.ERROR_OUT_OF_DEVICE_MEMORY);
pub const ERROR_INITIALIZATION_FAILED = @enumToInt(enum_Result.ERROR_INITIALIZATION_FAILED);
pub const ERROR_DEVICE_LOST = @enumToInt(enum_Result.ERROR_DEVICE_LOST);
pub const ERROR_MEMORY_MAP_FAILED = @enumToInt(enum_Result.ERROR_MEMORY_MAP_FAILED);
pub const ERROR_LAYER_NOT_PRESENT = @enumToInt(enum_Result.ERROR_LAYER_NOT_PRESENT);
pub const ERROR_EXTENSION_NOT_PRESENT = @enumToInt(enum_Result.ERROR_EXTENSION_NOT_PRESENT);
pub const ERROR_FEATURE_NOT_PRESENT = @enumToInt(enum_Result.ERROR_FEATURE_NOT_PRESENT);
pub const ERROR_INCOMPATIBLE_DRIVER = @enumToInt(enum_Result.ERROR_INCOMPATIBLE_DRIVER);
pub const ERROR_TOO_MANY_OBJECTS = @enumToInt(enum_Result.ERROR_TOO_MANY_OBJECTS);
pub const ERROR_FORMAT_NOT_SUPPORTED = @enumToInt(enum_Result.ERROR_FORMAT_NOT_SUPPORTED);
pub const ERROR_FRAGMENTED_POOL = @enumToInt(enum_Result.ERROR_FRAGMENTED_POOL);
pub const ERROR_UNKNOWN = @enumToInt(enum_Result.ERROR_UNKNOWN);
pub const ERROR_OUT_OF_POOL_MEMORY = @enumToInt(enum_Result.ERROR_OUT_OF_POOL_MEMORY);
pub const ERROR_INVALID_EXTERNAL_HANDLE = @enumToInt(enum_Result.ERROR_INVALID_EXTERNAL_HANDLE);
pub const ERROR_FRAGMENTATION = @enumToInt(enum_Result.ERROR_FRAGMENTATION);
pub const ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = @enumToInt(enum_Result.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
pub const ERROR_SURFACE_LOST_KHR = @enumToInt(enum_Result.ERROR_SURFACE_LOST_KHR);
pub const ERROR_NATIVE_WINDOW_IN_USE_KHR = @enumToInt(enum_Result.ERROR_NATIVE_WINDOW_IN_USE_KHR);
pub const SUBOPTIMAL_KHR = @enumToInt(enum_Result.SUBOPTIMAL_KHR);
pub const ERROR_OUT_OF_DATE_KHR = @enumToInt(enum_Result.ERROR_OUT_OF_DATE_KHR);
pub const ERROR_INCOMPATIBLE_DISPLAY_KHR = @enumToInt(enum_Result.ERROR_INCOMPATIBLE_DISPLAY_KHR);
pub const ERROR_VALIDATION_FAILED_EXT = @enumToInt(enum_Result.ERROR_VALIDATION_FAILED_EXT);
pub const ERROR_INVALID_SHADER_NV = @enumToInt(enum_Result.ERROR_INVALID_SHADER_NV);
pub const ERROR_INCOMPATIBLE_VERSION_KHR = @enumToInt(enum_Result.ERROR_INCOMPATIBLE_VERSION_KHR);
pub const ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = @enumToInt(enum_Result.ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
pub const ERROR_NOT_PERMITTED_EXT = @enumToInt(enum_Result.ERROR_NOT_PERMITTED_EXT);
pub const ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = @enumToInt(enum_Result.ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
pub const THREAD_IDLE_KHR = @enumToInt(enum_Result.THREAD_IDLE_KHR);
pub const THREAD_DONE_KHR = @enumToInt(enum_Result.THREAD_DONE_KHR);
pub const OPERATION_DEFERRED_KHR = @enumToInt(enum_Result.OPERATION_DEFERRED_KHR);
pub const OPERATION_NOT_DEFERRED_KHR = @enumToInt(enum_Result.OPERATION_NOT_DEFERRED_KHR);
pub const PIPELINE_COMPILE_REQUIRED_EXT = @enumToInt(enum_Result.PIPELINE_COMPILE_REQUIRED_EXT);
pub const ERROR_OUT_OF_POOL_MEMORY_KHR = @enumToInt(enum_Result.ERROR_OUT_OF_POOL_MEMORY_KHR);
pub const ERROR_INVALID_EXTERNAL_HANDLE_KHR = @enumToInt(enum_Result.ERROR_INVALID_EXTERNAL_HANDLE_KHR);
pub const ERROR_FRAGMENTATION_EXT = @enumToInt(enum_Result.ERROR_FRAGMENTATION_EXT);
pub const ERROR_INVALID_DEVICE_ADDRESS_EXT = @enumToInt(enum_Result.ERROR_INVALID_DEVICE_ADDRESS_EXT);
pub const ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = @enumToInt(enum_Result.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR);
pub const ERROR_PIPELINE_COMPILE_REQUIRED_EXT = @enumToInt(enum_Result.ERROR_PIPELINE_COMPILE_REQUIRED_EXT);
pub const RESULT_MAX_ENUM = @enumToInt(enum_Result.RESULT_MAX_ENUM);
pub const enum_Result = extern enum(c_int) {
    SUCCESS = 0,
    NOT_READY = 1,
    TIMEOUT = 2,
    EVENT_SET = 3,
    EVENT_RESET = 4,
    INCOMPLETE = 5,
    ERROR_OUT_OF_HOST_MEMORY = -1,
    ERROR_OUT_OF_DEVICE_MEMORY = -2,
    ERROR_INITIALIZATION_FAILED = -3,
    ERROR_DEVICE_LOST = -4,
    ERROR_MEMORY_MAP_FAILED = -5,
    ERROR_LAYER_NOT_PRESENT = -6,
    ERROR_EXTENSION_NOT_PRESENT = -7,
    ERROR_FEATURE_NOT_PRESENT = -8,
    ERROR_INCOMPATIBLE_DRIVER = -9,
    ERROR_TOO_MANY_OBJECTS = -10,
    ERROR_FORMAT_NOT_SUPPORTED = -11,
    ERROR_FRAGMENTED_POOL = -12,
    ERROR_UNKNOWN = -13,
    ERROR_OUT_OF_POOL_MEMORY = -1000069000,
    ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
    ERROR_FRAGMENTATION = -1000161000,
    ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
    ERROR_SURFACE_LOST_KHR = -1000000000,
    ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    SUBOPTIMAL_KHR = 1000001003,
    ERROR_OUT_OF_DATE_KHR = -1000001004,
    ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    ERROR_VALIDATION_FAILED_EXT = -1000011001,
    ERROR_INVALID_SHADER_NV = -1000012000,
    ERROR_INCOMPATIBLE_VERSION_KHR = -1000150000,
    ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    ERROR_NOT_PERMITTED_EXT = -1000174001,
    ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
    THREAD_IDLE_KHR = 1000268000,
    THREAD_DONE_KHR = 1000268001,
    OPERATION_DEFERRED_KHR = 1000268002,
    OPERATION_NOT_DEFERRED_KHR = 1000268003,
    PIPELINE_COMPILE_REQUIRED_EXT = 1000297000,
    ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000,
    ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003,
    ERROR_FRAGMENTATION_EXT = -1000161000,
    ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000257000,
    ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = -1000257000,
    ERROR_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000,
    RESULT_MAX_ENUM = 2147483647,
    _,
};
pub const Result = enum_Result;
pub const STRUCTURE_TYPE_APPLICATION_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_APPLICATION_INFO);
pub const STRUCTURE_TYPE_INSTANCE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_INSTANCE_CREATE_INFO);
pub const STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO);
pub const STRUCTURE_TYPE_DEVICE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_CREATE_INFO);
pub const STRUCTURE_TYPE_SUBMIT_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBMIT_INFO);
pub const STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO);
pub const STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MAPPED_MEMORY_RANGE);
pub const STRUCTURE_TYPE_BIND_SPARSE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_SPARSE_INFO);
pub const STRUCTURE_TYPE_FENCE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FENCE_CREATE_INFO);
pub const STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO);
pub const STRUCTURE_TYPE_EVENT_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EVENT_CREATE_INFO);
pub const STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO);
pub const STRUCTURE_TYPE_BUFFER_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_CREATE_INFO);
pub const STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO);
pub const STRUCTURE_TYPE_IMAGE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_CREATE_INFO);
pub const STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO);
pub const STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO);
pub const STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO);
pub const STRUCTURE_TYPE_SAMPLER_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_CREATE_INFO);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO);
pub const STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO);
pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = @enumToInt(enum_StructureType.STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET);
pub const STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COPY_DESCRIPTOR_SET);
pub const STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO);
pub const STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO);
pub const STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO);
pub const STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO);
pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO);
pub const STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO);
pub const STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO);
pub const STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER);
pub const STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER);
pub const STRUCTURE_TYPE_MEMORY_BARRIER = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_BARRIER);
pub const STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO);
pub const STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES);
pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO);
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES);
pub const STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS);
pub const STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO);
pub const STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO);
pub const STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO);
pub const STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO);
pub const STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO);
pub const STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO);
pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO);
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES);
pub const STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO);
pub const STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2);
pub const STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2);
pub const STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2);
pub const STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2);
pub const STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2);
pub const STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FORMAT_PROPERTIES_2);
pub const STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2);
pub const STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2);
pub const STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES);
pub const STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO);
pub const STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO);
pub const STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO);
pub const STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES);
pub const STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES);
pub const STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2);
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO);
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO);
pub const STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO);
pub const STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES);
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES);
pub const STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO);
pub const STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO);
pub const STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES);
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO);
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO);
pub const STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO);
pub const STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES);
pub const STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO);
pub const STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO);
pub const STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES);
pub const STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO);
pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2);
pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2);
pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2);
pub const STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2);
pub const STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2);
pub const STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_BEGIN_INFO);
pub const STRUCTURE_TYPE_SUBPASS_END_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_END_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES);
pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES);
pub const STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES);
pub const STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES);
pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO);
pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO);
pub const STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES);
pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT);
pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES);
pub const STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO);
pub const STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO);
pub const STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO);
pub const STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES);
pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO);
pub const STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO);
pub const STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO);
pub const STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO);
pub const STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PRESENT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PRESENT_INFO_KHR);
pub const STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR);
pub const STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR);
pub const STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR);
pub const STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR);
pub const STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR);
pub const STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD);
pub const STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT);
pub const STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT);
pub const STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT);
pub const STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX);
pub const STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX);
pub const STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = @enumToInt(enum_StructureType.STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD);
pub const STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = @enumToInt(enum_StructureType.STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV);
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV);
pub const STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV);
pub const STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV);
pub const STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV);
pub const STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_VALIDATION_FLAGS_EXT);
pub const STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = @enumToInt(enum_StructureType.STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT);
pub const STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT);
pub const STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR);
pub const STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR);
pub const STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR);
pub const STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR);
pub const STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR);
pub const STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR);
pub const STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR);
pub const STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR);
pub const STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR);
pub const STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR);
pub const STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR);
pub const STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT);
pub const STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT);
pub const STRUCTURE_TYPE_PRESENT_REGIONS_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PRESENT_REGIONS_KHR);
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT);
pub const STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT);
pub const STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT);
pub const STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT);
pub const STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX);
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT);
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_HDR_METADATA_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_HDR_METADATA_EXT);
pub const STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR);
pub const STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR);
pub const STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR);
pub const STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR);
pub const STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR);
pub const STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR);
pub const STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR);
pub const STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR);
pub const STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR);
pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR);
pub const STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR);
pub const STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR);
pub const STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR);
pub const STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR);
pub const STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR);
pub const STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR);
pub const STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK);
pub const STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK);
pub const STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT);
pub const STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT);
pub const STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT);
pub const STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT);
pub const STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID);
pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID);
pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID);
pub const STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID);
pub const STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID);
pub const STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT);
pub const STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT);
pub const STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT);
pub const STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR);
pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR);
pub const STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR);
pub const STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR);
pub const STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV);
pub const STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT);
pub const STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV);
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_GEOMETRY_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_GEOMETRY_NV);
pub const STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV);
pub const STRUCTURE_TYPE_GEOMETRY_AABB_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_GEOMETRY_AABB_NV);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV);
pub const STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV);
pub const STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT);
pub const STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT);
pub const STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR);
pub const STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD);
pub const STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD);
pub const STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT);
pub const STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP);
pub const STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV);
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV);
pub const STRUCTURE_TYPE_CHECKPOINT_DATA_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_CHECKPOINT_DATA_NV);
pub const STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL);
pub const STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = @enumToInt(enum_StructureType.STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL);
pub const STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = @enumToInt(enum_StructureType.STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL);
pub const STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL);
pub const STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL);
pub const STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL);
pub const STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD);
pub const STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD);
pub const STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR);
pub const STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT);
pub const STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR);
pub const STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT);
pub const STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT);
pub const STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT);
pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_VALIDATION_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV);
pub const STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV);
pub const STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT);
pub const STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT);
pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT);
pub const STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT);
pub const STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT);
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT);
pub const STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR);
pub const STRUCTURE_TYPE_PIPELINE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_INFO_KHR);
pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR);
pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR);
pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV);
pub const STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV);
pub const STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV);
pub const STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM);
pub const STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT);
pub const STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT);
pub const STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT);
pub const STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV);
pub const STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV);
pub const STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT);
pub const STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR);
pub const STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR);
pub const STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR);
pub const STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR);
pub const STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR);
pub const STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR);
pub const STRUCTURE_TYPE_BUFFER_COPY_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_COPY_2_KHR);
pub const STRUCTURE_TYPE_IMAGE_COPY_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_COPY_2_KHR);
pub const STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_BLIT_2_KHR);
pub const STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR);
pub const STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT);
pub const STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES);
pub const STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR);
pub const STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR);
pub const STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR);
pub const STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR);
pub const STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR);
pub const STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR);
pub const STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR);
pub const STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR);
pub const STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR);
pub const STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR);
pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR);
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR);
pub const STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR);
pub const STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR);
pub const STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR);
pub const STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR);
pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR);
pub const STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR);
pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR);
pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR);
pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR);
pub const STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR);
pub const STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR);
pub const STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR);
pub const STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_END_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR);
pub const STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR);
pub const STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR);
pub const STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR);
pub const STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR);
pub const STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR);
pub const STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR);
pub const STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR);
pub const STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR);
pub const STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR);
pub const STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR);
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR);
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT);
pub const STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV);
pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = @enumToInt(enum_StructureType.STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR);
pub const STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR);
pub const STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR);
pub const STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR);
pub const STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = @enumToInt(enum_StructureType.STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR);
pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR);
pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT);
pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT);
pub const STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR);
pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR);
pub const STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR);
pub const STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR);
pub const STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = @enumToInt(enum_StructureType.STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR);
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = @enumToInt(enum_StructureType.STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT);
pub const STRUCTURE_TYPE_MAX_ENUM = @enumToInt(enum_StructureType.STRUCTURE_TYPE_MAX_ENUM);
pub const enum_StructureType = extern enum(c_int) {
    STRUCTURE_TYPE_APPLICATION_INFO = 0,
    STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    STRUCTURE_TYPE_SUBMIT_INFO = 4,
    STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
    STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
    STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
    STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
    STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
    STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
    STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
    STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
    STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
    STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
    STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
    STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
    STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
    STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
    STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
    STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
    STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
    STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
    STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
    STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
    STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
    STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
    STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
    STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000,
    STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
    STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
    STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
    STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
    STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
    STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
    STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
    STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
    STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
    STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
    STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
    STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
    STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
    STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
    STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
    STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
    STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
    STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
    STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
    STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
    STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
    STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
    STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
    STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
    STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
    STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR = 1000165006,
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000165007,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR = 1000150001,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR = 1000150008,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR = 1000150009,
    STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
    STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
    STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR = 1000150013,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR = 1000150014,
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
    STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
    STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
    STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
    STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
    STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
    STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
    STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
    STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
    STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
    STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
    STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
    STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
    STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
    STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
    STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
    STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
    STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
    STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
    STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
    STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
    STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
    STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
    STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
    STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
    STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
    STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
    STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
    STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000,
    STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
    STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000,
    STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002,
    STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
    STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
    STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
    STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000,
    STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
    STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
    STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
    STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
    STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
    STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
    STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
    STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR = 1000268000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
    STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
    STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
    STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
    STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
    STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
    STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
    STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001,
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
    STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
    STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
    STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
    STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
    STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000,
    STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001,
    STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
    STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
    STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
    STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000,
    STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000,
    STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001,
    STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002,
    STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003,
    STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004,
    STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005,
    STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006,
    STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007,
    STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008,
    STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009,
    STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
    STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000,
    STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000,
    STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001,
    STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002,
    STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004,
    STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006,
    STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008,
    STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000,
    STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003,
    STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004,
    STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005,
    STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006,
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000,
    STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000,
    STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002,
    STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001,
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000,
    STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001,
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000,
    STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000,
    STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000,
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001,
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002,
    STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003,
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000,
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001,
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002,
    STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003,
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004,
    STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005,
    STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000,
    STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001,
    STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000,
    STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001,
    STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002,
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000,
    STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000,
    STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000,
    STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001,
    STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000,
    STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001,
    STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002,
    STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = 1000146003,
    STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004,
    STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001,
    STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002,
    STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005,
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002,
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003,
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004,
    STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = 1000175000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000,
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = 1000207000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = 1000207001,
    STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = 1000207002,
    STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = 1000207003,
    STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = 1000207004,
    STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = 1000207005,
    STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = 1000241000,
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = 1000241001,
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = 1000241002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000,
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001,
    STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = 1000257000,
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = 1000244001,
    STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = 1000257002,
    STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = 1000257003,
    STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = 1000257004,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000,
    STRUCTURE_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const StructureType = enum_StructureType;
pub const IMAGE_LAYOUT_UNDEFINED = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_UNDEFINED);
pub const IMAGE_LAYOUT_GENERAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_GENERAL);
pub const IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL);
pub const IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL);
pub const IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL);
pub const IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
pub const IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL);
pub const IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL);
pub const IMAGE_LAYOUT_PREINITIALIZED = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_PREINITIALIZED);
pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL);
pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL);
pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL);
pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL);
pub const IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL);
pub const IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL);
pub const IMAGE_LAYOUT_PRESENT_SRC_KHR = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_PRESENT_SRC_KHR);
pub const IMAGE_LAYOUT_SHARED_PRESENT_KHR = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_SHARED_PRESENT_KHR);
pub const IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV);
pub const IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT);
pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR);
pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR);
pub const IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR);
pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR);
pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR);
pub const IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR);
pub const IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR);
pub const IMAGE_LAYOUT_MAX_ENUM = @enumToInt(enum_ImageLayout.IMAGE_LAYOUT_MAX_ENUM);
pub const enum_ImageLayout = extern enum(c_int) {
    IMAGE_LAYOUT_UNDEFINED = 0,
    IMAGE_LAYOUT_GENERAL = 1,
    IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    IMAGE_LAYOUT_PREINITIALIZED = 8,
    IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
    IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
    IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
    IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
    IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
    IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
    IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
    IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
    IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000,
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001,
    IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = 1000241000,
    IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = 1000241001,
    IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000241002,
    IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000241003,
    IMAGE_LAYOUT_MAX_ENUM = 2147483647,
    _,
};
pub const ImageLayout = enum_ImageLayout;
pub const OBJECT_TYPE_UNKNOWN = @enumToInt(enum_ObjectType.OBJECT_TYPE_UNKNOWN);
pub const OBJECT_TYPE_INSTANCE = @enumToInt(enum_ObjectType.OBJECT_TYPE_INSTANCE);
pub const OBJECT_TYPE_PHYSICAL_DEVICE = @enumToInt(enum_ObjectType.OBJECT_TYPE_PHYSICAL_DEVICE);
pub const OBJECT_TYPE_DEVICE = @enumToInt(enum_ObjectType.OBJECT_TYPE_DEVICE);
pub const OBJECT_TYPE_QUEUE = @enumToInt(enum_ObjectType.OBJECT_TYPE_QUEUE);
pub const OBJECT_TYPE_SEMAPHORE = @enumToInt(enum_ObjectType.OBJECT_TYPE_SEMAPHORE);
pub const OBJECT_TYPE_COMMAND_BUFFER = @enumToInt(enum_ObjectType.OBJECT_TYPE_COMMAND_BUFFER);
pub const OBJECT_TYPE_FENCE = @enumToInt(enum_ObjectType.OBJECT_TYPE_FENCE);
pub const OBJECT_TYPE_DEVICE_MEMORY = @enumToInt(enum_ObjectType.OBJECT_TYPE_DEVICE_MEMORY);
pub const OBJECT_TYPE_BUFFER = @enumToInt(enum_ObjectType.OBJECT_TYPE_BUFFER);
pub const OBJECT_TYPE_IMAGE = @enumToInt(enum_ObjectType.OBJECT_TYPE_IMAGE);
pub const OBJECT_TYPE_EVENT = @enumToInt(enum_ObjectType.OBJECT_TYPE_EVENT);
pub const OBJECT_TYPE_QUERY_POOL = @enumToInt(enum_ObjectType.OBJECT_TYPE_QUERY_POOL);
pub const OBJECT_TYPE_BUFFER_VIEW = @enumToInt(enum_ObjectType.OBJECT_TYPE_BUFFER_VIEW);
pub const OBJECT_TYPE_IMAGE_VIEW = @enumToInt(enum_ObjectType.OBJECT_TYPE_IMAGE_VIEW);
pub const OBJECT_TYPE_SHADER_MODULE = @enumToInt(enum_ObjectType.OBJECT_TYPE_SHADER_MODULE);
pub const OBJECT_TYPE_PIPELINE_CACHE = @enumToInt(enum_ObjectType.OBJECT_TYPE_PIPELINE_CACHE);
pub const OBJECT_TYPE_PIPELINE_LAYOUT = @enumToInt(enum_ObjectType.OBJECT_TYPE_PIPELINE_LAYOUT);
pub const OBJECT_TYPE_RENDER_PASS = @enumToInt(enum_ObjectType.OBJECT_TYPE_RENDER_PASS);
pub const OBJECT_TYPE_PIPELINE = @enumToInt(enum_ObjectType.OBJECT_TYPE_PIPELINE);
pub const OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = @enumToInt(enum_ObjectType.OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT);
pub const OBJECT_TYPE_SAMPLER = @enumToInt(enum_ObjectType.OBJECT_TYPE_SAMPLER);
pub const OBJECT_TYPE_DESCRIPTOR_POOL = @enumToInt(enum_ObjectType.OBJECT_TYPE_DESCRIPTOR_POOL);
pub const OBJECT_TYPE_DESCRIPTOR_SET = @enumToInt(enum_ObjectType.OBJECT_TYPE_DESCRIPTOR_SET);
pub const OBJECT_TYPE_FRAMEBUFFER = @enumToInt(enum_ObjectType.OBJECT_TYPE_FRAMEBUFFER);
pub const OBJECT_TYPE_COMMAND_POOL = @enumToInt(enum_ObjectType.OBJECT_TYPE_COMMAND_POOL);
pub const OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = @enumToInt(enum_ObjectType.OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION);
pub const OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = @enumToInt(enum_ObjectType.OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE);
pub const OBJECT_TYPE_SURFACE_KHR = @enumToInt(enum_ObjectType.OBJECT_TYPE_SURFACE_KHR);
pub const OBJECT_TYPE_SWAPCHAIN_KHR = @enumToInt(enum_ObjectType.OBJECT_TYPE_SWAPCHAIN_KHR);
pub const OBJECT_TYPE_DISPLAY_KHR = @enumToInt(enum_ObjectType.OBJECT_TYPE_DISPLAY_KHR);
pub const OBJECT_TYPE_DISPLAY_MODE_KHR = @enumToInt(enum_ObjectType.OBJECT_TYPE_DISPLAY_MODE_KHR);
pub const OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = @enumToInt(enum_ObjectType.OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT);
pub const OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = @enumToInt(enum_ObjectType.OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT);
pub const OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = @enumToInt(enum_ObjectType.OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR);
pub const OBJECT_TYPE_VALIDATION_CACHE_EXT = @enumToInt(enum_ObjectType.OBJECT_TYPE_VALIDATION_CACHE_EXT);
pub const OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = @enumToInt(enum_ObjectType.OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL);
pub const OBJECT_TYPE_DEFERRED_OPERATION_KHR = @enumToInt(enum_ObjectType.OBJECT_TYPE_DEFERRED_OPERATION_KHR);
pub const OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = @enumToInt(enum_ObjectType.OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV);
pub const OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = @enumToInt(enum_ObjectType.OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT);
pub const OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = @enumToInt(enum_ObjectType.OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR);
pub const OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = @enumToInt(enum_ObjectType.OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR);
pub const OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = @enumToInt(enum_ObjectType.OBJECT_TYPE_ACCELERATION_STRUCTURE_NV);
pub const OBJECT_TYPE_MAX_ENUM = @enumToInt(enum_ObjectType.OBJECT_TYPE_MAX_ENUM);
pub const enum_ObjectType = extern enum(c_int) {
    OBJECT_TYPE_UNKNOWN = 0,
    OBJECT_TYPE_INSTANCE = 1,
    OBJECT_TYPE_PHYSICAL_DEVICE = 2,
    OBJECT_TYPE_DEVICE = 3,
    OBJECT_TYPE_QUEUE = 4,
    OBJECT_TYPE_SEMAPHORE = 5,
    OBJECT_TYPE_COMMAND_BUFFER = 6,
    OBJECT_TYPE_FENCE = 7,
    OBJECT_TYPE_DEVICE_MEMORY = 8,
    OBJECT_TYPE_BUFFER = 9,
    OBJECT_TYPE_IMAGE = 10,
    OBJECT_TYPE_EVENT = 11,
    OBJECT_TYPE_QUERY_POOL = 12,
    OBJECT_TYPE_BUFFER_VIEW = 13,
    OBJECT_TYPE_IMAGE_VIEW = 14,
    OBJECT_TYPE_SHADER_MODULE = 15,
    OBJECT_TYPE_PIPELINE_CACHE = 16,
    OBJECT_TYPE_PIPELINE_LAYOUT = 17,
    OBJECT_TYPE_RENDER_PASS = 18,
    OBJECT_TYPE_PIPELINE = 19,
    OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
    OBJECT_TYPE_SAMPLER = 21,
    OBJECT_TYPE_DESCRIPTOR_POOL = 22,
    OBJECT_TYPE_DESCRIPTOR_SET = 23,
    OBJECT_TYPE_FRAMEBUFFER = 24,
    OBJECT_TYPE_COMMAND_POOL = 25,
    OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
    OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
    OBJECT_TYPE_SURFACE_KHR = 1000000000,
    OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
    OBJECT_TYPE_DISPLAY_KHR = 1000002000,
    OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
    OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
    OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
    OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000,
    OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
    OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
    OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
    OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
    OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000,
    OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000,
    OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000,
    OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    OBJECT_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const ObjectType = enum_ObjectType;
pub const VENDOR_ID_VIV = @enumToInt(enum_VendorId.VENDOR_ID_VIV);
pub const VENDOR_ID_VSI = @enumToInt(enum_VendorId.VENDOR_ID_VSI);
pub const VENDOR_ID_KAZAN = @enumToInt(enum_VendorId.VENDOR_ID_KAZAN);
pub const VENDOR_ID_CODEPLAY = @enumToInt(enum_VendorId.VENDOR_ID_CODEPLAY);
pub const VENDOR_ID_MESA = @enumToInt(enum_VendorId.VENDOR_ID_MESA);
pub const VENDOR_ID_MAX_ENUM = @enumToInt(enum_VendorId.VENDOR_ID_MAX_ENUM);
pub const enum_VendorId = extern enum(c_int) {
    VENDOR_ID_VIV = 65537,
    VENDOR_ID_VSI = 65538,
    VENDOR_ID_KAZAN = 65539,
    VENDOR_ID_CODEPLAY = 65540,
    VENDOR_ID_MESA = 65541,
    VENDOR_ID_MAX_ENUM = 2147483647,
    _,
};
pub const VendorId = enum_VendorId;
pub const PIPELINE_CACHE_HEADER_VERSION_ONE = @enumToInt(enum_PipelineCacheHeaderVersion.PIPELINE_CACHE_HEADER_VERSION_ONE);
pub const PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = @enumToInt(enum_PipelineCacheHeaderVersion.PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM);
pub const enum_PipelineCacheHeaderVersion = extern enum(c_int) {
    PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
    PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647,
    _,
};
pub const PipelineCacheHeaderVersion = enum_PipelineCacheHeaderVersion;
pub const SYSTEM_ALLOCATION_SCOPE_COMMAND = @enumToInt(enum_SystemAllocationScope.SYSTEM_ALLOCATION_SCOPE_COMMAND);
pub const SYSTEM_ALLOCATION_SCOPE_OBJECT = @enumToInt(enum_SystemAllocationScope.SYSTEM_ALLOCATION_SCOPE_OBJECT);
pub const SYSTEM_ALLOCATION_SCOPE_CACHE = @enumToInt(enum_SystemAllocationScope.SYSTEM_ALLOCATION_SCOPE_CACHE);
pub const SYSTEM_ALLOCATION_SCOPE_DEVICE = @enumToInt(enum_SystemAllocationScope.SYSTEM_ALLOCATION_SCOPE_DEVICE);
pub const SYSTEM_ALLOCATION_SCOPE_INSTANCE = @enumToInt(enum_SystemAllocationScope.SYSTEM_ALLOCATION_SCOPE_INSTANCE);
pub const SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = @enumToInt(enum_SystemAllocationScope.SYSTEM_ALLOCATION_SCOPE_MAX_ENUM);
pub const enum_SystemAllocationScope = extern enum(c_int) {
    SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647,
    _,
};
pub const SystemAllocationScope = enum_SystemAllocationScope;
pub const INTERNAL_ALLOCATION_TYPE_EXECUTABLE = @enumToInt(enum_InternalAllocationType.INTERNAL_ALLOCATION_TYPE_EXECUTABLE);
pub const INTERNAL_ALLOCATION_TYPE_MAX_ENUM = @enumToInt(enum_InternalAllocationType.INTERNAL_ALLOCATION_TYPE_MAX_ENUM);
pub const enum_InternalAllocationType = extern enum(c_int) {
    INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const InternalAllocationType = enum_InternalAllocationType;
pub const FORMAT_UNDEFINED = @enumToInt(enum_Format.FORMAT_UNDEFINED);
pub const FORMAT_R4G4_UNORM_PACK8 = @enumToInt(enum_Format.FORMAT_R4G4_UNORM_PACK8);
pub const FORMAT_R4G4B4A4_UNORM_PACK16 = @enumToInt(enum_Format.FORMAT_R4G4B4A4_UNORM_PACK16);
pub const FORMAT_B4G4R4A4_UNORM_PACK16 = @enumToInt(enum_Format.FORMAT_B4G4R4A4_UNORM_PACK16);
pub const FORMAT_R5G6B5_UNORM_PACK16 = @enumToInt(enum_Format.FORMAT_R5G6B5_UNORM_PACK16);
pub const FORMAT_B5G6R5_UNORM_PACK16 = @enumToInt(enum_Format.FORMAT_B5G6R5_UNORM_PACK16);
pub const FORMAT_R5G5B5A1_UNORM_PACK16 = @enumToInt(enum_Format.FORMAT_R5G5B5A1_UNORM_PACK16);
pub const FORMAT_B5G5R5A1_UNORM_PACK16 = @enumToInt(enum_Format.FORMAT_B5G5R5A1_UNORM_PACK16);
pub const FORMAT_A1R5G5B5_UNORM_PACK16 = @enumToInt(enum_Format.FORMAT_A1R5G5B5_UNORM_PACK16);
pub const FORMAT_R8_UNORM = @enumToInt(enum_Format.FORMAT_R8_UNORM);
pub const FORMAT_R8_SNORM = @enumToInt(enum_Format.FORMAT_R8_SNORM);
pub const FORMAT_R8_USCALED = @enumToInt(enum_Format.FORMAT_R8_USCALED);
pub const FORMAT_R8_SSCALED = @enumToInt(enum_Format.FORMAT_R8_SSCALED);
pub const FORMAT_R8_UINT = @enumToInt(enum_Format.FORMAT_R8_UINT);
pub const FORMAT_R8_SINT = @enumToInt(enum_Format.FORMAT_R8_SINT);
pub const FORMAT_R8_SRGB = @enumToInt(enum_Format.FORMAT_R8_SRGB);
pub const FORMAT_R8G8_UNORM = @enumToInt(enum_Format.FORMAT_R8G8_UNORM);
pub const FORMAT_R8G8_SNORM = @enumToInt(enum_Format.FORMAT_R8G8_SNORM);
pub const FORMAT_R8G8_USCALED = @enumToInt(enum_Format.FORMAT_R8G8_USCALED);
pub const FORMAT_R8G8_SSCALED = @enumToInt(enum_Format.FORMAT_R8G8_SSCALED);
pub const FORMAT_R8G8_UINT = @enumToInt(enum_Format.FORMAT_R8G8_UINT);
pub const FORMAT_R8G8_SINT = @enumToInt(enum_Format.FORMAT_R8G8_SINT);
pub const FORMAT_R8G8_SRGB = @enumToInt(enum_Format.FORMAT_R8G8_SRGB);
pub const FORMAT_R8G8B8_UNORM = @enumToInt(enum_Format.FORMAT_R8G8B8_UNORM);
pub const FORMAT_R8G8B8_SNORM = @enumToInt(enum_Format.FORMAT_R8G8B8_SNORM);
pub const FORMAT_R8G8B8_USCALED = @enumToInt(enum_Format.FORMAT_R8G8B8_USCALED);
pub const FORMAT_R8G8B8_SSCALED = @enumToInt(enum_Format.FORMAT_R8G8B8_SSCALED);
pub const FORMAT_R8G8B8_UINT = @enumToInt(enum_Format.FORMAT_R8G8B8_UINT);
pub const FORMAT_R8G8B8_SINT = @enumToInt(enum_Format.FORMAT_R8G8B8_SINT);
pub const FORMAT_R8G8B8_SRGB = @enumToInt(enum_Format.FORMAT_R8G8B8_SRGB);
pub const FORMAT_B8G8R8_UNORM = @enumToInt(enum_Format.FORMAT_B8G8R8_UNORM);
pub const FORMAT_B8G8R8_SNORM = @enumToInt(enum_Format.FORMAT_B8G8R8_SNORM);
pub const FORMAT_B8G8R8_USCALED = @enumToInt(enum_Format.FORMAT_B8G8R8_USCALED);
pub const FORMAT_B8G8R8_SSCALED = @enumToInt(enum_Format.FORMAT_B8G8R8_SSCALED);
pub const FORMAT_B8G8R8_UINT = @enumToInt(enum_Format.FORMAT_B8G8R8_UINT);
pub const FORMAT_B8G8R8_SINT = @enumToInt(enum_Format.FORMAT_B8G8R8_SINT);
pub const FORMAT_B8G8R8_SRGB = @enumToInt(enum_Format.FORMAT_B8G8R8_SRGB);
pub const FORMAT_R8G8B8A8_UNORM = @enumToInt(enum_Format.FORMAT_R8G8B8A8_UNORM);
pub const FORMAT_R8G8B8A8_SNORM = @enumToInt(enum_Format.FORMAT_R8G8B8A8_SNORM);
pub const FORMAT_R8G8B8A8_USCALED = @enumToInt(enum_Format.FORMAT_R8G8B8A8_USCALED);
pub const FORMAT_R8G8B8A8_SSCALED = @enumToInt(enum_Format.FORMAT_R8G8B8A8_SSCALED);
pub const FORMAT_R8G8B8A8_UINT = @enumToInt(enum_Format.FORMAT_R8G8B8A8_UINT);
pub const FORMAT_R8G8B8A8_SINT = @enumToInt(enum_Format.FORMAT_R8G8B8A8_SINT);
pub const FORMAT_R8G8B8A8_SRGB = @enumToInt(enum_Format.FORMAT_R8G8B8A8_SRGB);
pub const FORMAT_B8G8R8A8_UNORM = @enumToInt(enum_Format.FORMAT_B8G8R8A8_UNORM);
pub const FORMAT_B8G8R8A8_SNORM = @enumToInt(enum_Format.FORMAT_B8G8R8A8_SNORM);
pub const FORMAT_B8G8R8A8_USCALED = @enumToInt(enum_Format.FORMAT_B8G8R8A8_USCALED);
pub const FORMAT_B8G8R8A8_SSCALED = @enumToInt(enum_Format.FORMAT_B8G8R8A8_SSCALED);
pub const FORMAT_B8G8R8A8_UINT = @enumToInt(enum_Format.FORMAT_B8G8R8A8_UINT);
pub const FORMAT_B8G8R8A8_SINT = @enumToInt(enum_Format.FORMAT_B8G8R8A8_SINT);
pub const FORMAT_B8G8R8A8_SRGB = @enumToInt(enum_Format.FORMAT_B8G8R8A8_SRGB);
pub const FORMAT_A8B8G8R8_UNORM_PACK32 = @enumToInt(enum_Format.FORMAT_A8B8G8R8_UNORM_PACK32);
pub const FORMAT_A8B8G8R8_SNORM_PACK32 = @enumToInt(enum_Format.FORMAT_A8B8G8R8_SNORM_PACK32);
pub const FORMAT_A8B8G8R8_USCALED_PACK32 = @enumToInt(enum_Format.FORMAT_A8B8G8R8_USCALED_PACK32);
pub const FORMAT_A8B8G8R8_SSCALED_PACK32 = @enumToInt(enum_Format.FORMAT_A8B8G8R8_SSCALED_PACK32);
pub const FORMAT_A8B8G8R8_UINT_PACK32 = @enumToInt(enum_Format.FORMAT_A8B8G8R8_UINT_PACK32);
pub const FORMAT_A8B8G8R8_SINT_PACK32 = @enumToInt(enum_Format.FORMAT_A8B8G8R8_SINT_PACK32);
pub const FORMAT_A8B8G8R8_SRGB_PACK32 = @enumToInt(enum_Format.FORMAT_A8B8G8R8_SRGB_PACK32);
pub const FORMAT_A2R10G10B10_UNORM_PACK32 = @enumToInt(enum_Format.FORMAT_A2R10G10B10_UNORM_PACK32);
pub const FORMAT_A2R10G10B10_SNORM_PACK32 = @enumToInt(enum_Format.FORMAT_A2R10G10B10_SNORM_PACK32);
pub const FORMAT_A2R10G10B10_USCALED_PACK32 = @enumToInt(enum_Format.FORMAT_A2R10G10B10_USCALED_PACK32);
pub const FORMAT_A2R10G10B10_SSCALED_PACK32 = @enumToInt(enum_Format.FORMAT_A2R10G10B10_SSCALED_PACK32);
pub const FORMAT_A2R10G10B10_UINT_PACK32 = @enumToInt(enum_Format.FORMAT_A2R10G10B10_UINT_PACK32);
pub const FORMAT_A2R10G10B10_SINT_PACK32 = @enumToInt(enum_Format.FORMAT_A2R10G10B10_SINT_PACK32);
pub const FORMAT_A2B10G10R10_UNORM_PACK32 = @enumToInt(enum_Format.FORMAT_A2B10G10R10_UNORM_PACK32);
pub const FORMAT_A2B10G10R10_SNORM_PACK32 = @enumToInt(enum_Format.FORMAT_A2B10G10R10_SNORM_PACK32);
pub const FORMAT_A2B10G10R10_USCALED_PACK32 = @enumToInt(enum_Format.FORMAT_A2B10G10R10_USCALED_PACK32);
pub const FORMAT_A2B10G10R10_SSCALED_PACK32 = @enumToInt(enum_Format.FORMAT_A2B10G10R10_SSCALED_PACK32);
pub const FORMAT_A2B10G10R10_UINT_PACK32 = @enumToInt(enum_Format.FORMAT_A2B10G10R10_UINT_PACK32);
pub const FORMAT_A2B10G10R10_SINT_PACK32 = @enumToInt(enum_Format.FORMAT_A2B10G10R10_SINT_PACK32);
pub const FORMAT_R16_UNORM = @enumToInt(enum_Format.FORMAT_R16_UNORM);
pub const FORMAT_R16_SNORM = @enumToInt(enum_Format.FORMAT_R16_SNORM);
pub const FORMAT_R16_USCALED = @enumToInt(enum_Format.FORMAT_R16_USCALED);
pub const FORMAT_R16_SSCALED = @enumToInt(enum_Format.FORMAT_R16_SSCALED);
pub const FORMAT_R16_UINT = @enumToInt(enum_Format.FORMAT_R16_UINT);
pub const FORMAT_R16_SINT = @enumToInt(enum_Format.FORMAT_R16_SINT);
pub const FORMAT_R16_SFLOAT = @enumToInt(enum_Format.FORMAT_R16_SFLOAT);
pub const FORMAT_R16G16_UNORM = @enumToInt(enum_Format.FORMAT_R16G16_UNORM);
pub const FORMAT_R16G16_SNORM = @enumToInt(enum_Format.FORMAT_R16G16_SNORM);
pub const FORMAT_R16G16_USCALED = @enumToInt(enum_Format.FORMAT_R16G16_USCALED);
pub const FORMAT_R16G16_SSCALED = @enumToInt(enum_Format.FORMAT_R16G16_SSCALED);
pub const FORMAT_R16G16_UINT = @enumToInt(enum_Format.FORMAT_R16G16_UINT);
pub const FORMAT_R16G16_SINT = @enumToInt(enum_Format.FORMAT_R16G16_SINT);
pub const FORMAT_R16G16_SFLOAT = @enumToInt(enum_Format.FORMAT_R16G16_SFLOAT);
pub const FORMAT_R16G16B16_UNORM = @enumToInt(enum_Format.FORMAT_R16G16B16_UNORM);
pub const FORMAT_R16G16B16_SNORM = @enumToInt(enum_Format.FORMAT_R16G16B16_SNORM);
pub const FORMAT_R16G16B16_USCALED = @enumToInt(enum_Format.FORMAT_R16G16B16_USCALED);
pub const FORMAT_R16G16B16_SSCALED = @enumToInt(enum_Format.FORMAT_R16G16B16_SSCALED);
pub const FORMAT_R16G16B16_UINT = @enumToInt(enum_Format.FORMAT_R16G16B16_UINT);
pub const FORMAT_R16G16B16_SINT = @enumToInt(enum_Format.FORMAT_R16G16B16_SINT);
pub const FORMAT_R16G16B16_SFLOAT = @enumToInt(enum_Format.FORMAT_R16G16B16_SFLOAT);
pub const FORMAT_R16G16B16A16_UNORM = @enumToInt(enum_Format.FORMAT_R16G16B16A16_UNORM);
pub const FORMAT_R16G16B16A16_SNORM = @enumToInt(enum_Format.FORMAT_R16G16B16A16_SNORM);
pub const FORMAT_R16G16B16A16_USCALED = @enumToInt(enum_Format.FORMAT_R16G16B16A16_USCALED);
pub const FORMAT_R16G16B16A16_SSCALED = @enumToInt(enum_Format.FORMAT_R16G16B16A16_SSCALED);
pub const FORMAT_R16G16B16A16_UINT = @enumToInt(enum_Format.FORMAT_R16G16B16A16_UINT);
pub const FORMAT_R16G16B16A16_SINT = @enumToInt(enum_Format.FORMAT_R16G16B16A16_SINT);
pub const FORMAT_R16G16B16A16_SFLOAT = @enumToInt(enum_Format.FORMAT_R16G16B16A16_SFLOAT);
pub const FORMAT_R32_UINT = @enumToInt(enum_Format.FORMAT_R32_UINT);
pub const FORMAT_R32_SINT = @enumToInt(enum_Format.FORMAT_R32_SINT);
pub const FORMAT_R32_SFLOAT = @enumToInt(enum_Format.FORMAT_R32_SFLOAT);
pub const FORMAT_R32G32_UINT = @enumToInt(enum_Format.FORMAT_R32G32_UINT);
pub const FORMAT_R32G32_SINT = @enumToInt(enum_Format.FORMAT_R32G32_SINT);
pub const FORMAT_R32G32_SFLOAT = @enumToInt(enum_Format.FORMAT_R32G32_SFLOAT);
pub const FORMAT_R32G32B32_UINT = @enumToInt(enum_Format.FORMAT_R32G32B32_UINT);
pub const FORMAT_R32G32B32_SINT = @enumToInt(enum_Format.FORMAT_R32G32B32_SINT);
pub const FORMAT_R32G32B32_SFLOAT = @enumToInt(enum_Format.FORMAT_R32G32B32_SFLOAT);
pub const FORMAT_R32G32B32A32_UINT = @enumToInt(enum_Format.FORMAT_R32G32B32A32_UINT);
pub const FORMAT_R32G32B32A32_SINT = @enumToInt(enum_Format.FORMAT_R32G32B32A32_SINT);
pub const FORMAT_R32G32B32A32_SFLOAT = @enumToInt(enum_Format.FORMAT_R32G32B32A32_SFLOAT);
pub const FORMAT_R64_UINT = @enumToInt(enum_Format.FORMAT_R64_UINT);
pub const FORMAT_R64_SINT = @enumToInt(enum_Format.FORMAT_R64_SINT);
pub const FORMAT_R64_SFLOAT = @enumToInt(enum_Format.FORMAT_R64_SFLOAT);
pub const FORMAT_R64G64_UINT = @enumToInt(enum_Format.FORMAT_R64G64_UINT);
pub const FORMAT_R64G64_SINT = @enumToInt(enum_Format.FORMAT_R64G64_SINT);
pub const FORMAT_R64G64_SFLOAT = @enumToInt(enum_Format.FORMAT_R64G64_SFLOAT);
pub const FORMAT_R64G64B64_UINT = @enumToInt(enum_Format.FORMAT_R64G64B64_UINT);
pub const FORMAT_R64G64B64_SINT = @enumToInt(enum_Format.FORMAT_R64G64B64_SINT);
pub const FORMAT_R64G64B64_SFLOAT = @enumToInt(enum_Format.FORMAT_R64G64B64_SFLOAT);
pub const FORMAT_R64G64B64A64_UINT = @enumToInt(enum_Format.FORMAT_R64G64B64A64_UINT);
pub const FORMAT_R64G64B64A64_SINT = @enumToInt(enum_Format.FORMAT_R64G64B64A64_SINT);
pub const FORMAT_R64G64B64A64_SFLOAT = @enumToInt(enum_Format.FORMAT_R64G64B64A64_SFLOAT);
pub const FORMAT_B10G11R11_UFLOAT_PACK32 = @enumToInt(enum_Format.FORMAT_B10G11R11_UFLOAT_PACK32);
pub const FORMAT_E5B9G9R9_UFLOAT_PACK32 = @enumToInt(enum_Format.FORMAT_E5B9G9R9_UFLOAT_PACK32);
pub const FORMAT_D16_UNORM = @enumToInt(enum_Format.FORMAT_D16_UNORM);
pub const FORMAT_X8_D24_UNORM_PACK32 = @enumToInt(enum_Format.FORMAT_X8_D24_UNORM_PACK32);
pub const FORMAT_D32_SFLOAT = @enumToInt(enum_Format.FORMAT_D32_SFLOAT);
pub const FORMAT_S8_UINT = @enumToInt(enum_Format.FORMAT_S8_UINT);
pub const FORMAT_D16_UNORM_S8_UINT = @enumToInt(enum_Format.FORMAT_D16_UNORM_S8_UINT);
pub const FORMAT_D24_UNORM_S8_UINT = @enumToInt(enum_Format.FORMAT_D24_UNORM_S8_UINT);
pub const FORMAT_D32_SFLOAT_S8_UINT = @enumToInt(enum_Format.FORMAT_D32_SFLOAT_S8_UINT);
pub const FORMAT_BC1_RGB_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_BC1_RGB_UNORM_BLOCK);
pub const FORMAT_BC1_RGB_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_BC1_RGB_SRGB_BLOCK);
pub const FORMAT_BC1_RGBA_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_BC1_RGBA_UNORM_BLOCK);
pub const FORMAT_BC1_RGBA_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_BC1_RGBA_SRGB_BLOCK);
pub const FORMAT_BC2_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_BC2_UNORM_BLOCK);
pub const FORMAT_BC2_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_BC2_SRGB_BLOCK);
pub const FORMAT_BC3_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_BC3_UNORM_BLOCK);
pub const FORMAT_BC3_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_BC3_SRGB_BLOCK);
pub const FORMAT_BC4_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_BC4_UNORM_BLOCK);
pub const FORMAT_BC4_SNORM_BLOCK = @enumToInt(enum_Format.FORMAT_BC4_SNORM_BLOCK);
pub const FORMAT_BC5_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_BC5_UNORM_BLOCK);
pub const FORMAT_BC5_SNORM_BLOCK = @enumToInt(enum_Format.FORMAT_BC5_SNORM_BLOCK);
pub const FORMAT_BC6H_UFLOAT_BLOCK = @enumToInt(enum_Format.FORMAT_BC6H_UFLOAT_BLOCK);
pub const FORMAT_BC6H_SFLOAT_BLOCK = @enumToInt(enum_Format.FORMAT_BC6H_SFLOAT_BLOCK);
pub const FORMAT_BC7_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_BC7_UNORM_BLOCK);
pub const FORMAT_BC7_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_BC7_SRGB_BLOCK);
pub const FORMAT_ETC2_R8G8B8_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ETC2_R8G8B8_UNORM_BLOCK);
pub const FORMAT_ETC2_R8G8B8_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ETC2_R8G8B8_SRGB_BLOCK);
pub const FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK);
pub const FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK);
pub const FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK);
pub const FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK);
pub const FORMAT_EAC_R11_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_EAC_R11_UNORM_BLOCK);
pub const FORMAT_EAC_R11_SNORM_BLOCK = @enumToInt(enum_Format.FORMAT_EAC_R11_SNORM_BLOCK);
pub const FORMAT_EAC_R11G11_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_EAC_R11G11_UNORM_BLOCK);
pub const FORMAT_EAC_R11G11_SNORM_BLOCK = @enumToInt(enum_Format.FORMAT_EAC_R11G11_SNORM_BLOCK);
pub const FORMAT_ASTC_4x4_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_4x4_UNORM_BLOCK);
pub const FORMAT_ASTC_4x4_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_4x4_SRGB_BLOCK);
pub const FORMAT_ASTC_5x4_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_5x4_UNORM_BLOCK);
pub const FORMAT_ASTC_5x4_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_5x4_SRGB_BLOCK);
pub const FORMAT_ASTC_5x5_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_5x5_UNORM_BLOCK);
pub const FORMAT_ASTC_5x5_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_5x5_SRGB_BLOCK);
pub const FORMAT_ASTC_6x5_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_6x5_UNORM_BLOCK);
pub const FORMAT_ASTC_6x5_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_6x5_SRGB_BLOCK);
pub const FORMAT_ASTC_6x6_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_6x6_UNORM_BLOCK);
pub const FORMAT_ASTC_6x6_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_6x6_SRGB_BLOCK);
pub const FORMAT_ASTC_8x5_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_8x5_UNORM_BLOCK);
pub const FORMAT_ASTC_8x5_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_8x5_SRGB_BLOCK);
pub const FORMAT_ASTC_8x6_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_8x6_UNORM_BLOCK);
pub const FORMAT_ASTC_8x6_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_8x6_SRGB_BLOCK);
pub const FORMAT_ASTC_8x8_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_8x8_UNORM_BLOCK);
pub const FORMAT_ASTC_8x8_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_8x8_SRGB_BLOCK);
pub const FORMAT_ASTC_10x5_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_10x5_UNORM_BLOCK);
pub const FORMAT_ASTC_10x5_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_10x5_SRGB_BLOCK);
pub const FORMAT_ASTC_10x6_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_10x6_UNORM_BLOCK);
pub const FORMAT_ASTC_10x6_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_10x6_SRGB_BLOCK);
pub const FORMAT_ASTC_10x8_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_10x8_UNORM_BLOCK);
pub const FORMAT_ASTC_10x8_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_10x8_SRGB_BLOCK);
pub const FORMAT_ASTC_10x10_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_10x10_UNORM_BLOCK);
pub const FORMAT_ASTC_10x10_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_10x10_SRGB_BLOCK);
pub const FORMAT_ASTC_12x10_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_12x10_UNORM_BLOCK);
pub const FORMAT_ASTC_12x10_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_12x10_SRGB_BLOCK);
pub const FORMAT_ASTC_12x12_UNORM_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_12x12_UNORM_BLOCK);
pub const FORMAT_ASTC_12x12_SRGB_BLOCK = @enumToInt(enum_Format.FORMAT_ASTC_12x12_SRGB_BLOCK);
pub const FORMAT_G8B8G8R8_422_UNORM = @enumToInt(enum_Format.FORMAT_G8B8G8R8_422_UNORM);
pub const FORMAT_B8G8R8G8_422_UNORM = @enumToInt(enum_Format.FORMAT_B8G8R8G8_422_UNORM);
pub const FORMAT_G8_B8_R8_3PLANE_420_UNORM = @enumToInt(enum_Format.FORMAT_G8_B8_R8_3PLANE_420_UNORM);
pub const FORMAT_G8_B8R8_2PLANE_420_UNORM = @enumToInt(enum_Format.FORMAT_G8_B8R8_2PLANE_420_UNORM);
pub const FORMAT_G8_B8_R8_3PLANE_422_UNORM = @enumToInt(enum_Format.FORMAT_G8_B8_R8_3PLANE_422_UNORM);
pub const FORMAT_G8_B8R8_2PLANE_422_UNORM = @enumToInt(enum_Format.FORMAT_G8_B8R8_2PLANE_422_UNORM);
pub const FORMAT_G8_B8_R8_3PLANE_444_UNORM = @enumToInt(enum_Format.FORMAT_G8_B8_R8_3PLANE_444_UNORM);
pub const FORMAT_R10X6_UNORM_PACK16 = @enumToInt(enum_Format.FORMAT_R10X6_UNORM_PACK16);
pub const FORMAT_R10X6G10X6_UNORM_2PACK16 = @enumToInt(enum_Format.FORMAT_R10X6G10X6_UNORM_2PACK16);
pub const FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = @enumToInt(enum_Format.FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16);
pub const FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = @enumToInt(enum_Format.FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16);
pub const FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = @enumToInt(enum_Format.FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16);
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16);
pub const FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16);
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16);
pub const FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16);
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16);
pub const FORMAT_R12X4_UNORM_PACK16 = @enumToInt(enum_Format.FORMAT_R12X4_UNORM_PACK16);
pub const FORMAT_R12X4G12X4_UNORM_2PACK16 = @enumToInt(enum_Format.FORMAT_R12X4G12X4_UNORM_2PACK16);
pub const FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = @enumToInt(enum_Format.FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16);
pub const FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = @enumToInt(enum_Format.FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16);
pub const FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = @enumToInt(enum_Format.FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16);
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16);
pub const FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16);
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16);
pub const FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16);
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = @enumToInt(enum_Format.FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16);
pub const FORMAT_G16B16G16R16_422_UNORM = @enumToInt(enum_Format.FORMAT_G16B16G16R16_422_UNORM);
pub const FORMAT_B16G16R16G16_422_UNORM = @enumToInt(enum_Format.FORMAT_B16G16R16G16_422_UNORM);
pub const FORMAT_G16_B16_R16_3PLANE_420_UNORM = @enumToInt(enum_Format.FORMAT_G16_B16_R16_3PLANE_420_UNORM);
pub const FORMAT_G16_B16R16_2PLANE_420_UNORM = @enumToInt(enum_Format.FORMAT_G16_B16R16_2PLANE_420_UNORM);
pub const FORMAT_G16_B16_R16_3PLANE_422_UNORM = @enumToInt(enum_Format.FORMAT_G16_B16_R16_3PLANE_422_UNORM);
pub const FORMAT_G16_B16R16_2PLANE_422_UNORM = @enumToInt(enum_Format.FORMAT_G16_B16R16_2PLANE_422_UNORM);
pub const FORMAT_G16_B16_R16_3PLANE_444_UNORM = @enumToInt(enum_Format.FORMAT_G16_B16_R16_3PLANE_444_UNORM);
pub const FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = @enumToInt(enum_Format.FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG);
pub const FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = @enumToInt(enum_Format.FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG);
pub const FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = @enumToInt(enum_Format.FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG);
pub const FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = @enumToInt(enum_Format.FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG);
pub const FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = @enumToInt(enum_Format.FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG);
pub const FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = @enumToInt(enum_Format.FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG);
pub const FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = @enumToInt(enum_Format.FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG);
pub const FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = @enumToInt(enum_Format.FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG);
pub const FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT);
pub const FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = @enumToInt(enum_Format.FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT);
pub const FORMAT_A4R4G4B4_UNORM_PACK16_EXT = @enumToInt(enum_Format.FORMAT_A4R4G4B4_UNORM_PACK16_EXT);
pub const FORMAT_A4B4G4R4_UNORM_PACK16_EXT = @enumToInt(enum_Format.FORMAT_A4B4G4R4_UNORM_PACK16_EXT);
pub const FORMAT_G8B8G8R8_422_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G8B8G8R8_422_UNORM_KHR);
pub const FORMAT_B8G8R8G8_422_UNORM_KHR = @enumToInt(enum_Format.FORMAT_B8G8R8G8_422_UNORM_KHR);
pub const FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR);
pub const FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR);
pub const FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR);
pub const FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR);
pub const FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR);
pub const FORMAT_R10X6_UNORM_PACK16_KHR = @enumToInt(enum_Format.FORMAT_R10X6_UNORM_PACK16_KHR);
pub const FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = @enumToInt(enum_Format.FORMAT_R10X6G10X6_UNORM_2PACK16_KHR);
pub const FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = @enumToInt(enum_Format.FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR);
pub const FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = @enumToInt(enum_Format.FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR);
pub const FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = @enumToInt(enum_Format.FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR);
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR);
pub const FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR);
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR);
pub const FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR);
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR);
pub const FORMAT_R12X4_UNORM_PACK16_KHR = @enumToInt(enum_Format.FORMAT_R12X4_UNORM_PACK16_KHR);
pub const FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = @enumToInt(enum_Format.FORMAT_R12X4G12X4_UNORM_2PACK16_KHR);
pub const FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = @enumToInt(enum_Format.FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR);
pub const FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = @enumToInt(enum_Format.FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR);
pub const FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = @enumToInt(enum_Format.FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR);
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR);
pub const FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR);
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR);
pub const FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR);
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = @enumToInt(enum_Format.FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR);
pub const FORMAT_G16B16G16R16_422_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G16B16G16R16_422_UNORM_KHR);
pub const FORMAT_B16G16R16G16_422_UNORM_KHR = @enumToInt(enum_Format.FORMAT_B16G16R16G16_422_UNORM_KHR);
pub const FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR);
pub const FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR);
pub const FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR);
pub const FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR);
pub const FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = @enumToInt(enum_Format.FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR);
pub const FORMAT_MAX_ENUM = @enumToInt(enum_Format.FORMAT_MAX_ENUM);
pub const enum_Format = extern enum(c_int) {
    FORMAT_UNDEFINED = 0,
    FORMAT_R4G4_UNORM_PACK8 = 1,
    FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    FORMAT_R5G6B5_UNORM_PACK16 = 4,
    FORMAT_B5G6R5_UNORM_PACK16 = 5,
    FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    FORMAT_R8_UNORM = 9,
    FORMAT_R8_SNORM = 10,
    FORMAT_R8_USCALED = 11,
    FORMAT_R8_SSCALED = 12,
    FORMAT_R8_UINT = 13,
    FORMAT_R8_SINT = 14,
    FORMAT_R8_SRGB = 15,
    FORMAT_R8G8_UNORM = 16,
    FORMAT_R8G8_SNORM = 17,
    FORMAT_R8G8_USCALED = 18,
    FORMAT_R8G8_SSCALED = 19,
    FORMAT_R8G8_UINT = 20,
    FORMAT_R8G8_SINT = 21,
    FORMAT_R8G8_SRGB = 22,
    FORMAT_R8G8B8_UNORM = 23,
    FORMAT_R8G8B8_SNORM = 24,
    FORMAT_R8G8B8_USCALED = 25,
    FORMAT_R8G8B8_SSCALED = 26,
    FORMAT_R8G8B8_UINT = 27,
    FORMAT_R8G8B8_SINT = 28,
    FORMAT_R8G8B8_SRGB = 29,
    FORMAT_B8G8R8_UNORM = 30,
    FORMAT_B8G8R8_SNORM = 31,
    FORMAT_B8G8R8_USCALED = 32,
    FORMAT_B8G8R8_SSCALED = 33,
    FORMAT_B8G8R8_UINT = 34,
    FORMAT_B8G8R8_SINT = 35,
    FORMAT_B8G8R8_SRGB = 36,
    FORMAT_R8G8B8A8_UNORM = 37,
    FORMAT_R8G8B8A8_SNORM = 38,
    FORMAT_R8G8B8A8_USCALED = 39,
    FORMAT_R8G8B8A8_SSCALED = 40,
    FORMAT_R8G8B8A8_UINT = 41,
    FORMAT_R8G8B8A8_SINT = 42,
    FORMAT_R8G8B8A8_SRGB = 43,
    FORMAT_B8G8R8A8_UNORM = 44,
    FORMAT_B8G8R8A8_SNORM = 45,
    FORMAT_B8G8R8A8_USCALED = 46,
    FORMAT_B8G8R8A8_SSCALED = 47,
    FORMAT_B8G8R8A8_UINT = 48,
    FORMAT_B8G8R8A8_SINT = 49,
    FORMAT_B8G8R8A8_SRGB = 50,
    FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    FORMAT_R16_UNORM = 70,
    FORMAT_R16_SNORM = 71,
    FORMAT_R16_USCALED = 72,
    FORMAT_R16_SSCALED = 73,
    FORMAT_R16_UINT = 74,
    FORMAT_R16_SINT = 75,
    FORMAT_R16_SFLOAT = 76,
    FORMAT_R16G16_UNORM = 77,
    FORMAT_R16G16_SNORM = 78,
    FORMAT_R16G16_USCALED = 79,
    FORMAT_R16G16_SSCALED = 80,
    FORMAT_R16G16_UINT = 81,
    FORMAT_R16G16_SINT = 82,
    FORMAT_R16G16_SFLOAT = 83,
    FORMAT_R16G16B16_UNORM = 84,
    FORMAT_R16G16B16_SNORM = 85,
    FORMAT_R16G16B16_USCALED = 86,
    FORMAT_R16G16B16_SSCALED = 87,
    FORMAT_R16G16B16_UINT = 88,
    FORMAT_R16G16B16_SINT = 89,
    FORMAT_R16G16B16_SFLOAT = 90,
    FORMAT_R16G16B16A16_UNORM = 91,
    FORMAT_R16G16B16A16_SNORM = 92,
    FORMAT_R16G16B16A16_USCALED = 93,
    FORMAT_R16G16B16A16_SSCALED = 94,
    FORMAT_R16G16B16A16_UINT = 95,
    FORMAT_R16G16B16A16_SINT = 96,
    FORMAT_R16G16B16A16_SFLOAT = 97,
    FORMAT_R32_UINT = 98,
    FORMAT_R32_SINT = 99,
    FORMAT_R32_SFLOAT = 100,
    FORMAT_R32G32_UINT = 101,
    FORMAT_R32G32_SINT = 102,
    FORMAT_R32G32_SFLOAT = 103,
    FORMAT_R32G32B32_UINT = 104,
    FORMAT_R32G32B32_SINT = 105,
    FORMAT_R32G32B32_SFLOAT = 106,
    FORMAT_R32G32B32A32_UINT = 107,
    FORMAT_R32G32B32A32_SINT = 108,
    FORMAT_R32G32B32A32_SFLOAT = 109,
    FORMAT_R64_UINT = 110,
    FORMAT_R64_SINT = 111,
    FORMAT_R64_SFLOAT = 112,
    FORMAT_R64G64_UINT = 113,
    FORMAT_R64G64_SINT = 114,
    FORMAT_R64G64_SFLOAT = 115,
    FORMAT_R64G64B64_UINT = 116,
    FORMAT_R64G64B64_SINT = 117,
    FORMAT_R64G64B64_SFLOAT = 118,
    FORMAT_R64G64B64A64_UINT = 119,
    FORMAT_R64G64B64A64_SINT = 120,
    FORMAT_R64G64B64A64_SFLOAT = 121,
    FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    FORMAT_D16_UNORM = 124,
    FORMAT_X8_D24_UNORM_PACK32 = 125,
    FORMAT_D32_SFLOAT = 126,
    FORMAT_S8_UINT = 127,
    FORMAT_D16_UNORM_S8_UINT = 128,
    FORMAT_D24_UNORM_S8_UINT = 129,
    FORMAT_D32_SFLOAT_S8_UINT = 130,
    FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    FORMAT_BC2_UNORM_BLOCK = 135,
    FORMAT_BC2_SRGB_BLOCK = 136,
    FORMAT_BC3_UNORM_BLOCK = 137,
    FORMAT_BC3_SRGB_BLOCK = 138,
    FORMAT_BC4_UNORM_BLOCK = 139,
    FORMAT_BC4_SNORM_BLOCK = 140,
    FORMAT_BC5_UNORM_BLOCK = 141,
    FORMAT_BC5_SNORM_BLOCK = 142,
    FORMAT_BC6H_UFLOAT_BLOCK = 143,
    FORMAT_BC6H_SFLOAT_BLOCK = 144,
    FORMAT_BC7_UNORM_BLOCK = 145,
    FORMAT_BC7_SRGB_BLOCK = 146,
    FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    FORMAT_EAC_R11_UNORM_BLOCK = 153,
    FORMAT_EAC_R11_SNORM_BLOCK = 154,
    FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
    FORMAT_G8B8G8R8_422_UNORM = 1000156000,
    FORMAT_B8G8R8G8_422_UNORM = 1000156001,
    FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
    FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
    FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
    FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
    FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
    FORMAT_R10X6_UNORM_PACK16 = 1000156007,
    FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
    FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
    FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
    FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
    FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
    FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
    FORMAT_R12X4_UNORM_PACK16 = 1000156017,
    FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
    FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
    FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
    FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
    FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
    FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
    FORMAT_G16B16G16R16_422_UNORM = 1000156027,
    FORMAT_B16G16R16G16_422_UNORM = 1000156028,
    FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
    FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
    FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
    FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
    FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
    FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
    FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
    FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
    FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
    FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
    FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
    FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
    FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
    FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
    FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
    FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
    FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
    FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
    FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,
    FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000,
    FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001,
    FORMAT_G8B8G8R8_422_UNORM_KHR = 1000156000,
    FORMAT_B8G8R8G8_422_UNORM_KHR = 1000156001,
    FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002,
    FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003,
    FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004,
    FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005,
    FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006,
    FORMAT_R10X6_UNORM_PACK16_KHR = 1000156007,
    FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = 1000156008,
    FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009,
    FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010,
    FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012,
    FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014,
    FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016,
    FORMAT_R12X4_UNORM_PACK16_KHR = 1000156017,
    FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = 1000156018,
    FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019,
    FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020,
    FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022,
    FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024,
    FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026,
    FORMAT_G16B16G16R16_422_UNORM_KHR = 1000156027,
    FORMAT_B16G16R16G16_422_UNORM_KHR = 1000156028,
    FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029,
    FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030,
    FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031,
    FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032,
    FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033,
    FORMAT_MAX_ENUM = 2147483647,
    _,
};
pub const Format = enum_Format;
pub const IMAGE_TILING_OPTIMAL = @enumToInt(enum_ImageTiling.IMAGE_TILING_OPTIMAL);
pub const IMAGE_TILING_LINEAR = @enumToInt(enum_ImageTiling.IMAGE_TILING_LINEAR);
pub const IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = @enumToInt(enum_ImageTiling.IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT);
pub const IMAGE_TILING_MAX_ENUM = @enumToInt(enum_ImageTiling.IMAGE_TILING_MAX_ENUM);
pub const enum_ImageTiling = extern enum(c_int) {
    IMAGE_TILING_OPTIMAL = 0,
    IMAGE_TILING_LINEAR = 1,
    IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
    IMAGE_TILING_MAX_ENUM = 2147483647,
    _,
};
pub const ImageTiling = enum_ImageTiling;
pub const IMAGE_TYPE_1D = @enumToInt(enum_ImageType.IMAGE_TYPE_1D);
pub const IMAGE_TYPE_2D = @enumToInt(enum_ImageType.IMAGE_TYPE_2D);
pub const IMAGE_TYPE_3D = @enumToInt(enum_ImageType.IMAGE_TYPE_3D);
pub const IMAGE_TYPE_MAX_ENUM = @enumToInt(enum_ImageType.IMAGE_TYPE_MAX_ENUM);
pub const enum_ImageType = extern enum(c_int) {
    IMAGE_TYPE_1D = 0,
    IMAGE_TYPE_2D = 1,
    IMAGE_TYPE_3D = 2,
    IMAGE_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const ImageType = enum_ImageType;
pub const PHYSICAL_DEVICE_TYPE_OTHER = @enumToInt(enum_PhysicalDeviceType.PHYSICAL_DEVICE_TYPE_OTHER);
pub const PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = @enumToInt(enum_PhysicalDeviceType.PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU);
pub const PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = @enumToInt(enum_PhysicalDeviceType.PHYSICAL_DEVICE_TYPE_DISCRETE_GPU);
pub const PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = @enumToInt(enum_PhysicalDeviceType.PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU);
pub const PHYSICAL_DEVICE_TYPE_CPU = @enumToInt(enum_PhysicalDeviceType.PHYSICAL_DEVICE_TYPE_CPU);
pub const PHYSICAL_DEVICE_TYPE_MAX_ENUM = @enumToInt(enum_PhysicalDeviceType.PHYSICAL_DEVICE_TYPE_MAX_ENUM);
pub const enum_PhysicalDeviceType = extern enum(c_int) {
    PHYSICAL_DEVICE_TYPE_OTHER = 0,
    PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    PHYSICAL_DEVICE_TYPE_CPU = 4,
    PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const PhysicalDeviceType = enum_PhysicalDeviceType;
pub const QUERY_TYPE_OCCLUSION = @enumToInt(enum_QueryType.QUERY_TYPE_OCCLUSION);
pub const QUERY_TYPE_PIPELINE_STATISTICS = @enumToInt(enum_QueryType.QUERY_TYPE_PIPELINE_STATISTICS);
pub const QUERY_TYPE_TIMESTAMP = @enumToInt(enum_QueryType.QUERY_TYPE_TIMESTAMP);
pub const QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = @enumToInt(enum_QueryType.QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT);
pub const QUERY_TYPE_PERFORMANCE_QUERY_KHR = @enumToInt(enum_QueryType.QUERY_TYPE_PERFORMANCE_QUERY_KHR);
pub const QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = @enumToInt(enum_QueryType.QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR);
pub const QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = @enumToInt(enum_QueryType.QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR);
pub const QUERY_TYPE_PERFORMANCE_QUERY_INTEL = @enumToInt(enum_QueryType.QUERY_TYPE_PERFORMANCE_QUERY_INTEL);
pub const QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = @enumToInt(enum_QueryType.QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV);
pub const QUERY_TYPE_MAX_ENUM = @enumToInt(enum_QueryType.QUERY_TYPE_MAX_ENUM);
pub const enum_QueryType = extern enum(c_int) {
    QUERY_TYPE_OCCLUSION = 0,
    QUERY_TYPE_PIPELINE_STATISTICS = 1,
    QUERY_TYPE_TIMESTAMP = 2,
    QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
    QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
    QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000165000,
    QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150000,
    QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
    QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
    QUERY_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const QueryType = enum_QueryType;
pub const SHARING_MODE_EXCLUSIVE = @enumToInt(enum_SharingMode.SHARING_MODE_EXCLUSIVE);
pub const SHARING_MODE_CONCURRENT = @enumToInt(enum_SharingMode.SHARING_MODE_CONCURRENT);
pub const SHARING_MODE_MAX_ENUM = @enumToInt(enum_SharingMode.SHARING_MODE_MAX_ENUM);
pub const enum_SharingMode = extern enum(c_int) {
    SHARING_MODE_EXCLUSIVE = 0,
    SHARING_MODE_CONCURRENT = 1,
    SHARING_MODE_MAX_ENUM = 2147483647,
    _,
};
pub const SharingMode = enum_SharingMode;
pub const COMPONENT_SWIZZLE_IDENTITY = @enumToInt(enum_ComponentSwizzle.COMPONENT_SWIZZLE_IDENTITY);
pub const COMPONENT_SWIZZLE_ZERO = @enumToInt(enum_ComponentSwizzle.COMPONENT_SWIZZLE_ZERO);
pub const COMPONENT_SWIZZLE_ONE = @enumToInt(enum_ComponentSwizzle.COMPONENT_SWIZZLE_ONE);
pub const COMPONENT_SWIZZLE_R = @enumToInt(enum_ComponentSwizzle.COMPONENT_SWIZZLE_R);
pub const COMPONENT_SWIZZLE_G = @enumToInt(enum_ComponentSwizzle.COMPONENT_SWIZZLE_G);
pub const COMPONENT_SWIZZLE_B = @enumToInt(enum_ComponentSwizzle.COMPONENT_SWIZZLE_B);
pub const COMPONENT_SWIZZLE_A = @enumToInt(enum_ComponentSwizzle.COMPONENT_SWIZZLE_A);
pub const COMPONENT_SWIZZLE_MAX_ENUM = @enumToInt(enum_ComponentSwizzle.COMPONENT_SWIZZLE_MAX_ENUM);
pub const enum_ComponentSwizzle = extern enum(c_int) {
    COMPONENT_SWIZZLE_IDENTITY = 0,
    COMPONENT_SWIZZLE_ZERO = 1,
    COMPONENT_SWIZZLE_ONE = 2,
    COMPONENT_SWIZZLE_R = 3,
    COMPONENT_SWIZZLE_G = 4,
    COMPONENT_SWIZZLE_B = 5,
    COMPONENT_SWIZZLE_A = 6,
    COMPONENT_SWIZZLE_MAX_ENUM = 2147483647,
    _,
};
pub const ComponentSwizzle = enum_ComponentSwizzle;
pub const IMAGE_VIEW_TYPE_1D = @enumToInt(enum_ImageViewType.IMAGE_VIEW_TYPE_1D);
pub const IMAGE_VIEW_TYPE_2D = @enumToInt(enum_ImageViewType.IMAGE_VIEW_TYPE_2D);
pub const IMAGE_VIEW_TYPE_3D = @enumToInt(enum_ImageViewType.IMAGE_VIEW_TYPE_3D);
pub const IMAGE_VIEW_TYPE_CUBE = @enumToInt(enum_ImageViewType.IMAGE_VIEW_TYPE_CUBE);
pub const IMAGE_VIEW_TYPE_1D_ARRAY = @enumToInt(enum_ImageViewType.IMAGE_VIEW_TYPE_1D_ARRAY);
pub const IMAGE_VIEW_TYPE_2D_ARRAY = @enumToInt(enum_ImageViewType.IMAGE_VIEW_TYPE_2D_ARRAY);
pub const IMAGE_VIEW_TYPE_CUBE_ARRAY = @enumToInt(enum_ImageViewType.IMAGE_VIEW_TYPE_CUBE_ARRAY);
pub const IMAGE_VIEW_TYPE_MAX_ENUM = @enumToInt(enum_ImageViewType.IMAGE_VIEW_TYPE_MAX_ENUM);
pub const enum_ImageViewType = extern enum(c_int) {
    IMAGE_VIEW_TYPE_1D = 0,
    IMAGE_VIEW_TYPE_2D = 1,
    IMAGE_VIEW_TYPE_3D = 2,
    IMAGE_VIEW_TYPE_CUBE = 3,
    IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const ImageViewType = enum_ImageViewType;
pub const BLEND_FACTOR_ZERO = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ZERO);
pub const BLEND_FACTOR_ONE = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ONE);
pub const BLEND_FACTOR_SRC_COLOR = @enumToInt(enum_BlendFactor.BLEND_FACTOR_SRC_COLOR);
pub const BLEND_FACTOR_ONE_MINUS_SRC_COLOR = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ONE_MINUS_SRC_COLOR);
pub const BLEND_FACTOR_DST_COLOR = @enumToInt(enum_BlendFactor.BLEND_FACTOR_DST_COLOR);
pub const BLEND_FACTOR_ONE_MINUS_DST_COLOR = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ONE_MINUS_DST_COLOR);
pub const BLEND_FACTOR_SRC_ALPHA = @enumToInt(enum_BlendFactor.BLEND_FACTOR_SRC_ALPHA);
pub const BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA);
pub const BLEND_FACTOR_DST_ALPHA = @enumToInt(enum_BlendFactor.BLEND_FACTOR_DST_ALPHA);
pub const BLEND_FACTOR_ONE_MINUS_DST_ALPHA = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ONE_MINUS_DST_ALPHA);
pub const BLEND_FACTOR_CONSTANT_COLOR = @enumToInt(enum_BlendFactor.BLEND_FACTOR_CONSTANT_COLOR);
pub const BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR);
pub const BLEND_FACTOR_CONSTANT_ALPHA = @enumToInt(enum_BlendFactor.BLEND_FACTOR_CONSTANT_ALPHA);
pub const BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA);
pub const BLEND_FACTOR_SRC_ALPHA_SATURATE = @enumToInt(enum_BlendFactor.BLEND_FACTOR_SRC_ALPHA_SATURATE);
pub const BLEND_FACTOR_SRC1_COLOR = @enumToInt(enum_BlendFactor.BLEND_FACTOR_SRC1_COLOR);
pub const BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ONE_MINUS_SRC1_COLOR);
pub const BLEND_FACTOR_SRC1_ALPHA = @enumToInt(enum_BlendFactor.BLEND_FACTOR_SRC1_ALPHA);
pub const BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = @enumToInt(enum_BlendFactor.BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA);
pub const BLEND_FACTOR_MAX_ENUM = @enumToInt(enum_BlendFactor.BLEND_FACTOR_MAX_ENUM);
pub const enum_BlendFactor = extern enum(c_int) {
    BLEND_FACTOR_ZERO = 0,
    BLEND_FACTOR_ONE = 1,
    BLEND_FACTOR_SRC_COLOR = 2,
    BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    BLEND_FACTOR_DST_COLOR = 4,
    BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    BLEND_FACTOR_SRC_ALPHA = 6,
    BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    BLEND_FACTOR_DST_ALPHA = 8,
    BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    BLEND_FACTOR_CONSTANT_COLOR = 10,
    BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    BLEND_FACTOR_CONSTANT_ALPHA = 12,
    BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    BLEND_FACTOR_SRC1_COLOR = 15,
    BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    BLEND_FACTOR_SRC1_ALPHA = 17,
    BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
    BLEND_FACTOR_MAX_ENUM = 2147483647,
    _,
};
pub const BlendFactor = enum_BlendFactor;
pub const BLEND_OP_ADD = @enumToInt(enum_BlendOp.BLEND_OP_ADD);
pub const BLEND_OP_SUBTRACT = @enumToInt(enum_BlendOp.BLEND_OP_SUBTRACT);
pub const BLEND_OP_REVERSE_SUBTRACT = @enumToInt(enum_BlendOp.BLEND_OP_REVERSE_SUBTRACT);
pub const BLEND_OP_MIN = @enumToInt(enum_BlendOp.BLEND_OP_MIN);
pub const BLEND_OP_MAX = @enumToInt(enum_BlendOp.BLEND_OP_MAX);
pub const BLEND_OP_ZERO_EXT = @enumToInt(enum_BlendOp.BLEND_OP_ZERO_EXT);
pub const BLEND_OP_SRC_EXT = @enumToInt(enum_BlendOp.BLEND_OP_SRC_EXT);
pub const BLEND_OP_DST_EXT = @enumToInt(enum_BlendOp.BLEND_OP_DST_EXT);
pub const BLEND_OP_SRC_OVER_EXT = @enumToInt(enum_BlendOp.BLEND_OP_SRC_OVER_EXT);
pub const BLEND_OP_DST_OVER_EXT = @enumToInt(enum_BlendOp.BLEND_OP_DST_OVER_EXT);
pub const BLEND_OP_SRC_IN_EXT = @enumToInt(enum_BlendOp.BLEND_OP_SRC_IN_EXT);
pub const BLEND_OP_DST_IN_EXT = @enumToInt(enum_BlendOp.BLEND_OP_DST_IN_EXT);
pub const BLEND_OP_SRC_OUT_EXT = @enumToInt(enum_BlendOp.BLEND_OP_SRC_OUT_EXT);
pub const BLEND_OP_DST_OUT_EXT = @enumToInt(enum_BlendOp.BLEND_OP_DST_OUT_EXT);
pub const BLEND_OP_SRC_ATOP_EXT = @enumToInt(enum_BlendOp.BLEND_OP_SRC_ATOP_EXT);
pub const BLEND_OP_DST_ATOP_EXT = @enumToInt(enum_BlendOp.BLEND_OP_DST_ATOP_EXT);
pub const BLEND_OP_XOR_EXT = @enumToInt(enum_BlendOp.BLEND_OP_XOR_EXT);
pub const BLEND_OP_MULTIPLY_EXT = @enumToInt(enum_BlendOp.BLEND_OP_MULTIPLY_EXT);
pub const BLEND_OP_SCREEN_EXT = @enumToInt(enum_BlendOp.BLEND_OP_SCREEN_EXT);
pub const BLEND_OP_OVERLAY_EXT = @enumToInt(enum_BlendOp.BLEND_OP_OVERLAY_EXT);
pub const BLEND_OP_DARKEN_EXT = @enumToInt(enum_BlendOp.BLEND_OP_DARKEN_EXT);
pub const BLEND_OP_LIGHTEN_EXT = @enumToInt(enum_BlendOp.BLEND_OP_LIGHTEN_EXT);
pub const BLEND_OP_COLORDODGE_EXT = @enumToInt(enum_BlendOp.BLEND_OP_COLORDODGE_EXT);
pub const BLEND_OP_COLORBURN_EXT = @enumToInt(enum_BlendOp.BLEND_OP_COLORBURN_EXT);
pub const BLEND_OP_HARDLIGHT_EXT = @enumToInt(enum_BlendOp.BLEND_OP_HARDLIGHT_EXT);
pub const BLEND_OP_SOFTLIGHT_EXT = @enumToInt(enum_BlendOp.BLEND_OP_SOFTLIGHT_EXT);
pub const BLEND_OP_DIFFERENCE_EXT = @enumToInt(enum_BlendOp.BLEND_OP_DIFFERENCE_EXT);
pub const BLEND_OP_EXCLUSION_EXT = @enumToInt(enum_BlendOp.BLEND_OP_EXCLUSION_EXT);
pub const BLEND_OP_INVERT_EXT = @enumToInt(enum_BlendOp.BLEND_OP_INVERT_EXT);
pub const BLEND_OP_INVERT_RGB_EXT = @enumToInt(enum_BlendOp.BLEND_OP_INVERT_RGB_EXT);
pub const BLEND_OP_LINEARDODGE_EXT = @enumToInt(enum_BlendOp.BLEND_OP_LINEARDODGE_EXT);
pub const BLEND_OP_LINEARBURN_EXT = @enumToInt(enum_BlendOp.BLEND_OP_LINEARBURN_EXT);
pub const BLEND_OP_VIVIDLIGHT_EXT = @enumToInt(enum_BlendOp.BLEND_OP_VIVIDLIGHT_EXT);
pub const BLEND_OP_LINEARLIGHT_EXT = @enumToInt(enum_BlendOp.BLEND_OP_LINEARLIGHT_EXT);
pub const BLEND_OP_PINLIGHT_EXT = @enumToInt(enum_BlendOp.BLEND_OP_PINLIGHT_EXT);
pub const BLEND_OP_HARDMIX_EXT = @enumToInt(enum_BlendOp.BLEND_OP_HARDMIX_EXT);
pub const BLEND_OP_HSL_HUE_EXT = @enumToInt(enum_BlendOp.BLEND_OP_HSL_HUE_EXT);
pub const BLEND_OP_HSL_SATURATION_EXT = @enumToInt(enum_BlendOp.BLEND_OP_HSL_SATURATION_EXT);
pub const BLEND_OP_HSL_COLOR_EXT = @enumToInt(enum_BlendOp.BLEND_OP_HSL_COLOR_EXT);
pub const BLEND_OP_HSL_LUMINOSITY_EXT = @enumToInt(enum_BlendOp.BLEND_OP_HSL_LUMINOSITY_EXT);
pub const BLEND_OP_PLUS_EXT = @enumToInt(enum_BlendOp.BLEND_OP_PLUS_EXT);
pub const BLEND_OP_PLUS_CLAMPED_EXT = @enumToInt(enum_BlendOp.BLEND_OP_PLUS_CLAMPED_EXT);
pub const BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = @enumToInt(enum_BlendOp.BLEND_OP_PLUS_CLAMPED_ALPHA_EXT);
pub const BLEND_OP_PLUS_DARKER_EXT = @enumToInt(enum_BlendOp.BLEND_OP_PLUS_DARKER_EXT);
pub const BLEND_OP_MINUS_EXT = @enumToInt(enum_BlendOp.BLEND_OP_MINUS_EXT);
pub const BLEND_OP_MINUS_CLAMPED_EXT = @enumToInt(enum_BlendOp.BLEND_OP_MINUS_CLAMPED_EXT);
pub const BLEND_OP_CONTRAST_EXT = @enumToInt(enum_BlendOp.BLEND_OP_CONTRAST_EXT);
pub const BLEND_OP_INVERT_OVG_EXT = @enumToInt(enum_BlendOp.BLEND_OP_INVERT_OVG_EXT);
pub const BLEND_OP_RED_EXT = @enumToInt(enum_BlendOp.BLEND_OP_RED_EXT);
pub const BLEND_OP_GREEN_EXT = @enumToInt(enum_BlendOp.BLEND_OP_GREEN_EXT);
pub const BLEND_OP_BLUE_EXT = @enumToInt(enum_BlendOp.BLEND_OP_BLUE_EXT);
pub const BLEND_OP_MAX_ENUM = @enumToInt(enum_BlendOp.BLEND_OP_MAX_ENUM);
pub const enum_BlendOp = extern enum(c_int) {
    BLEND_OP_ADD = 0,
    BLEND_OP_SUBTRACT = 1,
    BLEND_OP_REVERSE_SUBTRACT = 2,
    BLEND_OP_MIN = 3,
    BLEND_OP_MAX = 4,
    BLEND_OP_ZERO_EXT = 1000148000,
    BLEND_OP_SRC_EXT = 1000148001,
    BLEND_OP_DST_EXT = 1000148002,
    BLEND_OP_SRC_OVER_EXT = 1000148003,
    BLEND_OP_DST_OVER_EXT = 1000148004,
    BLEND_OP_SRC_IN_EXT = 1000148005,
    BLEND_OP_DST_IN_EXT = 1000148006,
    BLEND_OP_SRC_OUT_EXT = 1000148007,
    BLEND_OP_DST_OUT_EXT = 1000148008,
    BLEND_OP_SRC_ATOP_EXT = 1000148009,
    BLEND_OP_DST_ATOP_EXT = 1000148010,
    BLEND_OP_XOR_EXT = 1000148011,
    BLEND_OP_MULTIPLY_EXT = 1000148012,
    BLEND_OP_SCREEN_EXT = 1000148013,
    BLEND_OP_OVERLAY_EXT = 1000148014,
    BLEND_OP_DARKEN_EXT = 1000148015,
    BLEND_OP_LIGHTEN_EXT = 1000148016,
    BLEND_OP_COLORDODGE_EXT = 1000148017,
    BLEND_OP_COLORBURN_EXT = 1000148018,
    BLEND_OP_HARDLIGHT_EXT = 1000148019,
    BLEND_OP_SOFTLIGHT_EXT = 1000148020,
    BLEND_OP_DIFFERENCE_EXT = 1000148021,
    BLEND_OP_EXCLUSION_EXT = 1000148022,
    BLEND_OP_INVERT_EXT = 1000148023,
    BLEND_OP_INVERT_RGB_EXT = 1000148024,
    BLEND_OP_LINEARDODGE_EXT = 1000148025,
    BLEND_OP_LINEARBURN_EXT = 1000148026,
    BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
    BLEND_OP_LINEARLIGHT_EXT = 1000148028,
    BLEND_OP_PINLIGHT_EXT = 1000148029,
    BLEND_OP_HARDMIX_EXT = 1000148030,
    BLEND_OP_HSL_HUE_EXT = 1000148031,
    BLEND_OP_HSL_SATURATION_EXT = 1000148032,
    BLEND_OP_HSL_COLOR_EXT = 1000148033,
    BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
    BLEND_OP_PLUS_EXT = 1000148035,
    BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
    BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    BLEND_OP_PLUS_DARKER_EXT = 1000148038,
    BLEND_OP_MINUS_EXT = 1000148039,
    BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
    BLEND_OP_CONTRAST_EXT = 1000148041,
    BLEND_OP_INVERT_OVG_EXT = 1000148042,
    BLEND_OP_RED_EXT = 1000148043,
    BLEND_OP_GREEN_EXT = 1000148044,
    BLEND_OP_BLUE_EXT = 1000148045,
    BLEND_OP_MAX_ENUM = 2147483647,
    _,
};
pub const BlendOp = enum_BlendOp;
pub const COMPARE_OP_NEVER = @enumToInt(enum_CompareOp.COMPARE_OP_NEVER);
pub const COMPARE_OP_LESS = @enumToInt(enum_CompareOp.COMPARE_OP_LESS);
pub const COMPARE_OP_EQUAL = @enumToInt(enum_CompareOp.COMPARE_OP_EQUAL);
pub const COMPARE_OP_LESS_OR_EQUAL = @enumToInt(enum_CompareOp.COMPARE_OP_LESS_OR_EQUAL);
pub const COMPARE_OP_GREATER = @enumToInt(enum_CompareOp.COMPARE_OP_GREATER);
pub const COMPARE_OP_NOT_EQUAL = @enumToInt(enum_CompareOp.COMPARE_OP_NOT_EQUAL);
pub const COMPARE_OP_GREATER_OR_EQUAL = @enumToInt(enum_CompareOp.COMPARE_OP_GREATER_OR_EQUAL);
pub const COMPARE_OP_ALWAYS = @enumToInt(enum_CompareOp.COMPARE_OP_ALWAYS);
pub const COMPARE_OP_MAX_ENUM = @enumToInt(enum_CompareOp.COMPARE_OP_MAX_ENUM);
pub const enum_CompareOp = extern enum(c_int) {
    COMPARE_OP_NEVER = 0,
    COMPARE_OP_LESS = 1,
    COMPARE_OP_EQUAL = 2,
    COMPARE_OP_LESS_OR_EQUAL = 3,
    COMPARE_OP_GREATER = 4,
    COMPARE_OP_NOT_EQUAL = 5,
    COMPARE_OP_GREATER_OR_EQUAL = 6,
    COMPARE_OP_ALWAYS = 7,
    COMPARE_OP_MAX_ENUM = 2147483647,
    _,
};
pub const CompareOp = enum_CompareOp;
pub const DYNAMIC_STATE_VIEWPORT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_VIEWPORT);
pub const DYNAMIC_STATE_SCISSOR = @enumToInt(enum_DynamicState.DYNAMIC_STATE_SCISSOR);
pub const DYNAMIC_STATE_LINE_WIDTH = @enumToInt(enum_DynamicState.DYNAMIC_STATE_LINE_WIDTH);
pub const DYNAMIC_STATE_DEPTH_BIAS = @enumToInt(enum_DynamicState.DYNAMIC_STATE_DEPTH_BIAS);
pub const DYNAMIC_STATE_BLEND_CONSTANTS = @enumToInt(enum_DynamicState.DYNAMIC_STATE_BLEND_CONSTANTS);
pub const DYNAMIC_STATE_DEPTH_BOUNDS = @enumToInt(enum_DynamicState.DYNAMIC_STATE_DEPTH_BOUNDS);
pub const DYNAMIC_STATE_STENCIL_COMPARE_MASK = @enumToInt(enum_DynamicState.DYNAMIC_STATE_STENCIL_COMPARE_MASK);
pub const DYNAMIC_STATE_STENCIL_WRITE_MASK = @enumToInt(enum_DynamicState.DYNAMIC_STATE_STENCIL_WRITE_MASK);
pub const DYNAMIC_STATE_STENCIL_REFERENCE = @enumToInt(enum_DynamicState.DYNAMIC_STATE_STENCIL_REFERENCE);
pub const DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = @enumToInt(enum_DynamicState.DYNAMIC_STATE_VIEWPORT_W_SCALING_NV);
pub const DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_DISCARD_RECTANGLE_EXT);
pub const DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT);
pub const DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = @enumToInt(enum_DynamicState.DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV);
pub const DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = @enumToInt(enum_DynamicState.DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV);
pub const DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = @enumToInt(enum_DynamicState.DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV);
pub const DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = @enumToInt(enum_DynamicState.DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR);
pub const DYNAMIC_STATE_LINE_STIPPLE_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_LINE_STIPPLE_EXT);
pub const DYNAMIC_STATE_CULL_MODE_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_CULL_MODE_EXT);
pub const DYNAMIC_STATE_FRONT_FACE_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_FRONT_FACE_EXT);
pub const DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT);
pub const DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT);
pub const DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT);
pub const DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT);
pub const DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT);
pub const DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT);
pub const DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT);
pub const DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT);
pub const DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT);
pub const DYNAMIC_STATE_STENCIL_OP_EXT = @enumToInt(enum_DynamicState.DYNAMIC_STATE_STENCIL_OP_EXT);
pub const DYNAMIC_STATE_MAX_ENUM = @enumToInt(enum_DynamicState.DYNAMIC_STATE_MAX_ENUM);
pub const enum_DynamicState = extern enum(c_int) {
    DYNAMIC_STATE_VIEWPORT = 0,
    DYNAMIC_STATE_SCISSOR = 1,
    DYNAMIC_STATE_LINE_WIDTH = 2,
    DYNAMIC_STATE_DEPTH_BIAS = 3,
    DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
    DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
    DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
    DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
    DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
    DYNAMIC_STATE_CULL_MODE_EXT = 1000267000,
    DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001,
    DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002,
    DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003,
    DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004,
    DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005,
    DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006,
    DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007,
    DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008,
    DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009,
    DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010,
    DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011,
    DYNAMIC_STATE_MAX_ENUM = 2147483647,
    _,
};
pub const DynamicState = enum_DynamicState;
pub const FRONT_FACE_COUNTER_CLOCKWISE = @enumToInt(enum_FrontFace.FRONT_FACE_COUNTER_CLOCKWISE);
pub const FRONT_FACE_CLOCKWISE = @enumToInt(enum_FrontFace.FRONT_FACE_CLOCKWISE);
pub const FRONT_FACE_MAX_ENUM = @enumToInt(enum_FrontFace.FRONT_FACE_MAX_ENUM);
pub const enum_FrontFace = extern enum(c_int) {
    FRONT_FACE_COUNTER_CLOCKWISE = 0,
    FRONT_FACE_CLOCKWISE = 1,
    FRONT_FACE_MAX_ENUM = 2147483647,
    _,
};
pub const FrontFace = enum_FrontFace;
pub const VERTEX_INPUT_RATE_VERTEX = @enumToInt(enum_VertexInputRate.VERTEX_INPUT_RATE_VERTEX);
pub const VERTEX_INPUT_RATE_INSTANCE = @enumToInt(enum_VertexInputRate.VERTEX_INPUT_RATE_INSTANCE);
pub const VERTEX_INPUT_RATE_MAX_ENUM = @enumToInt(enum_VertexInputRate.VERTEX_INPUT_RATE_MAX_ENUM);
pub const enum_VertexInputRate = extern enum(c_int) {
    VERTEX_INPUT_RATE_VERTEX = 0,
    VERTEX_INPUT_RATE_INSTANCE = 1,
    VERTEX_INPUT_RATE_MAX_ENUM = 2147483647,
    _,
};
pub const VertexInputRate = enum_VertexInputRate;
pub const PRIMITIVE_TOPOLOGY_POINT_LIST = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_POINT_LIST);
pub const PRIMITIVE_TOPOLOGY_LINE_LIST = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_LINE_LIST);
pub const PRIMITIVE_TOPOLOGY_LINE_STRIP = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_LINE_STRIP);
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_TRIANGLE_LIST);
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP);
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_TRIANGLE_FAN);
pub const PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY);
pub const PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY);
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY);
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY);
pub const PRIMITIVE_TOPOLOGY_PATCH_LIST = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_PATCH_LIST);
pub const PRIMITIVE_TOPOLOGY_MAX_ENUM = @enumToInt(enum_PrimitiveTopology.PRIMITIVE_TOPOLOGY_MAX_ENUM);
pub const enum_PrimitiveTopology = extern enum(c_int) {
    PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
    PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647,
    _,
};
pub const PrimitiveTopology = enum_PrimitiveTopology;
pub const POLYGON_MODE_FILL = @enumToInt(enum_PolygonMode.POLYGON_MODE_FILL);
pub const POLYGON_MODE_LINE = @enumToInt(enum_PolygonMode.POLYGON_MODE_LINE);
pub const POLYGON_MODE_POINT = @enumToInt(enum_PolygonMode.POLYGON_MODE_POINT);
pub const POLYGON_MODE_FILL_RECTANGLE_NV = @enumToInt(enum_PolygonMode.POLYGON_MODE_FILL_RECTANGLE_NV);
pub const POLYGON_MODE_MAX_ENUM = @enumToInt(enum_PolygonMode.POLYGON_MODE_MAX_ENUM);
pub const enum_PolygonMode = extern enum(c_int) {
    POLYGON_MODE_FILL = 0,
    POLYGON_MODE_LINE = 1,
    POLYGON_MODE_POINT = 2,
    POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    POLYGON_MODE_MAX_ENUM = 2147483647,
    _,
};
pub const PolygonMode = enum_PolygonMode;
pub const STENCIL_OP_KEEP = @enumToInt(enum_StencilOp.STENCIL_OP_KEEP);
pub const STENCIL_OP_ZERO = @enumToInt(enum_StencilOp.STENCIL_OP_ZERO);
pub const STENCIL_OP_REPLACE = @enumToInt(enum_StencilOp.STENCIL_OP_REPLACE);
pub const STENCIL_OP_INCREMENT_AND_CLAMP = @enumToInt(enum_StencilOp.STENCIL_OP_INCREMENT_AND_CLAMP);
pub const STENCIL_OP_DECREMENT_AND_CLAMP = @enumToInt(enum_StencilOp.STENCIL_OP_DECREMENT_AND_CLAMP);
pub const STENCIL_OP_INVERT = @enumToInt(enum_StencilOp.STENCIL_OP_INVERT);
pub const STENCIL_OP_INCREMENT_AND_WRAP = @enumToInt(enum_StencilOp.STENCIL_OP_INCREMENT_AND_WRAP);
pub const STENCIL_OP_DECREMENT_AND_WRAP = @enumToInt(enum_StencilOp.STENCIL_OP_DECREMENT_AND_WRAP);
pub const STENCIL_OP_MAX_ENUM = @enumToInt(enum_StencilOp.STENCIL_OP_MAX_ENUM);
pub const enum_StencilOp = extern enum(c_int) {
    STENCIL_OP_KEEP = 0,
    STENCIL_OP_ZERO = 1,
    STENCIL_OP_REPLACE = 2,
    STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    STENCIL_OP_INVERT = 5,
    STENCIL_OP_INCREMENT_AND_WRAP = 6,
    STENCIL_OP_DECREMENT_AND_WRAP = 7,
    STENCIL_OP_MAX_ENUM = 2147483647,
    _,
};
pub const StencilOp = enum_StencilOp;
pub const LOGIC_OP_CLEAR = @enumToInt(enum_LogicOp.LOGIC_OP_CLEAR);
pub const LOGIC_OP_AND = @enumToInt(enum_LogicOp.LOGIC_OP_AND);
pub const LOGIC_OP_AND_REVERSE = @enumToInt(enum_LogicOp.LOGIC_OP_AND_REVERSE);
pub const LOGIC_OP_COPY = @enumToInt(enum_LogicOp.LOGIC_OP_COPY);
pub const LOGIC_OP_AND_INVERTED = @enumToInt(enum_LogicOp.LOGIC_OP_AND_INVERTED);
pub const LOGIC_OP_NO_OP = @enumToInt(enum_LogicOp.LOGIC_OP_NO_OP);
pub const LOGIC_OP_XOR = @enumToInt(enum_LogicOp.LOGIC_OP_XOR);
pub const LOGIC_OP_OR = @enumToInt(enum_LogicOp.LOGIC_OP_OR);
pub const LOGIC_OP_NOR = @enumToInt(enum_LogicOp.LOGIC_OP_NOR);
pub const LOGIC_OP_EQUIVALENT = @enumToInt(enum_LogicOp.LOGIC_OP_EQUIVALENT);
pub const LOGIC_OP_INVERT = @enumToInt(enum_LogicOp.LOGIC_OP_INVERT);
pub const LOGIC_OP_OR_REVERSE = @enumToInt(enum_LogicOp.LOGIC_OP_OR_REVERSE);
pub const LOGIC_OP_COPY_INVERTED = @enumToInt(enum_LogicOp.LOGIC_OP_COPY_INVERTED);
pub const LOGIC_OP_OR_INVERTED = @enumToInt(enum_LogicOp.LOGIC_OP_OR_INVERTED);
pub const LOGIC_OP_NAND = @enumToInt(enum_LogicOp.LOGIC_OP_NAND);
pub const LOGIC_OP_SET = @enumToInt(enum_LogicOp.LOGIC_OP_SET);
pub const LOGIC_OP_MAX_ENUM = @enumToInt(enum_LogicOp.LOGIC_OP_MAX_ENUM);
pub const enum_LogicOp = extern enum(c_int) {
    LOGIC_OP_CLEAR = 0,
    LOGIC_OP_AND = 1,
    LOGIC_OP_AND_REVERSE = 2,
    LOGIC_OP_COPY = 3,
    LOGIC_OP_AND_INVERTED = 4,
    LOGIC_OP_NO_OP = 5,
    LOGIC_OP_XOR = 6,
    LOGIC_OP_OR = 7,
    LOGIC_OP_NOR = 8,
    LOGIC_OP_EQUIVALENT = 9,
    LOGIC_OP_INVERT = 10,
    LOGIC_OP_OR_REVERSE = 11,
    LOGIC_OP_COPY_INVERTED = 12,
    LOGIC_OP_OR_INVERTED = 13,
    LOGIC_OP_NAND = 14,
    LOGIC_OP_SET = 15,
    LOGIC_OP_MAX_ENUM = 2147483647,
    _,
};
pub const LogicOp = enum_LogicOp;
pub const BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = @enumToInt(enum_BorderColor.BORDER_COLOR_FLOAT_TRANSPARENT_BLACK);
pub const BORDER_COLOR_INT_TRANSPARENT_BLACK = @enumToInt(enum_BorderColor.BORDER_COLOR_INT_TRANSPARENT_BLACK);
pub const BORDER_COLOR_FLOAT_OPAQUE_BLACK = @enumToInt(enum_BorderColor.BORDER_COLOR_FLOAT_OPAQUE_BLACK);
pub const BORDER_COLOR_INT_OPAQUE_BLACK = @enumToInt(enum_BorderColor.BORDER_COLOR_INT_OPAQUE_BLACK);
pub const BORDER_COLOR_FLOAT_OPAQUE_WHITE = @enumToInt(enum_BorderColor.BORDER_COLOR_FLOAT_OPAQUE_WHITE);
pub const BORDER_COLOR_INT_OPAQUE_WHITE = @enumToInt(enum_BorderColor.BORDER_COLOR_INT_OPAQUE_WHITE);
pub const BORDER_COLOR_FLOAT_CUSTOM_EXT = @enumToInt(enum_BorderColor.BORDER_COLOR_FLOAT_CUSTOM_EXT);
pub const BORDER_COLOR_INT_CUSTOM_EXT = @enumToInt(enum_BorderColor.BORDER_COLOR_INT_CUSTOM_EXT);
pub const BORDER_COLOR_MAX_ENUM = @enumToInt(enum_BorderColor.BORDER_COLOR_MAX_ENUM);
pub const enum_BorderColor = extern enum(c_int) {
    BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
    BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
    BORDER_COLOR_MAX_ENUM = 2147483647,
    _,
};
pub const BorderColor = enum_BorderColor;
pub const FILTER_NEAREST = @enumToInt(enum_Filter.FILTER_NEAREST);
pub const FILTER_LINEAR = @enumToInt(enum_Filter.FILTER_LINEAR);
pub const FILTER_CUBIC_IMG = @enumToInt(enum_Filter.FILTER_CUBIC_IMG);
pub const FILTER_CUBIC_EXT = @enumToInt(enum_Filter.FILTER_CUBIC_EXT);
pub const FILTER_MAX_ENUM = @enumToInt(enum_Filter.FILTER_MAX_ENUM);
pub const enum_Filter = extern enum(c_int) {
    FILTER_NEAREST = 0,
    FILTER_LINEAR = 1,
    FILTER_CUBIC_IMG = 1000015000,
    FILTER_CUBIC_EXT = 1000015000,
    FILTER_MAX_ENUM = 2147483647,
    _,
};
pub const Filter = enum_Filter;
pub const SAMPLER_ADDRESS_MODE_REPEAT = @enumToInt(enum_SamplerAddressMode.SAMPLER_ADDRESS_MODE_REPEAT);
pub const SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = @enumToInt(enum_SamplerAddressMode.SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT);
pub const SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = @enumToInt(enum_SamplerAddressMode.SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE);
pub const SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = @enumToInt(enum_SamplerAddressMode.SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER);
pub const SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = @enumToInt(enum_SamplerAddressMode.SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE);
pub const SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = @enumToInt(enum_SamplerAddressMode.SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR);
pub const SAMPLER_ADDRESS_MODE_MAX_ENUM = @enumToInt(enum_SamplerAddressMode.SAMPLER_ADDRESS_MODE_MAX_ENUM);
pub const enum_SamplerAddressMode = extern enum(c_int) {
    SAMPLER_ADDRESS_MODE_REPEAT = 0,
    SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
    SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4,
    SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647,
    _,
};
pub const SamplerAddressMode = enum_SamplerAddressMode;
pub const SAMPLER_MIPMAP_MODE_NEAREST = @enumToInt(enum_SamplerMipmapMode.SAMPLER_MIPMAP_MODE_NEAREST);
pub const SAMPLER_MIPMAP_MODE_LINEAR = @enumToInt(enum_SamplerMipmapMode.SAMPLER_MIPMAP_MODE_LINEAR);
pub const SAMPLER_MIPMAP_MODE_MAX_ENUM = @enumToInt(enum_SamplerMipmapMode.SAMPLER_MIPMAP_MODE_MAX_ENUM);
pub const enum_SamplerMipmapMode = extern enum(c_int) {
    SAMPLER_MIPMAP_MODE_NEAREST = 0,
    SAMPLER_MIPMAP_MODE_LINEAR = 1,
    SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647,
    _,
};
pub const SamplerMipmapMode = enum_SamplerMipmapMode;
pub const DESCRIPTOR_TYPE_SAMPLER = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_SAMPLER);
pub const DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER);
pub const DESCRIPTOR_TYPE_SAMPLED_IMAGE = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_SAMPLED_IMAGE);
pub const DESCRIPTOR_TYPE_STORAGE_IMAGE = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_STORAGE_IMAGE);
pub const DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER);
pub const DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER);
pub const DESCRIPTOR_TYPE_UNIFORM_BUFFER = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_UNIFORM_BUFFER);
pub const DESCRIPTOR_TYPE_STORAGE_BUFFER = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_STORAGE_BUFFER);
pub const DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC);
pub const DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC);
pub const DESCRIPTOR_TYPE_INPUT_ATTACHMENT = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_INPUT_ATTACHMENT);
pub const DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT);
pub const DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR);
pub const DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV);
pub const DESCRIPTOR_TYPE_MAX_ENUM = @enumToInt(enum_DescriptorType.DESCRIPTOR_TYPE_MAX_ENUM);
pub const enum_DescriptorType = extern enum(c_int) {
    DESCRIPTOR_TYPE_SAMPLER = 0,
    DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
    DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000,
    DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    DESCRIPTOR_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const DescriptorType = enum_DescriptorType;
pub const ATTACHMENT_LOAD_OP_LOAD = @enumToInt(enum_AttachmentLoadOp.ATTACHMENT_LOAD_OP_LOAD);
pub const ATTACHMENT_LOAD_OP_CLEAR = @enumToInt(enum_AttachmentLoadOp.ATTACHMENT_LOAD_OP_CLEAR);
pub const ATTACHMENT_LOAD_OP_DONT_CARE = @enumToInt(enum_AttachmentLoadOp.ATTACHMENT_LOAD_OP_DONT_CARE);
pub const ATTACHMENT_LOAD_OP_MAX_ENUM = @enumToInt(enum_AttachmentLoadOp.ATTACHMENT_LOAD_OP_MAX_ENUM);
pub const enum_AttachmentLoadOp = extern enum(c_int) {
    ATTACHMENT_LOAD_OP_LOAD = 0,
    ATTACHMENT_LOAD_OP_CLEAR = 1,
    ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647,
    _,
};
pub const AttachmentLoadOp = enum_AttachmentLoadOp;
pub const ATTACHMENT_STORE_OP_STORE = @enumToInt(enum_AttachmentStoreOp.ATTACHMENT_STORE_OP_STORE);
pub const ATTACHMENT_STORE_OP_DONT_CARE = @enumToInt(enum_AttachmentStoreOp.ATTACHMENT_STORE_OP_DONT_CARE);
pub const ATTACHMENT_STORE_OP_NONE_QCOM = @enumToInt(enum_AttachmentStoreOp.ATTACHMENT_STORE_OP_NONE_QCOM);
pub const ATTACHMENT_STORE_OP_MAX_ENUM = @enumToInt(enum_AttachmentStoreOp.ATTACHMENT_STORE_OP_MAX_ENUM);
pub const enum_AttachmentStoreOp = extern enum(c_int) {
    ATTACHMENT_STORE_OP_STORE = 0,
    ATTACHMENT_STORE_OP_DONT_CARE = 1,
    ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000,
    ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647,
    _,
};
pub const AttachmentStoreOp = enum_AttachmentStoreOp;
pub const PIPELINE_BIND_POINT_GRAPHICS = @enumToInt(enum_PipelineBindPoint.PIPELINE_BIND_POINT_GRAPHICS);
pub const PIPELINE_BIND_POINT_COMPUTE = @enumToInt(enum_PipelineBindPoint.PIPELINE_BIND_POINT_COMPUTE);
pub const PIPELINE_BIND_POINT_RAY_TRACING_KHR = @enumToInt(enum_PipelineBindPoint.PIPELINE_BIND_POINT_RAY_TRACING_KHR);
pub const PIPELINE_BIND_POINT_RAY_TRACING_NV = @enumToInt(enum_PipelineBindPoint.PIPELINE_BIND_POINT_RAY_TRACING_NV);
pub const PIPELINE_BIND_POINT_MAX_ENUM = @enumToInt(enum_PipelineBindPoint.PIPELINE_BIND_POINT_MAX_ENUM);
pub const enum_PipelineBindPoint = extern enum(c_int) {
    PIPELINE_BIND_POINT_GRAPHICS = 0,
    PIPELINE_BIND_POINT_COMPUTE = 1,
    PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
    PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000,
    PIPELINE_BIND_POINT_MAX_ENUM = 2147483647,
    _,
};
pub const PipelineBindPoint = enum_PipelineBindPoint;
pub const COMMAND_BUFFER_LEVEL_PRIMARY = @enumToInt(enum_CommandBufferLevel.COMMAND_BUFFER_LEVEL_PRIMARY);
pub const COMMAND_BUFFER_LEVEL_SECONDARY = @enumToInt(enum_CommandBufferLevel.COMMAND_BUFFER_LEVEL_SECONDARY);
pub const COMMAND_BUFFER_LEVEL_MAX_ENUM = @enumToInt(enum_CommandBufferLevel.COMMAND_BUFFER_LEVEL_MAX_ENUM);
pub const enum_CommandBufferLevel = extern enum(c_int) {
    COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647,
    _,
};
pub const CommandBufferLevel = enum_CommandBufferLevel;
pub const INDEX_TYPE_UINT16 = @enumToInt(enum_IndexType.INDEX_TYPE_UINT16);
pub const INDEX_TYPE_UINT32 = @enumToInt(enum_IndexType.INDEX_TYPE_UINT32);
pub const INDEX_TYPE_NONE_KHR = @enumToInt(enum_IndexType.INDEX_TYPE_NONE_KHR);
pub const INDEX_TYPE_UINT8_EXT = @enumToInt(enum_IndexType.INDEX_TYPE_UINT8_EXT);
pub const INDEX_TYPE_NONE_NV = @enumToInt(enum_IndexType.INDEX_TYPE_NONE_NV);
pub const INDEX_TYPE_MAX_ENUM = @enumToInt(enum_IndexType.INDEX_TYPE_MAX_ENUM);
pub const enum_IndexType = extern enum(c_int) {
    INDEX_TYPE_UINT16 = 0,
    INDEX_TYPE_UINT32 = 1,
    INDEX_TYPE_NONE_KHR = 1000165000,
    INDEX_TYPE_UINT8_EXT = 1000265000,
    INDEX_TYPE_NONE_NV = 1000165000,
    INDEX_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const IndexType = enum_IndexType;
pub const SUBPASS_CONTENTS_INLINE = @enumToInt(enum_SubpassContents.SUBPASS_CONTENTS_INLINE);
pub const SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = @enumToInt(enum_SubpassContents.SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS);
pub const SUBPASS_CONTENTS_MAX_ENUM = @enumToInt(enum_SubpassContents.SUBPASS_CONTENTS_MAX_ENUM);
pub const enum_SubpassContents = extern enum(c_int) {
    SUBPASS_CONTENTS_INLINE = 0,
    SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    SUBPASS_CONTENTS_MAX_ENUM = 2147483647,
    _,
};
pub const SubpassContents = enum_SubpassContents;
pub const ACCESS_INDIRECT_COMMAND_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_INDIRECT_COMMAND_READ_BIT);
pub const ACCESS_INDEX_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_INDEX_READ_BIT);
pub const ACCESS_VERTEX_ATTRIBUTE_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_VERTEX_ATTRIBUTE_READ_BIT);
pub const ACCESS_UNIFORM_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_UNIFORM_READ_BIT);
pub const ACCESS_INPUT_ATTACHMENT_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_INPUT_ATTACHMENT_READ_BIT);
pub const ACCESS_SHADER_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_SHADER_READ_BIT);
pub const ACCESS_SHADER_WRITE_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_SHADER_WRITE_BIT);
pub const ACCESS_COLOR_ATTACHMENT_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_COLOR_ATTACHMENT_READ_BIT);
pub const ACCESS_COLOR_ATTACHMENT_WRITE_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_COLOR_ATTACHMENT_WRITE_BIT);
pub const ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT);
pub const ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT);
pub const ACCESS_TRANSFER_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_TRANSFER_READ_BIT);
pub const ACCESS_TRANSFER_WRITE_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_TRANSFER_WRITE_BIT);
pub const ACCESS_HOST_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_HOST_READ_BIT);
pub const ACCESS_HOST_WRITE_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_HOST_WRITE_BIT);
pub const ACCESS_MEMORY_READ_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_MEMORY_READ_BIT);
pub const ACCESS_MEMORY_WRITE_BIT = @enumToInt(enum_AccessFlagBits.ACCESS_MEMORY_WRITE_BIT);
pub const ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = @enumToInt(enum_AccessFlagBits.ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT);
pub const ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = @enumToInt(enum_AccessFlagBits.ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT);
pub const ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = @enumToInt(enum_AccessFlagBits.ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT);
pub const ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = @enumToInt(enum_AccessFlagBits.ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT);
pub const ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = @enumToInt(enum_AccessFlagBits.ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT);
pub const ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = @enumToInt(enum_AccessFlagBits.ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR);
pub const ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = @enumToInt(enum_AccessFlagBits.ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR);
pub const ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = @enumToInt(enum_AccessFlagBits.ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV);
pub const ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = @enumToInt(enum_AccessFlagBits.ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT);
pub const ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = @enumToInt(enum_AccessFlagBits.ACCESS_COMMAND_PREPROCESS_READ_BIT_NV);
pub const ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = @enumToInt(enum_AccessFlagBits.ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV);
pub const ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = @enumToInt(enum_AccessFlagBits.ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV);
pub const ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = @enumToInt(enum_AccessFlagBits.ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV);
pub const ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = @enumToInt(enum_AccessFlagBits.ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR);
pub const ACCESS_FLAG_BITS_MAX_ENUM = @enumToInt(enum_AccessFlagBits.ACCESS_FLAG_BITS_MAX_ENUM);
pub const enum_AccessFlagBits = extern enum(c_int) {
    ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
    ACCESS_INDEX_READ_BIT = 2,
    ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
    ACCESS_UNIFORM_READ_BIT = 8,
    ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
    ACCESS_SHADER_READ_BIT = 32,
    ACCESS_SHADER_WRITE_BIT = 64,
    ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
    ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
    ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
    ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
    ACCESS_TRANSFER_READ_BIT = 2048,
    ACCESS_TRANSFER_WRITE_BIT = 4096,
    ACCESS_HOST_READ_BIT = 8192,
    ACCESS_HOST_WRITE_BIT = 16384,
    ACCESS_MEMORY_READ_BIT = 32768,
    ACCESS_MEMORY_WRITE_BIT = 65536,
    ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432,
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864,
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728,
    ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576,
    ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
    ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152,
    ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304,
    ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608,
    ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216,
    ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072,
    ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144,
    ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152,
    ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304,
    ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608,
    ACCESS_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const AccessFlagBits = enum_AccessFlagBits;
pub const AccessFlags = Flags;
pub const IMAGE_ASPECT_COLOR_BIT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_COLOR_BIT);
pub const IMAGE_ASPECT_DEPTH_BIT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_DEPTH_BIT);
pub const IMAGE_ASPECT_STENCIL_BIT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_STENCIL_BIT);
pub const IMAGE_ASPECT_METADATA_BIT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_METADATA_BIT);
pub const IMAGE_ASPECT_PLANE_0_BIT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_PLANE_0_BIT);
pub const IMAGE_ASPECT_PLANE_1_BIT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_PLANE_1_BIT);
pub const IMAGE_ASPECT_PLANE_2_BIT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_PLANE_2_BIT);
pub const IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT);
pub const IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT);
pub const IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT);
pub const IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT);
pub const IMAGE_ASPECT_PLANE_0_BIT_KHR = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_PLANE_0_BIT_KHR);
pub const IMAGE_ASPECT_PLANE_1_BIT_KHR = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_PLANE_1_BIT_KHR);
pub const IMAGE_ASPECT_PLANE_2_BIT_KHR = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_PLANE_2_BIT_KHR);
pub const IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ImageAspectFlagBits.IMAGE_ASPECT_FLAG_BITS_MAX_ENUM);
pub const enum_ImageAspectFlagBits = extern enum(c_int) {
    IMAGE_ASPECT_COLOR_BIT = 1,
    IMAGE_ASPECT_DEPTH_BIT = 2,
    IMAGE_ASPECT_STENCIL_BIT = 4,
    IMAGE_ASPECT_METADATA_BIT = 8,
    IMAGE_ASPECT_PLANE_0_BIT = 16,
    IMAGE_ASPECT_PLANE_1_BIT = 32,
    IMAGE_ASPECT_PLANE_2_BIT = 64,
    IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128,
    IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256,
    IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512,
    IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024,
    IMAGE_ASPECT_PLANE_0_BIT_KHR = 16,
    IMAGE_ASPECT_PLANE_1_BIT_KHR = 32,
    IMAGE_ASPECT_PLANE_2_BIT_KHR = 64,
    IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ImageAspectFlagBits = enum_ImageAspectFlagBits;
pub const ImageAspectFlags = Flags;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_BIT);
pub const FORMAT_FEATURE_STORAGE_IMAGE_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_STORAGE_IMAGE_BIT);
pub const FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT);
pub const FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT);
pub const FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT);
pub const FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT);
pub const FORMAT_FEATURE_VERTEX_BUFFER_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_VERTEX_BUFFER_BIT);
pub const FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_COLOR_ATTACHMENT_BIT);
pub const FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT);
pub const FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT);
pub const FORMAT_FEATURE_BLIT_SRC_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_BLIT_SRC_BIT);
pub const FORMAT_FEATURE_BLIT_DST_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_BLIT_DST_BIT);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT);
pub const FORMAT_FEATURE_TRANSFER_SRC_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_TRANSFER_SRC_BIT);
pub const FORMAT_FEATURE_TRANSFER_DST_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_TRANSFER_DST_BIT);
pub const FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT);
pub const FORMAT_FEATURE_DISJOINT_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_DISJOINT_BIT);
pub const FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG);
pub const FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR);
pub const FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT);
pub const FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR);
pub const FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR);
pub const FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_TRANSFER_DST_BIT_KHR);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT);
pub const FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR);
pub const FORMAT_FEATURE_DISJOINT_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_DISJOINT_BIT_KHR);
pub const FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR);
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT);
pub const FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_FormatFeatureFlagBits.FORMAT_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_FormatFeatureFlagBits = extern enum(c_int) {
    FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
    FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
    FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
    FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
    FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
    FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
    FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
    FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
    FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
    FORMAT_FEATURE_BLIT_DST_BIT = 2048,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
    FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
    FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
    FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
    FORMAT_FEATURE_DISJOINT_BIT = 4194304,
    FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192,
    FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912,
    FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216,
    FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824,
    FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384,
    FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536,
    FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152,
    FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304,
    FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192,
    FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const FormatFeatureFlagBits = enum_FormatFeatureFlagBits;
pub const FormatFeatureFlags = Flags;
pub const IMAGE_CREATE_SPARSE_BINDING_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_SPARSE_BINDING_BIT);
pub const IMAGE_CREATE_SPARSE_RESIDENCY_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_SPARSE_RESIDENCY_BIT);
pub const IMAGE_CREATE_SPARSE_ALIASED_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_SPARSE_ALIASED_BIT);
pub const IMAGE_CREATE_MUTABLE_FORMAT_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_MUTABLE_FORMAT_BIT);
pub const IMAGE_CREATE_CUBE_COMPATIBLE_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_CUBE_COMPATIBLE_BIT);
pub const IMAGE_CREATE_ALIAS_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_ALIAS_BIT);
pub const IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT);
pub const IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT);
pub const IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT);
pub const IMAGE_CREATE_EXTENDED_USAGE_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_EXTENDED_USAGE_BIT);
pub const IMAGE_CREATE_PROTECTED_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_PROTECTED_BIT);
pub const IMAGE_CREATE_DISJOINT_BIT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_DISJOINT_BIT);
pub const IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_CORNER_SAMPLED_BIT_NV);
pub const IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT);
pub const IMAGE_CREATE_SUBSAMPLED_BIT_EXT = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_SUBSAMPLED_BIT_EXT);
pub const IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR);
pub const IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR);
pub const IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR);
pub const IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR);
pub const IMAGE_CREATE_DISJOINT_BIT_KHR = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_DISJOINT_BIT_KHR);
pub const IMAGE_CREATE_ALIAS_BIT_KHR = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_ALIAS_BIT_KHR);
pub const IMAGE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ImageCreateFlagBits.IMAGE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_ImageCreateFlagBits = extern enum(c_int) {
    IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
    IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
    IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
    IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
    IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
    IMAGE_CREATE_ALIAS_BIT = 1024,
    IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
    IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
    IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
    IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
    IMAGE_CREATE_PROTECTED_BIT = 2048,
    IMAGE_CREATE_DISJOINT_BIT = 512,
    IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192,
    IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
    IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384,
    IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64,
    IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32,
    IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128,
    IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256,
    IMAGE_CREATE_DISJOINT_BIT_KHR = 512,
    IMAGE_CREATE_ALIAS_BIT_KHR = 1024,
    IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ImageCreateFlagBits = enum_ImageCreateFlagBits;
pub const ImageCreateFlags = Flags;
pub const SAMPLE_COUNT_1_BIT = @enumToInt(enum_SampleCountFlagBits.SAMPLE_COUNT_1_BIT);
pub const SAMPLE_COUNT_2_BIT = @enumToInt(enum_SampleCountFlagBits.SAMPLE_COUNT_2_BIT);
pub const SAMPLE_COUNT_4_BIT = @enumToInt(enum_SampleCountFlagBits.SAMPLE_COUNT_4_BIT);
pub const SAMPLE_COUNT_8_BIT = @enumToInt(enum_SampleCountFlagBits.SAMPLE_COUNT_8_BIT);
pub const SAMPLE_COUNT_16_BIT = @enumToInt(enum_SampleCountFlagBits.SAMPLE_COUNT_16_BIT);
pub const SAMPLE_COUNT_32_BIT = @enumToInt(enum_SampleCountFlagBits.SAMPLE_COUNT_32_BIT);
pub const SAMPLE_COUNT_64_BIT = @enumToInt(enum_SampleCountFlagBits.SAMPLE_COUNT_64_BIT);
pub const SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_SampleCountFlagBits.SAMPLE_COUNT_FLAG_BITS_MAX_ENUM);
pub const enum_SampleCountFlagBits = extern enum(c_int) {
    SAMPLE_COUNT_1_BIT = 1,
    SAMPLE_COUNT_2_BIT = 2,
    SAMPLE_COUNT_4_BIT = 4,
    SAMPLE_COUNT_8_BIT = 8,
    SAMPLE_COUNT_16_BIT = 16,
    SAMPLE_COUNT_32_BIT = 32,
    SAMPLE_COUNT_64_BIT = 64,
    SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const SampleCountFlagBits = enum_SampleCountFlagBits;
pub const SampleCountFlags = Flags;
pub const IMAGE_USAGE_TRANSFER_SRC_BIT = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_TRANSFER_SRC_BIT);
pub const IMAGE_USAGE_TRANSFER_DST_BIT = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_TRANSFER_DST_BIT);
pub const IMAGE_USAGE_SAMPLED_BIT = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_SAMPLED_BIT);
pub const IMAGE_USAGE_STORAGE_BIT = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_STORAGE_BIT);
pub const IMAGE_USAGE_COLOR_ATTACHMENT_BIT = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_COLOR_ATTACHMENT_BIT);
pub const IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT);
pub const IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT);
pub const IMAGE_USAGE_INPUT_ATTACHMENT_BIT = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_INPUT_ATTACHMENT_BIT);
pub const IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV);
pub const IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT);
pub const IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR);
pub const IMAGE_USAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ImageUsageFlagBits.IMAGE_USAGE_FLAG_BITS_MAX_ENUM);
pub const enum_ImageUsageFlagBits = extern enum(c_int) {
    IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
    IMAGE_USAGE_TRANSFER_DST_BIT = 2,
    IMAGE_USAGE_SAMPLED_BIT = 4,
    IMAGE_USAGE_STORAGE_BIT = 8,
    IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
    IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
    IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
    IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
    IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256,
    IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512,
    IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256,
    IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ImageUsageFlagBits = enum_ImageUsageFlagBits;
pub const ImageUsageFlags = Flags;
pub const InstanceCreateFlags = Flags;
pub const MEMORY_HEAP_DEVICE_LOCAL_BIT = @enumToInt(enum_MemoryHeapFlagBits.MEMORY_HEAP_DEVICE_LOCAL_BIT);
pub const MEMORY_HEAP_MULTI_INSTANCE_BIT = @enumToInt(enum_MemoryHeapFlagBits.MEMORY_HEAP_MULTI_INSTANCE_BIT);
pub const MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = @enumToInt(enum_MemoryHeapFlagBits.MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR);
pub const MEMORY_HEAP_FLAG_BITS_MAX_ENUM = @enumToInt(enum_MemoryHeapFlagBits.MEMORY_HEAP_FLAG_BITS_MAX_ENUM);
pub const enum_MemoryHeapFlagBits = extern enum(c_int) {
    MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
    MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
    MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2,
    MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const MemoryHeapFlagBits = enum_MemoryHeapFlagBits;
pub const MemoryHeapFlags = Flags;
pub const MEMORY_PROPERTY_DEVICE_LOCAL_BIT = @enumToInt(enum_MemoryPropertyFlagBits.MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
pub const MEMORY_PROPERTY_HOST_VISIBLE_BIT = @enumToInt(enum_MemoryPropertyFlagBits.MEMORY_PROPERTY_HOST_VISIBLE_BIT);
pub const MEMORY_PROPERTY_HOST_COHERENT_BIT = @enumToInt(enum_MemoryPropertyFlagBits.MEMORY_PROPERTY_HOST_COHERENT_BIT);
pub const MEMORY_PROPERTY_HOST_CACHED_BIT = @enumToInt(enum_MemoryPropertyFlagBits.MEMORY_PROPERTY_HOST_CACHED_BIT);
pub const MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = @enumToInt(enum_MemoryPropertyFlagBits.MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT);
pub const MEMORY_PROPERTY_PROTECTED_BIT = @enumToInt(enum_MemoryPropertyFlagBits.MEMORY_PROPERTY_PROTECTED_BIT);
pub const MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = @enumToInt(enum_MemoryPropertyFlagBits.MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD);
pub const MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = @enumToInt(enum_MemoryPropertyFlagBits.MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD);
pub const MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = @enumToInt(enum_MemoryPropertyFlagBits.MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM);
pub const enum_MemoryPropertyFlagBits = extern enum(c_int) {
    MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
    MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
    MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
    MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
    MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
    MEMORY_PROPERTY_PROTECTED_BIT = 32,
    MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64,
    MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128,
    MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const MemoryPropertyFlagBits = enum_MemoryPropertyFlagBits;
pub const MemoryPropertyFlags = Flags;
pub const QUEUE_GRAPHICS_BIT = @enumToInt(enum_QueueFlagBits.QUEUE_GRAPHICS_BIT);
pub const QUEUE_COMPUTE_BIT = @enumToInt(enum_QueueFlagBits.QUEUE_COMPUTE_BIT);
pub const QUEUE_TRANSFER_BIT = @enumToInt(enum_QueueFlagBits.QUEUE_TRANSFER_BIT);
pub const QUEUE_SPARSE_BINDING_BIT = @enumToInt(enum_QueueFlagBits.QUEUE_SPARSE_BINDING_BIT);
pub const QUEUE_PROTECTED_BIT = @enumToInt(enum_QueueFlagBits.QUEUE_PROTECTED_BIT);
pub const QUEUE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_QueueFlagBits.QUEUE_FLAG_BITS_MAX_ENUM);
pub const enum_QueueFlagBits = extern enum(c_int) {
    QUEUE_GRAPHICS_BIT = 1,
    QUEUE_COMPUTE_BIT = 2,
    QUEUE_TRANSFER_BIT = 4,
    QUEUE_SPARSE_BINDING_BIT = 8,
    QUEUE_PROTECTED_BIT = 16,
    QUEUE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const QueueFlagBits = enum_QueueFlagBits;
pub const QueueFlags = Flags;
pub const DeviceCreateFlags = Flags;
pub const DEVICE_QUEUE_CREATE_PROTECTED_BIT = @enumToInt(enum_DeviceQueueCreateFlagBits.DEVICE_QUEUE_CREATE_PROTECTED_BIT);
pub const DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_DeviceQueueCreateFlagBits.DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_DeviceQueueCreateFlagBits = extern enum(c_int) {
    DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
    DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const DeviceQueueCreateFlagBits = enum_DeviceQueueCreateFlagBits;
pub const DeviceQueueCreateFlags = Flags;
pub const PIPELINE_STAGE_TOP_OF_PIPE_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_TOP_OF_PIPE_BIT);
pub const PIPELINE_STAGE_DRAW_INDIRECT_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_DRAW_INDIRECT_BIT);
pub const PIPELINE_STAGE_VERTEX_INPUT_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_VERTEX_INPUT_BIT);
pub const PIPELINE_STAGE_VERTEX_SHADER_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_VERTEX_SHADER_BIT);
pub const PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT);
pub const PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT);
pub const PIPELINE_STAGE_GEOMETRY_SHADER_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_GEOMETRY_SHADER_BIT);
pub const PIPELINE_STAGE_FRAGMENT_SHADER_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_FRAGMENT_SHADER_BIT);
pub const PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT);
pub const PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT);
pub const PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT);
pub const PIPELINE_STAGE_COMPUTE_SHADER_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_COMPUTE_SHADER_BIT);
pub const PIPELINE_STAGE_TRANSFER_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_TRANSFER_BIT);
pub const PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT);
pub const PIPELINE_STAGE_HOST_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_HOST_BIT);
pub const PIPELINE_STAGE_ALL_GRAPHICS_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_ALL_GRAPHICS_BIT);
pub const PIPELINE_STAGE_ALL_COMMANDS_BIT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_ALL_COMMANDS_BIT);
pub const PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT);
pub const PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT);
pub const PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR);
pub const PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR);
pub const PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV);
pub const PIPELINE_STAGE_TASK_SHADER_BIT_NV = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_TASK_SHADER_BIT_NV);
pub const PIPELINE_STAGE_MESH_SHADER_BIT_NV = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_MESH_SHADER_BIT_NV);
pub const PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT);
pub const PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV);
pub const PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV);
pub const PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV);
pub const PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR);
pub const PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_PipelineStageFlagBits.PIPELINE_STAGE_FLAG_BITS_MAX_ENUM);
pub const enum_PipelineStageFlagBits = extern enum(c_int) {
    PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
    PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
    PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
    PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
    PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
    PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
    PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
    PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
    PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
    PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
    PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
    PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
    PIPELINE_STAGE_TRANSFER_BIT = 4096,
    PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
    PIPELINE_STAGE_HOST_BIT = 16384,
    PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
    PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
    PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216,
    PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144,
    PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152,
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432,
    PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304,
    PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288,
    PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576,
    PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608,
    PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072,
    PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152,
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432,
    PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304,
    PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const PipelineStageFlagBits = enum_PipelineStageFlagBits;
pub const PipelineStageFlags = Flags;
pub const MemoryMapFlags = Flags;
pub const SPARSE_MEMORY_BIND_METADATA_BIT = @enumToInt(enum_SparseMemoryBindFlagBits.SPARSE_MEMORY_BIND_METADATA_BIT);
pub const SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = @enumToInt(enum_SparseMemoryBindFlagBits.SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM);
pub const enum_SparseMemoryBindFlagBits = extern enum(c_int) {
    SPARSE_MEMORY_BIND_METADATA_BIT = 1,
    SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const SparseMemoryBindFlagBits = enum_SparseMemoryBindFlagBits;
pub const SparseMemoryBindFlags = Flags;
pub const SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = @enumToInt(enum_SparseImageFormatFlagBits.SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT);
pub const SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = @enumToInt(enum_SparseImageFormatFlagBits.SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT);
pub const SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = @enumToInt(enum_SparseImageFormatFlagBits.SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT);
pub const SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_SparseImageFormatFlagBits.SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM);
pub const enum_SparseImageFormatFlagBits = extern enum(c_int) {
    SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
    SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
    SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
    SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const SparseImageFormatFlagBits = enum_SparseImageFormatFlagBits;
pub const SparseImageFormatFlags = Flags;
pub const FENCE_CREATE_SIGNALED_BIT = @enumToInt(enum_FenceCreateFlagBits.FENCE_CREATE_SIGNALED_BIT);
pub const FENCE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_FenceCreateFlagBits.FENCE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_FenceCreateFlagBits = extern enum(c_int) {
    FENCE_CREATE_SIGNALED_BIT = 1,
    FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const FenceCreateFlagBits = enum_FenceCreateFlagBits;
pub const FenceCreateFlags = Flags;
pub const SemaphoreCreateFlags = Flags;
pub const EventCreateFlags = Flags;
pub const QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT);
pub const QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT);
pub const QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT);
pub const QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT);
pub const QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT);
pub const QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT);
pub const QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT);
pub const QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT);
pub const QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT);
pub const QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT);
pub const QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT);
pub const QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = @enumToInt(enum_QueryPipelineStatisticFlagBits.QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM);
pub const enum_QueryPipelineStatisticFlagBits = extern enum(c_int) {
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
    QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
    QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
    QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
    QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
    QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
    QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
    QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
    QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const QueryPipelineStatisticFlagBits = enum_QueryPipelineStatisticFlagBits;
pub const QueryPipelineStatisticFlags = Flags;
pub const QueryPoolCreateFlags = Flags;
pub const QUERY_RESULT_64_BIT = @enumToInt(enum_QueryResultFlagBits.QUERY_RESULT_64_BIT);
pub const QUERY_RESULT_WAIT_BIT = @enumToInt(enum_QueryResultFlagBits.QUERY_RESULT_WAIT_BIT);
pub const QUERY_RESULT_WITH_AVAILABILITY_BIT = @enumToInt(enum_QueryResultFlagBits.QUERY_RESULT_WITH_AVAILABILITY_BIT);
pub const QUERY_RESULT_PARTIAL_BIT = @enumToInt(enum_QueryResultFlagBits.QUERY_RESULT_PARTIAL_BIT);
pub const QUERY_RESULT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_QueryResultFlagBits.QUERY_RESULT_FLAG_BITS_MAX_ENUM);
pub const enum_QueryResultFlagBits = extern enum(c_int) {
    QUERY_RESULT_64_BIT = 1,
    QUERY_RESULT_WAIT_BIT = 2,
    QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
    QUERY_RESULT_PARTIAL_BIT = 8,
    QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const QueryResultFlagBits = enum_QueryResultFlagBits;
pub const QueryResultFlags = Flags;
pub const BUFFER_CREATE_SPARSE_BINDING_BIT = @enumToInt(enum_BufferCreateFlagBits.BUFFER_CREATE_SPARSE_BINDING_BIT);
pub const BUFFER_CREATE_SPARSE_RESIDENCY_BIT = @enumToInt(enum_BufferCreateFlagBits.BUFFER_CREATE_SPARSE_RESIDENCY_BIT);
pub const BUFFER_CREATE_SPARSE_ALIASED_BIT = @enumToInt(enum_BufferCreateFlagBits.BUFFER_CREATE_SPARSE_ALIASED_BIT);
pub const BUFFER_CREATE_PROTECTED_BIT = @enumToInt(enum_BufferCreateFlagBits.BUFFER_CREATE_PROTECTED_BIT);
pub const BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = @enumToInt(enum_BufferCreateFlagBits.BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT);
pub const BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = @enumToInt(enum_BufferCreateFlagBits.BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT);
pub const BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = @enumToInt(enum_BufferCreateFlagBits.BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR);
pub const BUFFER_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_BufferCreateFlagBits.BUFFER_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_BufferCreateFlagBits = extern enum(c_int) {
    BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
    BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
    BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
    BUFFER_CREATE_PROTECTED_BIT = 8,
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16,
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16,
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16,
    BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const BufferCreateFlagBits = enum_BufferCreateFlagBits;
pub const BufferCreateFlags = Flags;
pub const BUFFER_USAGE_TRANSFER_SRC_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_TRANSFER_SRC_BIT);
pub const BUFFER_USAGE_TRANSFER_DST_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_TRANSFER_DST_BIT);
pub const BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT);
pub const BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT);
pub const BUFFER_USAGE_UNIFORM_BUFFER_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_UNIFORM_BUFFER_BIT);
pub const BUFFER_USAGE_STORAGE_BUFFER_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_STORAGE_BUFFER_BIT);
pub const BUFFER_USAGE_INDEX_BUFFER_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_INDEX_BUFFER_BIT);
pub const BUFFER_USAGE_VERTEX_BUFFER_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_VERTEX_BUFFER_BIT);
pub const BUFFER_USAGE_INDIRECT_BUFFER_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_INDIRECT_BUFFER_BIT);
pub const BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT);
pub const BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT);
pub const BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT);
pub const BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT);
pub const BUFFER_USAGE_RAY_TRACING_BIT_KHR = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_RAY_TRACING_BIT_KHR);
pub const BUFFER_USAGE_RAY_TRACING_BIT_NV = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_RAY_TRACING_BIT_NV);
pub const BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT);
pub const BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR);
pub const BUFFER_USAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_BufferUsageFlagBits.BUFFER_USAGE_FLAG_BITS_MAX_ENUM);
pub const enum_BufferUsageFlagBits = extern enum(c_int) {
    BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
    BUFFER_USAGE_TRANSFER_DST_BIT = 2,
    BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
    BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
    BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
    BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
    BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
    BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
    BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072,
    BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048,
    BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096,
    BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512,
    BUFFER_USAGE_RAY_TRACING_BIT_KHR = 1024,
    BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024,
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072,
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072,
    BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const BufferUsageFlagBits = enum_BufferUsageFlagBits;
pub const BufferUsageFlags = Flags;
pub const BufferViewCreateFlags = Flags;
pub const IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = @enumToInt(enum_ImageViewCreateFlagBits.IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT);
pub const IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = @enumToInt(enum_ImageViewCreateFlagBits.IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT);
pub const IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ImageViewCreateFlagBits.IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_ImageViewCreateFlagBits = extern enum(c_int) {
    IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1,
    IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2,
    IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ImageViewCreateFlagBits = enum_ImageViewCreateFlagBits;
pub const ImageViewCreateFlags = Flags;
pub const SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ShaderModuleCreateFlagBits.SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_ShaderModuleCreateFlagBits = extern enum(c_int) {
    SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ShaderModuleCreateFlagBits = enum_ShaderModuleCreateFlagBits;
pub const ShaderModuleCreateFlags = Flags;
pub const PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = @enumToInt(enum_PipelineCacheCreateFlagBits.PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT);
pub const PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_PipelineCacheCreateFlagBits.PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_PipelineCacheCreateFlagBits = extern enum(c_int) {
    PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1,
    PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const PipelineCacheCreateFlagBits = enum_PipelineCacheCreateFlagBits;
pub const PipelineCacheCreateFlags = Flags;
pub const COLOR_COMPONENT_R_BIT = @enumToInt(enum_ColorComponentFlagBits.COLOR_COMPONENT_R_BIT);
pub const COLOR_COMPONENT_G_BIT = @enumToInt(enum_ColorComponentFlagBits.COLOR_COMPONENT_G_BIT);
pub const COLOR_COMPONENT_B_BIT = @enumToInt(enum_ColorComponentFlagBits.COLOR_COMPONENT_B_BIT);
pub const COLOR_COMPONENT_A_BIT = @enumToInt(enum_ColorComponentFlagBits.COLOR_COMPONENT_A_BIT);
pub const COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ColorComponentFlagBits.COLOR_COMPONENT_FLAG_BITS_MAX_ENUM);
pub const enum_ColorComponentFlagBits = extern enum(c_int) {
    COLOR_COMPONENT_R_BIT = 1,
    COLOR_COMPONENT_G_BIT = 2,
    COLOR_COMPONENT_B_BIT = 4,
    COLOR_COMPONENT_A_BIT = 8,
    COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ColorComponentFlagBits = enum_ColorComponentFlagBits;
pub const ColorComponentFlags = Flags;
pub const PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT);
pub const PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT);
pub const PIPELINE_CREATE_DERIVATIVE_BIT = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_DERIVATIVE_BIT);
pub const PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT);
pub const PIPELINE_CREATE_DISPATCH_BASE_BIT = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_DISPATCH_BASE_BIT);
pub const PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR);
pub const PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR);
pub const PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR);
pub const PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR);
pub const PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR);
pub const PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR);
pub const PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_DEFER_COMPILE_BIT_NV);
pub const PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR);
pub const PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR);
pub const PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV);
pub const PIPELINE_CREATE_LIBRARY_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_LIBRARY_BIT_KHR);
pub const PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT);
pub const PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT);
pub const PIPELINE_CREATE_DISPATCH_BASE = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_DISPATCH_BASE);
pub const PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR);
pub const PIPELINE_CREATE_DISPATCH_BASE_KHR = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_DISPATCH_BASE_KHR);
pub const PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_PipelineCreateFlagBits.PIPELINE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_PipelineCreateFlagBits = extern enum(c_int) {
    PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
    PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
    PIPELINE_CREATE_DERIVATIVE_BIT = 4,
    PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
    PIPELINE_CREATE_DISPATCH_BASE_BIT = 16,
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384,
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768,
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536,
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072,
    PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096,
    PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192,
    PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32,
    PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64,
    PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128,
    PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144,
    PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048,
    PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256,
    PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512,
    PIPELINE_CREATE_DISPATCH_BASE = 16,
    PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8,
    PIPELINE_CREATE_DISPATCH_BASE_KHR = 16,
    PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const PipelineCreateFlagBits = enum_PipelineCreateFlagBits;
pub const PipelineCreateFlags = Flags;
pub const PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = @enumToInt(enum_PipelineShaderStageCreateFlagBits.PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT);
pub const PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = @enumToInt(enum_PipelineShaderStageCreateFlagBits.PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT);
pub const PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_PipelineShaderStageCreateFlagBits.PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_PipelineShaderStageCreateFlagBits = extern enum(c_int) {
    PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1,
    PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2,
    PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const PipelineShaderStageCreateFlagBits = enum_PipelineShaderStageCreateFlagBits;
pub const PipelineShaderStageCreateFlags = Flags;
pub const SHADER_STAGE_VERTEX_BIT = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_VERTEX_BIT);
pub const SHADER_STAGE_TESSELLATION_CONTROL_BIT = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_TESSELLATION_CONTROL_BIT);
pub const SHADER_STAGE_TESSELLATION_EVALUATION_BIT = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_TESSELLATION_EVALUATION_BIT);
pub const SHADER_STAGE_GEOMETRY_BIT = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_GEOMETRY_BIT);
pub const SHADER_STAGE_FRAGMENT_BIT = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_FRAGMENT_BIT);
pub const SHADER_STAGE_COMPUTE_BIT = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_COMPUTE_BIT);
pub const SHADER_STAGE_ALL_GRAPHICS = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_ALL_GRAPHICS);
pub const SHADER_STAGE_ALL = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_ALL);
pub const SHADER_STAGE_RAYGEN_BIT_KHR = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_RAYGEN_BIT_KHR);
pub const SHADER_STAGE_ANY_HIT_BIT_KHR = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_ANY_HIT_BIT_KHR);
pub const SHADER_STAGE_CLOSEST_HIT_BIT_KHR = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_CLOSEST_HIT_BIT_KHR);
pub const SHADER_STAGE_MISS_BIT_KHR = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_MISS_BIT_KHR);
pub const SHADER_STAGE_INTERSECTION_BIT_KHR = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_INTERSECTION_BIT_KHR);
pub const SHADER_STAGE_CALLABLE_BIT_KHR = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_CALLABLE_BIT_KHR);
pub const SHADER_STAGE_TASK_BIT_NV = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_TASK_BIT_NV);
pub const SHADER_STAGE_MESH_BIT_NV = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_MESH_BIT_NV);
pub const SHADER_STAGE_RAYGEN_BIT_NV = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_RAYGEN_BIT_NV);
pub const SHADER_STAGE_ANY_HIT_BIT_NV = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_ANY_HIT_BIT_NV);
pub const SHADER_STAGE_CLOSEST_HIT_BIT_NV = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_CLOSEST_HIT_BIT_NV);
pub const SHADER_STAGE_MISS_BIT_NV = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_MISS_BIT_NV);
pub const SHADER_STAGE_INTERSECTION_BIT_NV = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_INTERSECTION_BIT_NV);
pub const SHADER_STAGE_CALLABLE_BIT_NV = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_CALLABLE_BIT_NV);
pub const SHADER_STAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ShaderStageFlagBits.SHADER_STAGE_FLAG_BITS_MAX_ENUM);
pub const enum_ShaderStageFlagBits = extern enum(c_int) {
    SHADER_STAGE_VERTEX_BIT = 1,
    SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
    SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
    SHADER_STAGE_GEOMETRY_BIT = 8,
    SHADER_STAGE_FRAGMENT_BIT = 16,
    SHADER_STAGE_COMPUTE_BIT = 32,
    SHADER_STAGE_ALL_GRAPHICS = 31,
    SHADER_STAGE_ALL = 2147483647,
    SHADER_STAGE_RAYGEN_BIT_KHR = 256,
    SHADER_STAGE_ANY_HIT_BIT_KHR = 512,
    SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024,
    SHADER_STAGE_MISS_BIT_KHR = 2048,
    SHADER_STAGE_INTERSECTION_BIT_KHR = 4096,
    SHADER_STAGE_CALLABLE_BIT_KHR = 8192,
    SHADER_STAGE_TASK_BIT_NV = 64,
    SHADER_STAGE_MESH_BIT_NV = 128,
    SHADER_STAGE_RAYGEN_BIT_NV = 256,
    SHADER_STAGE_ANY_HIT_BIT_NV = 512,
    SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024,
    SHADER_STAGE_MISS_BIT_NV = 2048,
    SHADER_STAGE_INTERSECTION_BIT_NV = 4096,
    SHADER_STAGE_CALLABLE_BIT_NV = 8192,
    SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ShaderStageFlagBits = enum_ShaderStageFlagBits;
pub const CULL_MODE_NONE = @enumToInt(enum_CullModeFlagBits.CULL_MODE_NONE);
pub const CULL_MODE_FRONT_BIT = @enumToInt(enum_CullModeFlagBits.CULL_MODE_FRONT_BIT);
pub const CULL_MODE_BACK_BIT = @enumToInt(enum_CullModeFlagBits.CULL_MODE_BACK_BIT);
pub const CULL_MODE_FRONT_AND_BACK = @enumToInt(enum_CullModeFlagBits.CULL_MODE_FRONT_AND_BACK);
pub const CULL_MODE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_CullModeFlagBits.CULL_MODE_FLAG_BITS_MAX_ENUM);
pub const enum_CullModeFlagBits = extern enum(c_int) {
    CULL_MODE_NONE = 0,
    CULL_MODE_FRONT_BIT = 1,
    CULL_MODE_BACK_BIT = 2,
    CULL_MODE_FRONT_AND_BACK = 3,
    CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const CullModeFlagBits = enum_CullModeFlagBits;
pub const CullModeFlags = Flags;
pub const PipelineVertexInputStateCreateFlags = Flags;
pub const PipelineInputAssemblyStateCreateFlags = Flags;
pub const PipelineTessellationStateCreateFlags = Flags;
pub const PipelineViewportStateCreateFlags = Flags;
pub const PipelineRasterizationStateCreateFlags = Flags;
pub const PipelineMultisampleStateCreateFlags = Flags;
pub const PipelineDepthStencilStateCreateFlags = Flags;
pub const PipelineColorBlendStateCreateFlags = Flags;
pub const PipelineDynamicStateCreateFlags = Flags;
pub const PipelineLayoutCreateFlags = Flags;
pub const ShaderStageFlags = Flags;
pub const SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = @enumToInt(enum_SamplerCreateFlagBits.SAMPLER_CREATE_SUBSAMPLED_BIT_EXT);
pub const SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = @enumToInt(enum_SamplerCreateFlagBits.SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT);
pub const SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_SamplerCreateFlagBits.SAMPLER_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_SamplerCreateFlagBits = extern enum(c_int) {
    SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1,
    SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2,
    SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const SamplerCreateFlagBits = enum_SamplerCreateFlagBits;
pub const SamplerCreateFlags = Flags;
pub const DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = @enumToInt(enum_DescriptorPoolCreateFlagBits.DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT);
pub const DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = @enumToInt(enum_DescriptorPoolCreateFlagBits.DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT);
pub const DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = @enumToInt(enum_DescriptorPoolCreateFlagBits.DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT);
pub const DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_DescriptorPoolCreateFlagBits.DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_DescriptorPoolCreateFlagBits = extern enum(c_int) {
    DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
    DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2,
    DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2,
    DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const DescriptorPoolCreateFlagBits = enum_DescriptorPoolCreateFlagBits;
pub const DescriptorPoolCreateFlags = Flags;
pub const DescriptorPoolResetFlags = Flags;
pub const DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = @enumToInt(enum_DescriptorSetLayoutCreateFlagBits.DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT);
pub const DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = @enumToInt(enum_DescriptorSetLayoutCreateFlagBits.DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR);
pub const DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = @enumToInt(enum_DescriptorSetLayoutCreateFlagBits.DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT);
pub const DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_DescriptorSetLayoutCreateFlagBits.DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_DescriptorSetLayoutCreateFlagBits = extern enum(c_int) {
    DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2,
    DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1,
    DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2,
    DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const DescriptorSetLayoutCreateFlagBits = enum_DescriptorSetLayoutCreateFlagBits;
pub const DescriptorSetLayoutCreateFlags = Flags;
pub const ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = @enumToInt(enum_AttachmentDescriptionFlagBits.ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT);
pub const ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = @enumToInt(enum_AttachmentDescriptionFlagBits.ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM);
pub const enum_AttachmentDescriptionFlagBits = extern enum(c_int) {
    ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
    ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const AttachmentDescriptionFlagBits = enum_AttachmentDescriptionFlagBits;
pub const AttachmentDescriptionFlags = Flags;
pub const DEPENDENCY_BY_REGION_BIT = @enumToInt(enum_DependencyFlagBits.DEPENDENCY_BY_REGION_BIT);
pub const DEPENDENCY_DEVICE_GROUP_BIT = @enumToInt(enum_DependencyFlagBits.DEPENDENCY_DEVICE_GROUP_BIT);
pub const DEPENDENCY_VIEW_LOCAL_BIT = @enumToInt(enum_DependencyFlagBits.DEPENDENCY_VIEW_LOCAL_BIT);
pub const DEPENDENCY_VIEW_LOCAL_BIT_KHR = @enumToInt(enum_DependencyFlagBits.DEPENDENCY_VIEW_LOCAL_BIT_KHR);
pub const DEPENDENCY_DEVICE_GROUP_BIT_KHR = @enumToInt(enum_DependencyFlagBits.DEPENDENCY_DEVICE_GROUP_BIT_KHR);
pub const DEPENDENCY_FLAG_BITS_MAX_ENUM = @enumToInt(enum_DependencyFlagBits.DEPENDENCY_FLAG_BITS_MAX_ENUM);
pub const enum_DependencyFlagBits = extern enum(c_int) {
    DEPENDENCY_BY_REGION_BIT = 1,
    DEPENDENCY_DEVICE_GROUP_BIT = 4,
    DEPENDENCY_VIEW_LOCAL_BIT = 2,
    DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2,
    DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4,
    DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const DependencyFlagBits = enum_DependencyFlagBits;
pub const DependencyFlags = Flags;
pub const FRAMEBUFFER_CREATE_IMAGELESS_BIT = @enumToInt(enum_FramebufferCreateFlagBits.FRAMEBUFFER_CREATE_IMAGELESS_BIT);
pub const FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = @enumToInt(enum_FramebufferCreateFlagBits.FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR);
pub const FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_FramebufferCreateFlagBits.FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_FramebufferCreateFlagBits = extern enum(c_int) {
    FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1,
    FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1,
    FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const FramebufferCreateFlagBits = enum_FramebufferCreateFlagBits;
pub const FramebufferCreateFlags = Flags;
pub const RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = @enumToInt(enum_RenderPassCreateFlagBits.RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM);
pub const RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_RenderPassCreateFlagBits.RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_RenderPassCreateFlagBits = extern enum(c_int) {
    RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2,
    RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const RenderPassCreateFlagBits = enum_RenderPassCreateFlagBits;
pub const RenderPassCreateFlags = Flags;
pub const SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = @enumToInt(enum_SubpassDescriptionFlagBits.SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX);
pub const SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = @enumToInt(enum_SubpassDescriptionFlagBits.SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX);
pub const SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = @enumToInt(enum_SubpassDescriptionFlagBits.SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM);
pub const SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = @enumToInt(enum_SubpassDescriptionFlagBits.SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM);
pub const SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = @enumToInt(enum_SubpassDescriptionFlagBits.SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM);
pub const enum_SubpassDescriptionFlagBits = extern enum(c_int) {
    SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
    SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
    SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4,
    SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8,
    SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const SubpassDescriptionFlagBits = enum_SubpassDescriptionFlagBits;
pub const SubpassDescriptionFlags = Flags;
pub const COMMAND_POOL_CREATE_TRANSIENT_BIT = @enumToInt(enum_CommandPoolCreateFlagBits.COMMAND_POOL_CREATE_TRANSIENT_BIT);
pub const COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = @enumToInt(enum_CommandPoolCreateFlagBits.COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT);
pub const COMMAND_POOL_CREATE_PROTECTED_BIT = @enumToInt(enum_CommandPoolCreateFlagBits.COMMAND_POOL_CREATE_PROTECTED_BIT);
pub const COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_CommandPoolCreateFlagBits.COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_CommandPoolCreateFlagBits = extern enum(c_int) {
    COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
    COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
    COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
    COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const CommandPoolCreateFlagBits = enum_CommandPoolCreateFlagBits;
pub const CommandPoolCreateFlags = Flags;
pub const COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = @enumToInt(enum_CommandPoolResetFlagBits.COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT);
pub const COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = @enumToInt(enum_CommandPoolResetFlagBits.COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM);
pub const enum_CommandPoolResetFlagBits = extern enum(c_int) {
    COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
    COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const CommandPoolResetFlagBits = enum_CommandPoolResetFlagBits;
pub const CommandPoolResetFlags = Flags;
pub const COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = @enumToInt(enum_CommandBufferUsageFlagBits.COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT);
pub const COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = @enumToInt(enum_CommandBufferUsageFlagBits.COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT);
pub const COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = @enumToInt(enum_CommandBufferUsageFlagBits.COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT);
pub const COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_CommandBufferUsageFlagBits.COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM);
pub const enum_CommandBufferUsageFlagBits = extern enum(c_int) {
    COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
    COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
    COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
    COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const CommandBufferUsageFlagBits = enum_CommandBufferUsageFlagBits;
pub const CommandBufferUsageFlags = Flags;
pub const QUERY_CONTROL_PRECISE_BIT = @enumToInt(enum_QueryControlFlagBits.QUERY_CONTROL_PRECISE_BIT);
pub const QUERY_CONTROL_FLAG_BITS_MAX_ENUM = @enumToInt(enum_QueryControlFlagBits.QUERY_CONTROL_FLAG_BITS_MAX_ENUM);
pub const enum_QueryControlFlagBits = extern enum(c_int) {
    QUERY_CONTROL_PRECISE_BIT = 1,
    QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const QueryControlFlagBits = enum_QueryControlFlagBits;
pub const QueryControlFlags = Flags;
pub const COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = @enumToInt(enum_CommandBufferResetFlagBits.COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT);
pub const COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = @enumToInt(enum_CommandBufferResetFlagBits.COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM);
pub const enum_CommandBufferResetFlagBits = extern enum(c_int) {
    COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
    COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const CommandBufferResetFlagBits = enum_CommandBufferResetFlagBits;
pub const CommandBufferResetFlags = Flags;
pub const STENCIL_FACE_FRONT_BIT = @enumToInt(enum_StencilFaceFlagBits.STENCIL_FACE_FRONT_BIT);
pub const STENCIL_FACE_BACK_BIT = @enumToInt(enum_StencilFaceFlagBits.STENCIL_FACE_BACK_BIT);
pub const STENCIL_FACE_FRONT_AND_BACK = @enumToInt(enum_StencilFaceFlagBits.STENCIL_FACE_FRONT_AND_BACK);
pub const STENCIL_FRONT_AND_BACK = @enumToInt(enum_StencilFaceFlagBits.STENCIL_FRONT_AND_BACK);
pub const STENCIL_FACE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_StencilFaceFlagBits.STENCIL_FACE_FLAG_BITS_MAX_ENUM);
pub const enum_StencilFaceFlagBits = extern enum(c_int) {
    STENCIL_FACE_FRONT_BIT = 1,
    STENCIL_FACE_BACK_BIT = 2,
    STENCIL_FACE_FRONT_AND_BACK = 3,
    STENCIL_FRONT_AND_BACK = 3,
    STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const StencilFaceFlagBits = enum_StencilFaceFlagBits;
pub const StencilFaceFlags = Flags;
pub const struct_Extent2D = extern struct {
    width: u32,
    height: u32,
};
pub const Extent2D = struct_Extent2D;
pub const struct_Extent3D = extern struct {
    width: u32,
    height: u32,
    depth: u32,
};
pub const Extent3D = struct_Extent3D;
pub const struct_Offset2D = extern struct {
    x: i32,
    y: i32,
};
pub const Offset2D = struct_Offset2D;
pub const struct_Offset3D = extern struct {
    x: i32,
    y: i32,
    z: i32,
};
pub const Offset3D = struct_Offset3D;
pub const struct_Rect2D = extern struct {
    offset: Offset2D,
    extent: Extent2D,
};
pub const Rect2D = struct_Rect2D;
pub const struct_BaseInStructure = extern struct {
    sType: StructureType,
    pNext: [*c]const struct_BaseInStructure,
};
pub const BaseInStructure = struct_BaseInStructure;
pub const struct_BaseOutStructure = extern struct {
    sType: StructureType,
    pNext: [*c]struct_BaseOutStructure,
};
pub const BaseOutStructure = struct_BaseOutStructure;
pub const struct_BufferMemoryBarrier = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcAccessMask: AccessFlags,
    dstAccessMask: AccessFlags,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    buffer: Buffer,
    offset: DeviceSize,
    size: DeviceSize,
};
pub const BufferMemoryBarrier = struct_BufferMemoryBarrier;
pub const struct_DispatchIndirectCommand = extern struct {
    x: u32,
    y: u32,
    z: u32,
};
pub const DispatchIndirectCommand = struct_DispatchIndirectCommand;
pub const struct_DrawIndexedIndirectCommand = extern struct {
    indexCount: u32,
    instanceCount: u32,
    firstIndex: u32,
    vertexOffset: i32,
    firstInstance: u32,
};
pub const DrawIndexedIndirectCommand = struct_DrawIndexedIndirectCommand;
pub const struct_DrawIndirectCommand = extern struct {
    vertexCount: u32,
    instanceCount: u32,
    firstVertex: u32,
    firstInstance: u32,
};
pub const DrawIndirectCommand = struct_DrawIndirectCommand;
pub const struct_ImageSubresourceRange = extern struct {
    aspectMask: ImageAspectFlags,
    baseMipLevel: u32,
    levelCount: u32,
    baseArrayLayer: u32,
    layerCount: u32,
};
pub const ImageSubresourceRange = struct_ImageSubresourceRange;
pub const struct_ImageMemoryBarrier = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcAccessMask: AccessFlags,
    dstAccessMask: AccessFlags,
    oldLayout: ImageLayout,
    newLayout: ImageLayout,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    image: Image,
    subresourceRange: ImageSubresourceRange,
};
pub const ImageMemoryBarrier = struct_ImageMemoryBarrier;
pub const struct_MemoryBarrier = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcAccessMask: AccessFlags,
    dstAccessMask: AccessFlags,
};
pub const MemoryBarrier = struct_MemoryBarrier;
pub const PFN_vkAllocationFunction = ?fn (?*c_void, usize, usize, SystemAllocationScope) callconv(.C) ?*c_void;
pub const PFN_vkFreeFunction = ?fn (?*c_void, ?*c_void) callconv(.C) void;
pub const PFN_vkInternalAllocationNotification = ?fn (?*c_void, usize, InternalAllocationType, SystemAllocationScope) callconv(.C) void;
pub const PFN_vkInternalFreeNotification = ?fn (?*c_void, usize, InternalAllocationType, SystemAllocationScope) callconv(.C) void;
pub const PFN_vkReallocationFunction = ?fn (?*c_void, ?*c_void, usize, usize, SystemAllocationScope) callconv(.C) ?*c_void;
pub const PFN_vkVoidFunction = ?fn () callconv(.C) void;
pub const struct_AllocationCallbacks = extern struct {
    pUserData: ?*c_void,
    pfnAllocation: PFN_vkAllocationFunction,
    pfnReallocation: PFN_vkReallocationFunction,
    pfnFree: PFN_vkFreeFunction,
    pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pfnInternalFree: PFN_vkInternalFreeNotification,
};
pub const AllocationCallbacks = struct_AllocationCallbacks;
pub const struct_ApplicationInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pApplicationName: [*c]const u8,
    applicationVersion: u32,
    pEngineName: [*c]const u8,
    engineVersion: u32,
    apiVersion: u32,
};
pub const ApplicationInfo = struct_ApplicationInfo;
pub const struct_FormatProperties = extern struct {
    linearTilingFeatures: FormatFeatureFlags,
    optimalTilingFeatures: FormatFeatureFlags,
    bufferFeatures: FormatFeatureFlags,
};
pub const FormatProperties = struct_FormatProperties;
pub const struct_ImageFormatProperties = extern struct {
    maxExtent: Extent3D,
    maxMipLevels: u32,
    maxArrayLayers: u32,
    sampleCounts: SampleCountFlags,
    maxResourceSize: DeviceSize,
};
pub const ImageFormatProperties = struct_ImageFormatProperties;
pub const struct_InstanceCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: InstanceCreateFlags,
    pApplicationInfo: [*c]const ApplicationInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: [*c]const [*c]const u8,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: [*c]const [*c]const u8,
};
pub const InstanceCreateInfo = struct_InstanceCreateInfo;
pub const struct_MemoryHeap = extern struct {
    size: DeviceSize,
    flags: MemoryHeapFlags,
};
pub const MemoryHeap = struct_MemoryHeap;
pub const struct_MemoryType = extern struct {
    propertyFlags: MemoryPropertyFlags,
    heapIndex: u32,
};
pub const MemoryType = struct_MemoryType;
pub const struct_PhysicalDeviceFeatures = extern struct {
    robustBufferAccess: Bool32,
    fullDrawIndexUint32: Bool32,
    imageCubeArray: Bool32,
    independentBlend: Bool32,
    geometryShader: Bool32,
    tessellationShader: Bool32,
    sampleRateShading: Bool32,
    dualSrcBlend: Bool32,
    logicOp: Bool32,
    multiDrawIndirect: Bool32,
    drawIndirectFirstInstance: Bool32,
    depthClamp: Bool32,
    depthBiasClamp: Bool32,
    fillModeNonSolid: Bool32,
    depthBounds: Bool32,
    wideLines: Bool32,
    largePoints: Bool32,
    alphaToOne: Bool32,
    multiViewport: Bool32,
    samplerAnisotropy: Bool32,
    textureCompressionETC2: Bool32,
    textureCompressionASTC_LDR: Bool32,
    textureCompressionBC: Bool32,
    occlusionQueryPrecise: Bool32,
    pipelineStatisticsQuery: Bool32,
    vertexPipelineStoresAndAtomics: Bool32,
    fragmentStoresAndAtomics: Bool32,
    shaderTessellationAndGeometryPointSize: Bool32,
    shaderImageGatherExtended: Bool32,
    shaderStorageImageExtendedFormats: Bool32,
    shaderStorageImageMultisample: Bool32,
    shaderStorageImageReadWithoutFormat: Bool32,
    shaderStorageImageWriteWithoutFormat: Bool32,
    shaderUniformBufferArrayDynamicIndexing: Bool32,
    shaderSampledImageArrayDynamicIndexing: Bool32,
    shaderStorageBufferArrayDynamicIndexing: Bool32,
    shaderStorageImageArrayDynamicIndexing: Bool32,
    shaderClipDistance: Bool32,
    shaderCullDistance: Bool32,
    shaderFloat64: Bool32,
    shaderInt64: Bool32,
    shaderInt16: Bool32,
    shaderResourceResidency: Bool32,
    shaderResourceMinLod: Bool32,
    sparseBinding: Bool32,
    sparseResidencyBuffer: Bool32,
    sparseResidencyImage2D: Bool32,
    sparseResidencyImage3D: Bool32,
    sparseResidency2Samples: Bool32,
    sparseResidency4Samples: Bool32,
    sparseResidency8Samples: Bool32,
    sparseResidency16Samples: Bool32,
    sparseResidencyAliased: Bool32,
    variableMultisampleRate: Bool32,
    inheritedQueries: Bool32,
};
pub const PhysicalDeviceFeatures = struct_PhysicalDeviceFeatures;
pub const struct_PhysicalDeviceLimits = extern struct {
    maxImageDimension1D: u32,
    maxImageDimension2D: u32,
    maxImageDimension3D: u32,
    maxImageDimensionCube: u32,
    maxImageArrayLayers: u32,
    maxTexelBufferElements: u32,
    maxUniformBufferRange: u32,
    maxStorageBufferRange: u32,
    maxPushConstantsSize: u32,
    maxMemoryAllocationCount: u32,
    maxSamplerAllocationCount: u32,
    bufferImageGranularity: DeviceSize,
    sparseAddressSpaceSize: DeviceSize,
    maxBoundDescriptorSets: u32,
    maxPerStageDescriptorSamplers: u32,
    maxPerStageDescriptorUniformBuffers: u32,
    maxPerStageDescriptorStorageBuffers: u32,
    maxPerStageDescriptorSampledImages: u32,
    maxPerStageDescriptorStorageImages: u32,
    maxPerStageDescriptorInputAttachments: u32,
    maxPerStageResources: u32,
    maxDescriptorSetSamplers: u32,
    maxDescriptorSetUniformBuffers: u32,
    maxDescriptorSetUniformBuffersDynamic: u32,
    maxDescriptorSetStorageBuffers: u32,
    maxDescriptorSetStorageBuffersDynamic: u32,
    maxDescriptorSetSampledImages: u32,
    maxDescriptorSetStorageImages: u32,
    maxDescriptorSetInputAttachments: u32,
    maxVertexInputAttributes: u32,
    maxVertexInputBindings: u32,
    maxVertexInputAttributeOffset: u32,
    maxVertexInputBindingStride: u32,
    maxVertexOutputComponents: u32,
    maxTessellationGenerationLevel: u32,
    maxTessellationPatchSize: u32,
    maxTessellationControlPerVertexInputComponents: u32,
    maxTessellationControlPerVertexOutputComponents: u32,
    maxTessellationControlPerPatchOutputComponents: u32,
    maxTessellationControlTotalOutputComponents: u32,
    maxTessellationEvaluationInputComponents: u32,
    maxTessellationEvaluationOutputComponents: u32,
    maxGeometryShaderInvocations: u32,
    maxGeometryInputComponents: u32,
    maxGeometryOutputComponents: u32,
    maxGeometryOutputVertices: u32,
    maxGeometryTotalOutputComponents: u32,
    maxFragmentInputComponents: u32,
    maxFragmentOutputAttachments: u32,
    maxFragmentDualSrcAttachments: u32,
    maxFragmentCombinedOutputResources: u32,
    maxComputeSharedMemorySize: u32,
    maxComputeWorkGroupCount: [3]u32,
    maxComputeWorkGroupInvocations: u32,
    maxComputeWorkGroupSize: [3]u32,
    subPixelPrecisionBits: u32,
    subTexelPrecisionBits: u32,
    mipmapPrecisionBits: u32,
    maxDrawIndexedIndexValue: u32,
    maxDrawIndirectCount: u32,
    maxSamplerLodBias: f32,
    maxSamplerAnisotropy: f32,
    maxViewports: u32,
    maxViewportDimensions: [2]u32,
    viewportBoundsRange: [2]f32,
    viewportSubPixelBits: u32,
    minMemoryMapAlignment: usize,
    minTexelBufferOffsetAlignment: DeviceSize,
    minUniformBufferOffsetAlignment: DeviceSize,
    minStorageBufferOffsetAlignment: DeviceSize,
    minTexelOffset: i32,
    maxTexelOffset: u32,
    minTexelGatherOffset: i32,
    maxTexelGatherOffset: u32,
    minInterpolationOffset: f32,
    maxInterpolationOffset: f32,
    subPixelInterpolationOffsetBits: u32,
    maxFramebufferWidth: u32,
    maxFramebufferHeight: u32,
    maxFramebufferLayers: u32,
    framebufferColorSampleCounts: SampleCountFlags,
    framebufferDepthSampleCounts: SampleCountFlags,
    framebufferStencilSampleCounts: SampleCountFlags,
    framebufferNoAttachmentsSampleCounts: SampleCountFlags,
    maxColorAttachments: u32,
    sampledImageColorSampleCounts: SampleCountFlags,
    sampledImageIntegerSampleCounts: SampleCountFlags,
    sampledImageDepthSampleCounts: SampleCountFlags,
    sampledImageStencilSampleCounts: SampleCountFlags,
    storageImageSampleCounts: SampleCountFlags,
    maxSampleMaskWords: u32,
    timestampComputeAndGraphics: Bool32,
    timestampPeriod: f32,
    maxClipDistances: u32,
    maxCullDistances: u32,
    maxCombinedClipAndCullDistances: u32,
    discreteQueuePriorities: u32,
    pointSizeRange: [2]f32,
    lineWidthRange: [2]f32,
    pointSizeGranularity: f32,
    lineWidthGranularity: f32,
    strictLines: Bool32,
    standardSampleLocations: Bool32,
    optimalBufferCopyOffsetAlignment: DeviceSize,
    optimalBufferCopyRowPitchAlignment: DeviceSize,
    nonCoherentAtomSize: DeviceSize,
};
pub const PhysicalDeviceLimits = struct_PhysicalDeviceLimits;
pub const struct_PhysicalDeviceMemoryProperties = extern struct {
    memoryTypeCount: u32,
    memoryTypes: [32]MemoryType,
    memoryHeapCount: u32,
    memoryHeaps: [16]MemoryHeap,
};
pub const PhysicalDeviceMemoryProperties = struct_PhysicalDeviceMemoryProperties;
pub const struct_PhysicalDeviceSparseProperties = extern struct {
    residencyStandard2DBlockShape: Bool32,
    residencyStandard2DMultisampleBlockShape: Bool32,
    residencyStandard3DBlockShape: Bool32,
    residencyAlignedMipSize: Bool32,
    residencyNonResidentStrict: Bool32,
};
pub const PhysicalDeviceSparseProperties = struct_PhysicalDeviceSparseProperties;
pub const struct_PhysicalDeviceProperties = extern struct {
    apiVersion: u32,
    driverVersion: u32,
    vendorID: u32,
    deviceID: u32,
    deviceType: PhysicalDeviceType,
    deviceName: [256]u8,
    pipelineCacheUUID: [16]u8,
    limits: PhysicalDeviceLimits,
    sparseProperties: PhysicalDeviceSparseProperties,
};
pub const PhysicalDeviceProperties = struct_PhysicalDeviceProperties;
pub const struct_QueueFamilyProperties = extern struct {
    queueFlags: QueueFlags,
    queueCount: u32,
    timestampValidBits: u32,
    minImageTransferGranularity: Extent3D,
};
pub const QueueFamilyProperties = struct_QueueFamilyProperties;
pub const struct_DeviceQueueCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueCount: u32,
    pQueuePriorities: [*c]const f32,
};
pub const DeviceQueueCreateInfo = struct_DeviceQueueCreateInfo;
pub const struct_DeviceCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DeviceCreateFlags,
    queueCreateInfoCount: u32,
    pQueueCreateInfos: [*c]const DeviceQueueCreateInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: [*c]const [*c]const u8,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: [*c]const [*c]const u8,
    pEnabledFeatures: [*c]const PhysicalDeviceFeatures,
};
pub const DeviceCreateInfo = struct_DeviceCreateInfo;
pub const struct_ExtensionProperties = extern struct {
    extensionName: [256]u8,
    specVersion: u32,
};
pub const ExtensionProperties = struct_ExtensionProperties;
pub const struct_LayerProperties = extern struct {
    layerName: [256]u8,
    specVersion: u32,
    implementationVersion: u32,
    description: [256]u8,
};
pub const LayerProperties = struct_LayerProperties;
pub const struct_SubmitInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: [*c]const Semaphore,
    pWaitDstStageMask: [*c]const PipelineStageFlags,
    commandBufferCount: u32,
    pCommandBuffers: [*c]const CommandBuffer,
    signalSemaphoreCount: u32,
    pSignalSemaphores: [*c]const Semaphore,
};
pub const SubmitInfo = struct_SubmitInfo;
pub const struct_MappedMemoryRange = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    memory: DeviceMemory,
    offset: DeviceSize,
    size: DeviceSize,
};
pub const MappedMemoryRange = struct_MappedMemoryRange;
pub const struct_MemoryAllocateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    allocationSize: DeviceSize,
    memoryTypeIndex: u32,
};
pub const MemoryAllocateInfo = struct_MemoryAllocateInfo;
pub const struct_MemoryRequirements = extern struct {
    size: DeviceSize,
    alignment: DeviceSize,
    memoryTypeBits: u32,
};
pub const MemoryRequirements = struct_MemoryRequirements;
pub const struct_SparseMemoryBind = extern struct {
    resourceOffset: DeviceSize,
    size: DeviceSize,
    memory: DeviceMemory,
    memoryOffset: DeviceSize,
    flags: SparseMemoryBindFlags,
};
pub const SparseMemoryBind = struct_SparseMemoryBind;
pub const struct_SparseBufferMemoryBindInfo = extern struct {
    buffer: Buffer,
    bindCount: u32,
    pBinds: [*c]const SparseMemoryBind,
};
pub const SparseBufferMemoryBindInfo = struct_SparseBufferMemoryBindInfo;
pub const struct_SparseImageOpaqueMemoryBindInfo = extern struct {
    image: Image,
    bindCount: u32,
    pBinds: [*c]const SparseMemoryBind,
};
pub const SparseImageOpaqueMemoryBindInfo = struct_SparseImageOpaqueMemoryBindInfo;
pub const struct_ImageSubresource = extern struct {
    aspectMask: ImageAspectFlags,
    mipLevel: u32,
    arrayLayer: u32,
};
pub const ImageSubresource = struct_ImageSubresource;
pub const struct_SparseImageMemoryBind = extern struct {
    subresource: ImageSubresource,
    offset: Offset3D,
    extent: Extent3D,
    memory: DeviceMemory,
    memoryOffset: DeviceSize,
    flags: SparseMemoryBindFlags,
};
pub const SparseImageMemoryBind = struct_SparseImageMemoryBind;
pub const struct_SparseImageMemoryBindInfo = extern struct {
    image: Image,
    bindCount: u32,
    pBinds: [*c]const SparseImageMemoryBind,
};
pub const SparseImageMemoryBindInfo = struct_SparseImageMemoryBindInfo;
pub const struct_BindSparseInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: [*c]const Semaphore,
    bufferBindCount: u32,
    pBufferBinds: [*c]const SparseBufferMemoryBindInfo,
    imageOpaqueBindCount: u32,
    pImageOpaqueBinds: [*c]const SparseImageOpaqueMemoryBindInfo,
    imageBindCount: u32,
    pImageBinds: [*c]const SparseImageMemoryBindInfo,
    signalSemaphoreCount: u32,
    pSignalSemaphores: [*c]const Semaphore,
};
pub const BindSparseInfo = struct_BindSparseInfo;
pub const struct_SparseImageFormatProperties = extern struct {
    aspectMask: ImageAspectFlags,
    imageGranularity: Extent3D,
    flags: SparseImageFormatFlags,
};
pub const SparseImageFormatProperties = struct_SparseImageFormatProperties;
pub const struct_SparseImageMemoryRequirements = extern struct {
    formatProperties: SparseImageFormatProperties,
    imageMipTailFirstLod: u32,
    imageMipTailSize: DeviceSize,
    imageMipTailOffset: DeviceSize,
    imageMipTailStride: DeviceSize,
};
pub const SparseImageMemoryRequirements = struct_SparseImageMemoryRequirements;
pub const struct_FenceCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: FenceCreateFlags,
};
pub const FenceCreateInfo = struct_FenceCreateInfo;
pub const struct_SemaphoreCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: SemaphoreCreateFlags,
};
pub const SemaphoreCreateInfo = struct_SemaphoreCreateInfo;
pub const struct_EventCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: EventCreateFlags,
};
pub const EventCreateInfo = struct_EventCreateInfo;
pub const struct_QueryPoolCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: QueryPoolCreateFlags,
    queryType: QueryType,
    queryCount: u32,
    pipelineStatistics: QueryPipelineStatisticFlags,
};
pub const QueryPoolCreateInfo = struct_QueryPoolCreateInfo;
pub const struct_BufferCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: BufferCreateFlags,
    size: DeviceSize,
    usage: BufferUsageFlags,
    sharingMode: SharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
};
pub const BufferCreateInfo = struct_BufferCreateInfo;
pub const struct_BufferViewCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: BufferViewCreateFlags,
    buffer: Buffer,
    format: Format,
    offset: DeviceSize,
    range: DeviceSize,
};
pub const BufferViewCreateInfo = struct_BufferViewCreateInfo;
pub const struct_ImageCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: ImageCreateFlags,
    imageType: ImageType,
    format: Format,
    extent: Extent3D,
    mipLevels: u32,
    arrayLayers: u32,
    samples: SampleCountFlagBits,
    tiling: ImageTiling,
    usage: ImageUsageFlags,
    sharingMode: SharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
    initialLayout: ImageLayout,
};
pub const ImageCreateInfo = struct_ImageCreateInfo;
pub const struct_SubresourceLayout = extern struct {
    offset: DeviceSize,
    size: DeviceSize,
    rowPitch: DeviceSize,
    arrayPitch: DeviceSize,
    depthPitch: DeviceSize,
};
pub const SubresourceLayout = struct_SubresourceLayout;
pub const struct_ComponentMapping = extern struct {
    r: ComponentSwizzle,
    g: ComponentSwizzle,
    b: ComponentSwizzle,
    a: ComponentSwizzle,
};
pub const ComponentMapping = struct_ComponentMapping;
pub const struct_ImageViewCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: ImageViewCreateFlags,
    image: Image,
    viewType: ImageViewType,
    format: Format,
    components: ComponentMapping,
    subresourceRange: ImageSubresourceRange,
};
pub const ImageViewCreateInfo = struct_ImageViewCreateInfo;
pub const struct_ShaderModuleCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: ShaderModuleCreateFlags,
    codeSize: usize,
    pCode: [*c]const u32,
};
pub const ShaderModuleCreateInfo = struct_ShaderModuleCreateInfo;
pub const struct_PipelineCacheCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineCacheCreateFlags,
    initialDataSize: usize,
    pInitialData: ?*const c_void,
};
pub const PipelineCacheCreateInfo = struct_PipelineCacheCreateInfo;
pub const struct_SpecializationMapEntry = extern struct {
    constantID: u32,
    offset: u32,
    size: usize,
};
pub const SpecializationMapEntry = struct_SpecializationMapEntry;
pub const struct_SpecializationInfo = extern struct {
    mapEntryCount: u32,
    pMapEntries: [*c]const SpecializationMapEntry,
    dataSize: usize,
    pData: ?*const c_void,
};
pub const SpecializationInfo = struct_SpecializationInfo;
pub const struct_PipelineShaderStageCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineShaderStageCreateFlags,
    stage: ShaderStageFlagBits,
    module: ShaderModule,
    pName: [*c]const u8,
    pSpecializationInfo: [*c]const SpecializationInfo,
};
pub const PipelineShaderStageCreateInfo = struct_PipelineShaderStageCreateInfo;
pub const struct_ComputePipelineCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineCreateFlags,
    stage: PipelineShaderStageCreateInfo,
    layout: PipelineLayout,
    basePipelineHandle: Pipeline,
    basePipelineIndex: i32,
};
pub const ComputePipelineCreateInfo = struct_ComputePipelineCreateInfo;
pub const struct_VertexInputBindingDescription = extern struct {
    binding: u32,
    stride: u32,
    inputRate: VertexInputRate,
};
pub const VertexInputBindingDescription = struct_VertexInputBindingDescription;
pub const struct_VertexInputAttributeDescription = extern struct {
    location: u32,
    binding: u32,
    format: Format,
    offset: u32,
};
pub const VertexInputAttributeDescription = struct_VertexInputAttributeDescription;
pub const struct_PipelineVertexInputStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineVertexInputStateCreateFlags,
    vertexBindingDescriptionCount: u32,
    pVertexBindingDescriptions: [*c]const VertexInputBindingDescription,
    vertexAttributeDescriptionCount: u32,
    pVertexAttributeDescriptions: [*c]const VertexInputAttributeDescription,
};
pub const PipelineVertexInputStateCreateInfo = struct_PipelineVertexInputStateCreateInfo;
pub const struct_PipelineInputAssemblyStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineInputAssemblyStateCreateFlags,
    topology: PrimitiveTopology,
    primitiveRestartEnable: Bool32,
};
pub const PipelineInputAssemblyStateCreateInfo = struct_PipelineInputAssemblyStateCreateInfo;
pub const struct_PipelineTessellationStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineTessellationStateCreateFlags,
    patchControlPoints: u32,
};
pub const PipelineTessellationStateCreateInfo = struct_PipelineTessellationStateCreateInfo;
pub const struct_Viewport = extern struct {
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    minDepth: f32,
    maxDepth: f32,
};
pub const Viewport = struct_Viewport;
pub const struct_PipelineViewportStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineViewportStateCreateFlags,
    viewportCount: u32,
    pViewports: [*c]const Viewport,
    scissorCount: u32,
    pScissors: [*c]const Rect2D,
};
pub const PipelineViewportStateCreateInfo = struct_PipelineViewportStateCreateInfo;
pub const struct_PipelineRasterizationStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineRasterizationStateCreateFlags,
    depthClampEnable: Bool32,
    rasterizerDiscardEnable: Bool32,
    polygonMode: PolygonMode,
    cullMode: CullModeFlags,
    frontFace: FrontFace,
    depthBiasEnable: Bool32,
    depthBiasConstantFactor: f32,
    depthBiasClamp: f32,
    depthBiasSlopeFactor: f32,
    lineWidth: f32,
};
pub const PipelineRasterizationStateCreateInfo = struct_PipelineRasterizationStateCreateInfo;
pub const struct_PipelineMultisampleStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineMultisampleStateCreateFlags,
    rasterizationSamples: SampleCountFlagBits,
    sampleShadingEnable: Bool32,
    minSampleShading: f32,
    pSampleMask: [*c]const SampleMask,
    alphaToCoverageEnable: Bool32,
    alphaToOneEnable: Bool32,
};
pub const PipelineMultisampleStateCreateInfo = struct_PipelineMultisampleStateCreateInfo;
pub const struct_StencilOpState = extern struct {
    failOp: StencilOp,
    passOp: StencilOp,
    depthFailOp: StencilOp,
    compareOp: CompareOp,
    compareMask: u32,
    writeMask: u32,
    reference: u32,
};
pub const StencilOpState = struct_StencilOpState;
pub const struct_PipelineDepthStencilStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineDepthStencilStateCreateFlags,
    depthTestEnable: Bool32,
    depthWriteEnable: Bool32,
    depthCompareOp: CompareOp,
    depthBoundsTestEnable: Bool32,
    stencilTestEnable: Bool32,
    front: StencilOpState,
    back: StencilOpState,
    minDepthBounds: f32,
    maxDepthBounds: f32,
};
pub const PipelineDepthStencilStateCreateInfo = struct_PipelineDepthStencilStateCreateInfo;
pub const struct_PipelineColorBlendAttachmentState = extern struct {
    blendEnable: Bool32,
    srcColorBlendFactor: BlendFactor,
    dstColorBlendFactor: BlendFactor,
    colorBlendOp: BlendOp,
    srcAlphaBlendFactor: BlendFactor,
    dstAlphaBlendFactor: BlendFactor,
    alphaBlendOp: BlendOp,
    colorWriteMask: ColorComponentFlags,
};
pub const PipelineColorBlendAttachmentState = struct_PipelineColorBlendAttachmentState;
pub const struct_PipelineColorBlendStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineColorBlendStateCreateFlags,
    logicOpEnable: Bool32,
    logicOp: LogicOp,
    attachmentCount: u32,
    pAttachments: [*c]const PipelineColorBlendAttachmentState,
    blendConstants: [4]f32,
};
pub const PipelineColorBlendStateCreateInfo = struct_PipelineColorBlendStateCreateInfo;
pub const struct_PipelineDynamicStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineDynamicStateCreateFlags,
    dynamicStateCount: u32,
    pDynamicStates: [*c]const DynamicState,
};
pub const PipelineDynamicStateCreateInfo = struct_PipelineDynamicStateCreateInfo;
pub const struct_GraphicsPipelineCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineCreateFlags,
    stageCount: u32,
    pStages: [*c]const PipelineShaderStageCreateInfo,
    pVertexInputState: [*c]const PipelineVertexInputStateCreateInfo,
    pInputAssemblyState: [*c]const PipelineInputAssemblyStateCreateInfo,
    pTessellationState: [*c]const PipelineTessellationStateCreateInfo,
    pViewportState: [*c]const PipelineViewportStateCreateInfo,
    pRasterizationState: [*c]const PipelineRasterizationStateCreateInfo,
    pMultisampleState: [*c]const PipelineMultisampleStateCreateInfo,
    pDepthStencilState: [*c]const PipelineDepthStencilStateCreateInfo,
    pColorBlendState: [*c]const PipelineColorBlendStateCreateInfo,
    pDynamicState: [*c]const PipelineDynamicStateCreateInfo,
    layout: PipelineLayout,
    renderPass: RenderPass,
    subpass: u32,
    basePipelineHandle: Pipeline,
    basePipelineIndex: i32,
};
pub const GraphicsPipelineCreateInfo = struct_GraphicsPipelineCreateInfo;
pub const struct_PushConstantRange = extern struct {
    stageFlags: ShaderStageFlags,
    offset: u32,
    size: u32,
};
pub const PushConstantRange = struct_PushConstantRange;
pub const struct_PipelineLayoutCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineLayoutCreateFlags,
    setLayoutCount: u32,
    pSetLayouts: [*c]const DescriptorSetLayout,
    pushConstantRangeCount: u32,
    pPushConstantRanges: [*c]const PushConstantRange,
};
pub const PipelineLayoutCreateInfo = struct_PipelineLayoutCreateInfo;
pub const struct_SamplerCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: SamplerCreateFlags,
    magFilter: Filter,
    minFilter: Filter,
    mipmapMode: SamplerMipmapMode,
    addressModeU: SamplerAddressMode,
    addressModeV: SamplerAddressMode,
    addressModeW: SamplerAddressMode,
    mipLodBias: f32,
    anisotropyEnable: Bool32,
    maxAnisotropy: f32,
    compareEnable: Bool32,
    compareOp: CompareOp,
    minLod: f32,
    maxLod: f32,
    borderColor: BorderColor,
    unnormalizedCoordinates: Bool32,
};
pub const SamplerCreateInfo = struct_SamplerCreateInfo;
pub const struct_CopyDescriptorSet = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcSet: DescriptorSet,
    srcBinding: u32,
    srcArrayElement: u32,
    dstSet: DescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
};
pub const CopyDescriptorSet = struct_CopyDescriptorSet;
pub const struct_DescriptorBufferInfo = extern struct {
    buffer: Buffer,
    offset: DeviceSize,
    range: DeviceSize,
};
pub const DescriptorBufferInfo = struct_DescriptorBufferInfo;
pub const struct_DescriptorImageInfo = extern struct {
    sampler: Sampler,
    imageView: ImageView,
    imageLayout: ImageLayout,
};
pub const DescriptorImageInfo = struct_DescriptorImageInfo;
pub const struct_DescriptorPoolSize = extern struct {
    type: DescriptorType,
    descriptorCount: u32,
};
pub const DescriptorPoolSize = struct_DescriptorPoolSize;
pub const struct_DescriptorPoolCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DescriptorPoolCreateFlags,
    maxSets: u32,
    poolSizeCount: u32,
    pPoolSizes: [*c]const DescriptorPoolSize,
};
pub const DescriptorPoolCreateInfo = struct_DescriptorPoolCreateInfo;
pub const struct_DescriptorSetAllocateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    descriptorPool: DescriptorPool,
    descriptorSetCount: u32,
    pSetLayouts: [*c]const DescriptorSetLayout,
};
pub const DescriptorSetAllocateInfo = struct_DescriptorSetAllocateInfo;
pub const struct_DescriptorSetLayoutBinding = extern struct {
    binding: u32,
    descriptorType: DescriptorType,
    descriptorCount: u32,
    stageFlags: ShaderStageFlags,
    pImmutableSamplers: [*c]const Sampler,
};
pub const DescriptorSetLayoutBinding = struct_DescriptorSetLayoutBinding;
pub const struct_DescriptorSetLayoutCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DescriptorSetLayoutCreateFlags,
    bindingCount: u32,
    pBindings: [*c]const DescriptorSetLayoutBinding,
};
pub const DescriptorSetLayoutCreateInfo = struct_DescriptorSetLayoutCreateInfo;
pub const struct_WriteDescriptorSet = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    dstSet: DescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: DescriptorType,
    pImageInfo: [*c]const DescriptorImageInfo,
    pBufferInfo: [*c]const DescriptorBufferInfo,
    pTexelBufferView: [*c]const BufferView,
};
pub const WriteDescriptorSet = struct_WriteDescriptorSet;
pub const struct_AttachmentDescription = extern struct {
    flags: AttachmentDescriptionFlags,
    format: Format,
    samples: SampleCountFlagBits,
    loadOp: AttachmentLoadOp,
    storeOp: AttachmentStoreOp,
    stencilLoadOp: AttachmentLoadOp,
    stencilStoreOp: AttachmentStoreOp,
    initialLayout: ImageLayout,
    finalLayout: ImageLayout,
};
pub const AttachmentDescription = struct_AttachmentDescription;
pub const struct_AttachmentReference = extern struct {
    attachment: u32,
    layout: ImageLayout,
};
pub const AttachmentReference = struct_AttachmentReference;
pub const struct_FramebufferCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: FramebufferCreateFlags,
    renderPass: RenderPass,
    attachmentCount: u32,
    pAttachments: [*c]const ImageView,
    width: u32,
    height: u32,
    layers: u32,
};
pub const FramebufferCreateInfo = struct_FramebufferCreateInfo;
pub const struct_SubpassDescription = extern struct {
    flags: SubpassDescriptionFlags,
    pipelineBindPoint: PipelineBindPoint,
    inputAttachmentCount: u32,
    pInputAttachments: [*c]const AttachmentReference,
    colorAttachmentCount: u32,
    pColorAttachments: [*c]const AttachmentReference,
    pResolveAttachments: [*c]const AttachmentReference,
    pDepthStencilAttachment: [*c]const AttachmentReference,
    preserveAttachmentCount: u32,
    pPreserveAttachments: [*c]const u32,
};
pub const SubpassDescription = struct_SubpassDescription;
pub const struct_SubpassDependency = extern struct {
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: PipelineStageFlags,
    dstStageMask: PipelineStageFlags,
    srcAccessMask: AccessFlags,
    dstAccessMask: AccessFlags,
    dependencyFlags: DependencyFlags,
};
pub const SubpassDependency = struct_SubpassDependency;
pub const struct_RenderPassCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: RenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: [*c]const AttachmentDescription,
    subpassCount: u32,
    pSubpasses: [*c]const SubpassDescription,
    dependencyCount: u32,
    pDependencies: [*c]const SubpassDependency,
};
pub const RenderPassCreateInfo = struct_RenderPassCreateInfo;
pub const struct_CommandPoolCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: CommandPoolCreateFlags,
    queueFamilyIndex: u32,
};
pub const CommandPoolCreateInfo = struct_CommandPoolCreateInfo;
pub const struct_CommandBufferAllocateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    commandPool: CommandPool,
    level: CommandBufferLevel,
    commandBufferCount: u32,
};
pub const CommandBufferAllocateInfo = struct_CommandBufferAllocateInfo;
pub const struct_CommandBufferInheritanceInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    renderPass: RenderPass,
    subpass: u32,
    framebuffer: Framebuffer,
    occlusionQueryEnable: Bool32,
    queryFlags: QueryControlFlags,
    pipelineStatistics: QueryPipelineStatisticFlags,
};
pub const CommandBufferInheritanceInfo = struct_CommandBufferInheritanceInfo;
pub const struct_CommandBufferBeginInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: CommandBufferUsageFlags,
    pInheritanceInfo: [*c]const CommandBufferInheritanceInfo,
};
pub const CommandBufferBeginInfo = struct_CommandBufferBeginInfo;
pub const struct_BufferCopy = extern struct {
    srcOffset: DeviceSize,
    dstOffset: DeviceSize,
    size: DeviceSize,
};
pub const BufferCopy = struct_BufferCopy;
pub const struct_ImageSubresourceLayers = extern struct {
    aspectMask: ImageAspectFlags,
    mipLevel: u32,
    baseArrayLayer: u32,
    layerCount: u32,
};
pub const ImageSubresourceLayers = struct_ImageSubresourceLayers;
pub const struct_BufferImageCopy = extern struct {
    bufferOffset: DeviceSize,
    bufferRowLength: u32,
    bufferImageHeight: u32,
    imageSubresource: ImageSubresourceLayers,
    imageOffset: Offset3D,
    imageExtent: Extent3D,
};
pub const BufferImageCopy = struct_BufferImageCopy;
pub const union_ClearColorValue = extern union {
    float32: [4]f32,
    int32: [4]i32,
    uint32: [4]u32,
};
pub const ClearColorValue = union_ClearColorValue;
pub const struct_ClearDepthStencilValue = extern struct {
    depth: f32,
    stencil: u32,
};
pub const ClearDepthStencilValue = struct_ClearDepthStencilValue;
pub const union_ClearValue = extern union {
    color: ClearColorValue,
    depthStencil: ClearDepthStencilValue,
};
pub const ClearValue = union_ClearValue;
pub const struct_ClearAttachment = extern struct {
    aspectMask: ImageAspectFlags,
    colorAttachment: u32,
    clearValue: ClearValue,
};
pub const ClearAttachment = struct_ClearAttachment;
pub const struct_ClearRect = extern struct {
    rect: Rect2D,
    baseArrayLayer: u32,
    layerCount: u32,
};
pub const ClearRect = struct_ClearRect;
pub const struct_ImageBlit = extern struct {
    srcSubresource: ImageSubresourceLayers,
    srcOffsets: [2]Offset3D,
    dstSubresource: ImageSubresourceLayers,
    dstOffsets: [2]Offset3D,
};
pub const ImageBlit = struct_ImageBlit;
pub const struct_ImageCopy = extern struct {
    srcSubresource: ImageSubresourceLayers,
    srcOffset: Offset3D,
    dstSubresource: ImageSubresourceLayers,
    dstOffset: Offset3D,
    extent: Extent3D,
};
pub const ImageCopy = struct_ImageCopy;
pub const struct_ImageResolve = extern struct {
    srcSubresource: ImageSubresourceLayers,
    srcOffset: Offset3D,
    dstSubresource: ImageSubresourceLayers,
    dstOffset: Offset3D,
    extent: Extent3D,
};
pub const ImageResolve = struct_ImageResolve;
pub const struct_RenderPassBeginInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    renderPass: RenderPass,
    framebuffer: Framebuffer,
    renderArea: Rect2D,
    clearValueCount: u32,
    pClearValues: [*c]const ClearValue,
};
pub const RenderPassBeginInfo = struct_RenderPassBeginInfo;
pub const PFN_vkCreateInstance = ?fn ([*c]const InstanceCreateInfo, [*c]const AllocationCallbacks, [*c]Instance) callconv(.C) Result;
pub const PFN_vkDestroyInstance = ?fn (Instance, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDevices = ?fn (Instance, [*c]u32, [*c]PhysicalDevice) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceFeatures = ?fn (PhysicalDevice, [*c]PhysicalDeviceFeatures) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties = ?fn (PhysicalDevice, Format, [*c]FormatProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties = ?fn (PhysicalDevice, Format, ImageType, ImageTiling, ImageUsageFlags, ImageCreateFlags, [*c]ImageFormatProperties) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceProperties = ?fn (PhysicalDevice, [*c]PhysicalDeviceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties = ?fn (PhysicalDevice, [*c]u32, [*c]QueueFamilyProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties = ?fn (PhysicalDevice, [*c]PhysicalDeviceMemoryProperties) callconv(.C) void;
pub const PFN_vkGetInstanceProcAddr = ?fn (Instance, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkGetDeviceProcAddr = ?fn (Device, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkCreateDevice = ?fn (PhysicalDevice, [*c]const DeviceCreateInfo, [*c]const AllocationCallbacks, [*c]Device) callconv(.C) Result;
pub const PFN_vkDestroyDevice = ?fn (Device, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumerateInstanceExtensionProperties = ?fn ([*c]const u8, [*c]u32, [*c]ExtensionProperties) callconv(.C) Result;
pub const PFN_vkEnumerateDeviceExtensionProperties = ?fn (PhysicalDevice, [*c]const u8, [*c]u32, [*c]ExtensionProperties) callconv(.C) Result;
pub const PFN_vkEnumerateInstanceLayerProperties = ?fn ([*c]u32, [*c]LayerProperties) callconv(.C) Result;
pub const PFN_vkEnumerateDeviceLayerProperties = ?fn (PhysicalDevice, [*c]u32, [*c]LayerProperties) callconv(.C) Result;
pub const PFN_vkGetDeviceQueue = ?fn (Device, u32, u32, [*c]Queue) callconv(.C) void;
pub const PFN_vkQueueSubmit = ?fn (Queue, u32, [*c]const SubmitInfo, Fence) callconv(.C) Result;
pub const PFN_vkQueueWaitIdle = ?fn (Queue) callconv(.C) Result;
pub const PFN_vkDeviceWaitIdle = ?fn (Device) callconv(.C) Result;
pub const PFN_vkAllocateMemory = ?fn (Device, [*c]const MemoryAllocateInfo, [*c]const AllocationCallbacks, [*c]DeviceMemory) callconv(.C) Result;
pub const PFN_vkFreeMemory = ?fn (Device, DeviceMemory, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkMapMemory = ?fn (Device, DeviceMemory, DeviceSize, DeviceSize, MemoryMapFlags, [*c]?*c_void) callconv(.C) Result;
pub const PFN_vkUnmapMemory = ?fn (Device, DeviceMemory) callconv(.C) void;
pub const PFN_vkFlushMappedMemoryRanges = ?fn (Device, u32, [*c]const MappedMemoryRange) callconv(.C) Result;
pub const PFN_vkInvalidateMappedMemoryRanges = ?fn (Device, u32, [*c]const MappedMemoryRange) callconv(.C) Result;
pub const PFN_vkGetDeviceMemoryCommitment = ?fn (Device, DeviceMemory, [*c]DeviceSize) callconv(.C) void;
pub const PFN_vkBindBufferMemory = ?fn (Device, Buffer, DeviceMemory, DeviceSize) callconv(.C) Result;
pub const PFN_vkBindImageMemory = ?fn (Device, Image, DeviceMemory, DeviceSize) callconv(.C) Result;
pub const PFN_vkGetBufferMemoryRequirements = ?fn (Device, Buffer, [*c]MemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageMemoryRequirements = ?fn (Device, Image, [*c]MemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements = ?fn (Device, Image, [*c]u32, [*c]SparseImageMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ?fn (PhysicalDevice, Format, ImageType, SampleCountFlagBits, ImageUsageFlags, ImageTiling, [*c]u32, [*c]SparseImageFormatProperties) callconv(.C) void;
pub const PFN_vkQueueBindSparse = ?fn (Queue, u32, [*c]const BindSparseInfo, Fence) callconv(.C) Result;
pub const PFN_vkCreateFence = ?fn (Device, [*c]const FenceCreateInfo, [*c]const AllocationCallbacks, [*c]Fence) callconv(.C) Result;
pub const PFN_vkDestroyFence = ?fn (Device, Fence, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetFences = ?fn (Device, u32, [*c]const Fence) callconv(.C) Result;
pub const PFN_vkGetFenceStatus = ?fn (Device, Fence) callconv(.C) Result;
pub const PFN_vkWaitForFences = ?fn (Device, u32, [*c]const Fence, Bool32, u64) callconv(.C) Result;
pub const PFN_vkCreateSemaphore = ?fn (Device, [*c]const SemaphoreCreateInfo, [*c]const AllocationCallbacks, [*c]Semaphore) callconv(.C) Result;
pub const PFN_vkDestroySemaphore = ?fn (Device, Semaphore, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateEvent = ?fn (Device, [*c]const EventCreateInfo, [*c]const AllocationCallbacks, [*c]Event) callconv(.C) Result;
pub const PFN_vkDestroyEvent = ?fn (Device, Event, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetEventStatus = ?fn (Device, Event) callconv(.C) Result;
pub const PFN_vkSetEvent = ?fn (Device, Event) callconv(.C) Result;
pub const PFN_vkResetEvent = ?fn (Device, Event) callconv(.C) Result;
pub const PFN_vkCreateQueryPool = ?fn (Device, [*c]const QueryPoolCreateInfo, [*c]const AllocationCallbacks, [*c]QueryPool) callconv(.C) Result;
pub const PFN_vkDestroyQueryPool = ?fn (Device, QueryPool, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetQueryPoolResults = ?fn (Device, QueryPool, u32, u32, usize, ?*c_void, DeviceSize, QueryResultFlags) callconv(.C) Result;
pub const PFN_vkCreateBuffer = ?fn (Device, [*c]const BufferCreateInfo, [*c]const AllocationCallbacks, [*c]Buffer) callconv(.C) Result;
pub const PFN_vkDestroyBuffer = ?fn (Device, Buffer, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateBufferView = ?fn (Device, [*c]const BufferViewCreateInfo, [*c]const AllocationCallbacks, [*c]BufferView) callconv(.C) Result;
pub const PFN_vkDestroyBufferView = ?fn (Device, BufferView, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateImage = ?fn (Device, [*c]const ImageCreateInfo, [*c]const AllocationCallbacks, [*c]Image) callconv(.C) Result;
pub const PFN_vkDestroyImage = ?fn (Device, Image, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout = ?fn (Device, Image, [*c]const ImageSubresource, [*c]SubresourceLayout) callconv(.C) void;
pub const PFN_vkCreateImageView = ?fn (Device, [*c]const ImageViewCreateInfo, [*c]const AllocationCallbacks, [*c]ImageView) callconv(.C) Result;
pub const PFN_vkDestroyImageView = ?fn (Device, ImageView, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateShaderModule = ?fn (Device, [*c]const ShaderModuleCreateInfo, [*c]const AllocationCallbacks, [*c]ShaderModule) callconv(.C) Result;
pub const PFN_vkDestroyShaderModule = ?fn (Device, ShaderModule, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineCache = ?fn (Device, [*c]const PipelineCacheCreateInfo, [*c]const AllocationCallbacks, [*c]PipelineCache) callconv(.C) Result;
pub const PFN_vkDestroyPipelineCache = ?fn (Device, PipelineCache, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPipelineCacheData = ?fn (Device, PipelineCache, [*c]usize, ?*c_void) callconv(.C) Result;
pub const PFN_vkMergePipelineCaches = ?fn (Device, PipelineCache, u32, [*c]const PipelineCache) callconv(.C) Result;
pub const PFN_vkCreateGraphicsPipelines = ?fn (Device, PipelineCache, u32, [*c]const GraphicsPipelineCreateInfo, [*c]const AllocationCallbacks, [*c]Pipeline) callconv(.C) Result;
pub const PFN_vkCreateComputePipelines = ?fn (Device, PipelineCache, u32, [*c]const ComputePipelineCreateInfo, [*c]const AllocationCallbacks, [*c]Pipeline) callconv(.C) Result;
pub const PFN_vkDestroyPipeline = ?fn (Device, Pipeline, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineLayout = ?fn (Device, [*c]const PipelineLayoutCreateInfo, [*c]const AllocationCallbacks, [*c]PipelineLayout) callconv(.C) Result;
pub const PFN_vkDestroyPipelineLayout = ?fn (Device, PipelineLayout, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateSampler = ?fn (Device, [*c]const SamplerCreateInfo, [*c]const AllocationCallbacks, [*c]Sampler) callconv(.C) Result;
pub const PFN_vkDestroySampler = ?fn (Device, Sampler, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorSetLayout = ?fn (Device, [*c]const DescriptorSetLayoutCreateInfo, [*c]const AllocationCallbacks, [*c]DescriptorSetLayout) callconv(.C) Result;
pub const PFN_vkDestroyDescriptorSetLayout = ?fn (Device, DescriptorSetLayout, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorPool = ?fn (Device, [*c]const DescriptorPoolCreateInfo, [*c]const AllocationCallbacks, [*c]DescriptorPool) callconv(.C) Result;
pub const PFN_vkDestroyDescriptorPool = ?fn (Device, DescriptorPool, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetDescriptorPool = ?fn (Device, DescriptorPool, DescriptorPoolResetFlags) callconv(.C) Result;
pub const PFN_vkAllocateDescriptorSets = ?fn (Device, [*c]const DescriptorSetAllocateInfo, [*c]DescriptorSet) callconv(.C) Result;
pub const PFN_vkFreeDescriptorSets = ?fn (Device, DescriptorPool, u32, [*c]const DescriptorSet) callconv(.C) Result;
pub const PFN_vkUpdateDescriptorSets = ?fn (Device, u32, [*c]const WriteDescriptorSet, u32, [*c]const CopyDescriptorSet) callconv(.C) void;
pub const PFN_vkCreateFramebuffer = ?fn (Device, [*c]const FramebufferCreateInfo, [*c]const AllocationCallbacks, [*c]Framebuffer) callconv(.C) Result;
pub const PFN_vkDestroyFramebuffer = ?fn (Device, Framebuffer, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateRenderPass = ?fn (Device, [*c]const RenderPassCreateInfo, [*c]const AllocationCallbacks, [*c]RenderPass) callconv(.C) Result;
pub const PFN_vkDestroyRenderPass = ?fn (Device, RenderPass, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetRenderAreaGranularity = ?fn (Device, RenderPass, [*c]Extent2D) callconv(.C) void;
pub const PFN_vkCreateCommandPool = ?fn (Device, [*c]const CommandPoolCreateInfo, [*c]const AllocationCallbacks, [*c]CommandPool) callconv(.C) Result;
pub const PFN_vkDestroyCommandPool = ?fn (Device, CommandPool, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetCommandPool = ?fn (Device, CommandPool, CommandPoolResetFlags) callconv(.C) Result;
pub const PFN_vkAllocateCommandBuffers = ?fn (Device, [*c]const CommandBufferAllocateInfo, [*c]CommandBuffer) callconv(.C) Result;
pub const PFN_vkFreeCommandBuffers = ?fn (Device, CommandPool, u32, [*c]const CommandBuffer) callconv(.C) void;
pub const PFN_vkBeginCommandBuffer = ?fn (CommandBuffer, [*c]const CommandBufferBeginInfo) callconv(.C) Result;
pub const PFN_vkEndCommandBuffer = ?fn (CommandBuffer) callconv(.C) Result;
pub const PFN_vkResetCommandBuffer = ?fn (CommandBuffer, CommandBufferResetFlags) callconv(.C) Result;
pub const PFN_vkCmdBindPipeline = ?fn (CommandBuffer, PipelineBindPoint, Pipeline) callconv(.C) void;
pub const PFN_vkCmdSetViewport = ?fn (CommandBuffer, u32, u32, [*c]const Viewport) callconv(.C) void;
pub const PFN_vkCmdSetScissor = ?fn (CommandBuffer, u32, u32, [*c]const Rect2D) callconv(.C) void;
pub const PFN_vkCmdSetLineWidth = ?fn (CommandBuffer, f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBias = ?fn (CommandBuffer, f32, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetBlendConstants = ?fn (CommandBuffer, [*c]const f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBounds = ?fn (CommandBuffer, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetStencilCompareMask = ?fn (CommandBuffer, StencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilWriteMask = ?fn (CommandBuffer, StencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilReference = ?fn (CommandBuffer, StencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorSets = ?fn (CommandBuffer, PipelineBindPoint, PipelineLayout, u32, u32, [*c]const DescriptorSet, u32, [*c]const u32) callconv(.C) void;
pub const PFN_vkCmdBindIndexBuffer = ?fn (CommandBuffer, Buffer, DeviceSize, IndexType) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers = ?fn (CommandBuffer, u32, u32, [*c]const Buffer, [*c]const DeviceSize) callconv(.C) void;
pub const PFN_vkCmdDraw = ?fn (CommandBuffer, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexed = ?fn (CommandBuffer, u32, u32, u32, i32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirect = ?fn (CommandBuffer, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirect = ?fn (CommandBuffer, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatch = ?fn (CommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchIndirect = ?fn (CommandBuffer, Buffer, DeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyBuffer = ?fn (CommandBuffer, Buffer, Buffer, u32, [*c]const BufferCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImage = ?fn (CommandBuffer, Image, ImageLayout, Image, ImageLayout, u32, [*c]const ImageCopy) callconv(.C) void;
pub const PFN_vkCmdBlitImage = ?fn (CommandBuffer, Image, ImageLayout, Image, ImageLayout, u32, [*c]const ImageBlit, Filter) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage = ?fn (CommandBuffer, Buffer, Image, ImageLayout, u32, [*c]const BufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer = ?fn (CommandBuffer, Image, ImageLayout, Buffer, u32, [*c]const BufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdUpdateBuffer = ?fn (CommandBuffer, Buffer, DeviceSize, DeviceSize, ?*const c_void) callconv(.C) void;
pub const PFN_vkCmdFillBuffer = ?fn (CommandBuffer, Buffer, DeviceSize, DeviceSize, u32) callconv(.C) void;
pub const PFN_vkCmdClearColorImage = ?fn (CommandBuffer, Image, ImageLayout, [*c]const ClearColorValue, u32, [*c]const ImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearDepthStencilImage = ?fn (CommandBuffer, Image, ImageLayout, [*c]const ClearDepthStencilValue, u32, [*c]const ImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearAttachments = ?fn (CommandBuffer, u32, [*c]const ClearAttachment, u32, [*c]const ClearRect) callconv(.C) void;
pub const PFN_vkCmdResolveImage = ?fn (CommandBuffer, Image, ImageLayout, Image, ImageLayout, u32, [*c]const ImageResolve) callconv(.C) void;
pub const PFN_vkCmdSetEvent = ?fn (CommandBuffer, Event, PipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdResetEvent = ?fn (CommandBuffer, Event, PipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdWaitEvents = ?fn (CommandBuffer, u32, [*c]const Event, PipelineStageFlags, PipelineStageFlags, u32, [*c]const MemoryBarrier, u32, [*c]const BufferMemoryBarrier, u32, [*c]const ImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier = ?fn (CommandBuffer, PipelineStageFlags, PipelineStageFlags, DependencyFlags, u32, [*c]const MemoryBarrier, u32, [*c]const BufferMemoryBarrier, u32, [*c]const ImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdBeginQuery = ?fn (CommandBuffer, QueryPool, u32, QueryControlFlags) callconv(.C) void;
pub const PFN_vkCmdEndQuery = ?fn (CommandBuffer, QueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdResetQueryPool = ?fn (CommandBuffer, QueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp = ?fn (CommandBuffer, PipelineStageFlagBits, QueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdCopyQueryPoolResults = ?fn (CommandBuffer, QueryPool, u32, u32, Buffer, DeviceSize, DeviceSize, QueryResultFlags) callconv(.C) void;
pub const PFN_vkCmdPushConstants = ?fn (CommandBuffer, PipelineLayout, ShaderStageFlags, u32, u32, ?*const c_void) callconv(.C) void;
pub const PFN_vkCmdBeginRenderPass = ?fn (CommandBuffer, [*c]const RenderPassBeginInfo, SubpassContents) callconv(.C) void;
pub const PFN_vkCmdNextSubpass = ?fn (CommandBuffer, SubpassContents) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass = ?fn (CommandBuffer) callconv(.C) void;
pub const PFN_vkCmdExecuteCommands = ?fn (CommandBuffer, u32, [*c]const CommandBuffer) callconv(.C) void;
pub extern fn vkCreateInstance(pCreateInfo: [*c]const InstanceCreateInfo, pAllocator: [*c]const AllocationCallbacks, pInstance: [*c]Instance) Result;
pub extern fn vkDestroyInstance(instance: Instance, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkEnumeratePhysicalDevices(instance: Instance, pPhysicalDeviceCount: [*c]u32, pPhysicalDevices: [*c]PhysicalDevice) Result;
pub extern fn vkGetPhysicalDeviceFeatures(physicalDevice: PhysicalDevice, pFeatures: [*c]PhysicalDeviceFeatures) void;
pub extern fn vkGetPhysicalDeviceFormatProperties(physicalDevice: PhysicalDevice, format: Format, pFormatProperties: [*c]FormatProperties) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties(physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, pImageFormatProperties: [*c]ImageFormatProperties) Result;
pub extern fn vkGetPhysicalDeviceProperties(physicalDevice: PhysicalDevice, pProperties: [*c]PhysicalDeviceProperties) void;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]QueueFamilyProperties) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties(physicalDevice: PhysicalDevice, pMemoryProperties: [*c]PhysicalDeviceMemoryProperties) void;
pub extern fn vkGetInstanceProcAddr(instance: Instance, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkGetDeviceProcAddr(device: Device, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkCreateDevice(physicalDevice: PhysicalDevice, pCreateInfo: [*c]const DeviceCreateInfo, pAllocator: [*c]const AllocationCallbacks, pDevice: [*c]Device) Result;
pub extern fn vkDestroyDevice(device: Device, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkEnumerateInstanceExtensionProperties(pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]ExtensionProperties) Result;
pub extern fn vkEnumerateDeviceExtensionProperties(physicalDevice: PhysicalDevice, pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]ExtensionProperties) Result;
pub extern fn vkEnumerateInstanceLayerProperties(pPropertyCount: [*c]u32, pProperties: [*c]LayerProperties) Result;
pub extern fn vkEnumerateDeviceLayerProperties(physicalDevice: PhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]LayerProperties) Result;
pub extern fn vkGetDeviceQueue(device: Device, queueFamilyIndex: u32, queueIndex: u32, pQueue: [*c]Queue) void;
pub extern fn vkQueueSubmit(queue: Queue, submitCount: u32, pSubmits: [*c]const SubmitInfo, fence: Fence) Result;
pub extern fn vkQueueWaitIdle(queue: Queue) Result;
pub extern fn vkDeviceWaitIdle(device: Device) Result;
pub extern fn vkAllocateMemory(device: Device, pAllocateInfo: [*c]const MemoryAllocateInfo, pAllocator: [*c]const AllocationCallbacks, pMemory: [*c]DeviceMemory) Result;
pub extern fn vkFreeMemory(device: Device, memory: DeviceMemory, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkMapMemory(device: Device, memory: DeviceMemory, offset: DeviceSize, size: DeviceSize, flags: MemoryMapFlags, ppData: [*c]?*c_void) Result;
pub extern fn vkUnmapMemory(device: Device, memory: DeviceMemory) void;
pub extern fn vkFlushMappedMemoryRanges(device: Device, memoryRangeCount: u32, pMemoryRanges: [*c]const MappedMemoryRange) Result;
pub extern fn vkInvalidateMappedMemoryRanges(device: Device, memoryRangeCount: u32, pMemoryRanges: [*c]const MappedMemoryRange) Result;
pub extern fn vkGetDeviceMemoryCommitment(device: Device, memory: DeviceMemory, pCommittedMemoryInBytes: [*c]DeviceSize) void;
pub extern fn vkBindBufferMemory(device: Device, buffer: Buffer, memory: DeviceMemory, memoryOffset: DeviceSize) Result;
pub extern fn vkBindImageMemory(device: Device, image: Image, memory: DeviceMemory, memoryOffset: DeviceSize) Result;
pub extern fn vkGetBufferMemoryRequirements(device: Device, buffer: Buffer, pMemoryRequirements: [*c]MemoryRequirements) void;
pub extern fn vkGetImageMemoryRequirements(device: Device, image: Image, pMemoryRequirements: [*c]MemoryRequirements) void;
pub extern fn vkGetImageSparseMemoryRequirements(device: Device, image: Image, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]SparseImageMemoryRequirements) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: PhysicalDevice, format: Format, type: ImageType, samples: SampleCountFlagBits, usage: ImageUsageFlags, tiling: ImageTiling, pPropertyCount: [*c]u32, pProperties: [*c]SparseImageFormatProperties) void;
pub extern fn vkQueueBindSparse(queue: Queue, bindInfoCount: u32, pBindInfo: [*c]const BindSparseInfo, fence: Fence) Result;
pub extern fn vkCreateFence(device: Device, pCreateInfo: [*c]const FenceCreateInfo, pAllocator: [*c]const AllocationCallbacks, pFence: [*c]Fence) Result;
pub extern fn vkDestroyFence(device: Device, fence: Fence, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkResetFences(device: Device, fenceCount: u32, pFences: [*c]const Fence) Result;
pub extern fn vkGetFenceStatus(device: Device, fence: Fence) Result;
pub extern fn vkWaitForFences(device: Device, fenceCount: u32, pFences: [*c]const Fence, waitAll: Bool32, timeout: u64) Result;
pub extern fn vkCreateSemaphore(device: Device, pCreateInfo: [*c]const SemaphoreCreateInfo, pAllocator: [*c]const AllocationCallbacks, pSemaphore: [*c]Semaphore) Result;
pub extern fn vkDestroySemaphore(device: Device, semaphore: Semaphore, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreateEvent(device: Device, pCreateInfo: [*c]const EventCreateInfo, pAllocator: [*c]const AllocationCallbacks, pEvent: [*c]Event) Result;
pub extern fn vkDestroyEvent(device: Device, event: Event, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkGetEventStatus(device: Device, event: Event) Result;
pub extern fn vkSetEvent(device: Device, event: Event) Result;
pub extern fn vkResetEvent(device: Device, event: Event) Result;
pub extern fn vkCreateQueryPool(device: Device, pCreateInfo: [*c]const QueryPoolCreateInfo, pAllocator: [*c]const AllocationCallbacks, pQueryPool: [*c]QueryPool) Result;
pub extern fn vkDestroyQueryPool(device: Device, queryPool: QueryPool, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkGetQueryPoolResults(device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dataSize: usize, pData: ?*c_void, stride: DeviceSize, flags: QueryResultFlags) Result;
pub extern fn vkCreateBuffer(device: Device, pCreateInfo: [*c]const BufferCreateInfo, pAllocator: [*c]const AllocationCallbacks, pBuffer: [*c]Buffer) Result;
pub extern fn vkDestroyBuffer(device: Device, buffer: Buffer, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreateBufferView(device: Device, pCreateInfo: [*c]const BufferViewCreateInfo, pAllocator: [*c]const AllocationCallbacks, pView: [*c]BufferView) Result;
pub extern fn vkDestroyBufferView(device: Device, bufferView: BufferView, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreateImage(device: Device, pCreateInfo: [*c]const ImageCreateInfo, pAllocator: [*c]const AllocationCallbacks, pImage: [*c]Image) Result;
pub extern fn vkDestroyImage(device: Device, image: Image, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkGetImageSubresourceLayout(device: Device, image: Image, pSubresource: [*c]const ImageSubresource, pLayout: [*c]SubresourceLayout) void;
pub extern fn vkCreateImageView(device: Device, pCreateInfo: [*c]const ImageViewCreateInfo, pAllocator: [*c]const AllocationCallbacks, pView: [*c]ImageView) Result;
pub extern fn vkDestroyImageView(device: Device, imageView: ImageView, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreateShaderModule(device: Device, pCreateInfo: [*c]const ShaderModuleCreateInfo, pAllocator: [*c]const AllocationCallbacks, pShaderModule: [*c]ShaderModule) Result;
pub extern fn vkDestroyShaderModule(device: Device, shaderModule: ShaderModule, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreatePipelineCache(device: Device, pCreateInfo: [*c]const PipelineCacheCreateInfo, pAllocator: [*c]const AllocationCallbacks, pPipelineCache: [*c]PipelineCache) Result;
pub extern fn vkDestroyPipelineCache(device: Device, pipelineCache: PipelineCache, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkGetPipelineCacheData(device: Device, pipelineCache: PipelineCache, pDataSize: [*c]usize, pData: ?*c_void) Result;
pub extern fn vkMergePipelineCaches(device: Device, dstCache: PipelineCache, srcCacheCount: u32, pSrcCaches: [*c]const PipelineCache) Result;
pub extern fn vkCreateGraphicsPipelines(device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: [*c]const GraphicsPipelineCreateInfo, pAllocator: [*c]const AllocationCallbacks, pPipelines: [*c]Pipeline) Result;
pub extern fn vkCreateComputePipelines(device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: [*c]const ComputePipelineCreateInfo, pAllocator: [*c]const AllocationCallbacks, pPipelines: [*c]Pipeline) Result;
pub extern fn vkDestroyPipeline(device: Device, pipeline: Pipeline, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreatePipelineLayout(device: Device, pCreateInfo: [*c]const PipelineLayoutCreateInfo, pAllocator: [*c]const AllocationCallbacks, pPipelineLayout: [*c]PipelineLayout) Result;
pub extern fn vkDestroyPipelineLayout(device: Device, pipelineLayout: PipelineLayout, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreateSampler(device: Device, pCreateInfo: [*c]const SamplerCreateInfo, pAllocator: [*c]const AllocationCallbacks, pSampler: [*c]Sampler) Result;
pub extern fn vkDestroySampler(device: Device, sampler: Sampler, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreateDescriptorSetLayout(device: Device, pCreateInfo: [*c]const DescriptorSetLayoutCreateInfo, pAllocator: [*c]const AllocationCallbacks, pSetLayout: [*c]DescriptorSetLayout) Result;
pub extern fn vkDestroyDescriptorSetLayout(device: Device, descriptorSetLayout: DescriptorSetLayout, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreateDescriptorPool(device: Device, pCreateInfo: [*c]const DescriptorPoolCreateInfo, pAllocator: [*c]const AllocationCallbacks, pDescriptorPool: [*c]DescriptorPool) Result;
pub extern fn vkDestroyDescriptorPool(device: Device, descriptorPool: DescriptorPool, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkResetDescriptorPool(device: Device, descriptorPool: DescriptorPool, flags: DescriptorPoolResetFlags) Result;
pub extern fn vkAllocateDescriptorSets(device: Device, pAllocateInfo: [*c]const DescriptorSetAllocateInfo, pDescriptorSets: [*c]DescriptorSet) Result;
pub extern fn vkFreeDescriptorSets(device: Device, descriptorPool: DescriptorPool, descriptorSetCount: u32, pDescriptorSets: [*c]const DescriptorSet) Result;
pub extern fn vkUpdateDescriptorSets(device: Device, descriptorWriteCount: u32, pDescriptorWrites: [*c]const WriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: [*c]const CopyDescriptorSet) void;
pub extern fn vkCreateFramebuffer(device: Device, pCreateInfo: [*c]const FramebufferCreateInfo, pAllocator: [*c]const AllocationCallbacks, pFramebuffer: [*c]Framebuffer) Result;
pub extern fn vkDestroyFramebuffer(device: Device, framebuffer: Framebuffer, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreateRenderPass(device: Device, pCreateInfo: [*c]const RenderPassCreateInfo, pAllocator: [*c]const AllocationCallbacks, pRenderPass: [*c]RenderPass) Result;
pub extern fn vkDestroyRenderPass(device: Device, renderPass: RenderPass, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkGetRenderAreaGranularity(device: Device, renderPass: RenderPass, pGranularity: [*c]Extent2D) void;
pub extern fn vkCreateCommandPool(device: Device, pCreateInfo: [*c]const CommandPoolCreateInfo, pAllocator: [*c]const AllocationCallbacks, pCommandPool: [*c]CommandPool) Result;
pub extern fn vkDestroyCommandPool(device: Device, commandPool: CommandPool, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkResetCommandPool(device: Device, commandPool: CommandPool, flags: CommandPoolResetFlags) Result;
pub extern fn vkAllocateCommandBuffers(device: Device, pAllocateInfo: [*c]const CommandBufferAllocateInfo, pCommandBuffers: [*c]CommandBuffer) Result;
pub extern fn vkFreeCommandBuffers(device: Device, commandPool: CommandPool, commandBufferCount: u32, pCommandBuffers: [*c]const CommandBuffer) void;
pub extern fn vkBeginCommandBuffer(commandBuffer: CommandBuffer, pBeginInfo: [*c]const CommandBufferBeginInfo) Result;
pub extern fn vkEndCommandBuffer(commandBuffer: CommandBuffer) Result;
pub extern fn vkResetCommandBuffer(commandBuffer: CommandBuffer, flags: CommandBufferResetFlags) Result;
pub extern fn vkCmdBindPipeline(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline) void;
pub extern fn vkCmdSetViewport(commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: [*c]const Viewport) void;
pub extern fn vkCmdSetScissor(commandBuffer: CommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: [*c]const Rect2D) void;
pub extern fn vkCmdSetLineWidth(commandBuffer: CommandBuffer, lineWidth: f32) void;
pub extern fn vkCmdSetDepthBias(commandBuffer: CommandBuffer, depthBiasConstantFactor: f32, depthBiasClamp: f32, depthBiasSlopeFactor: f32) void;
pub extern fn vkCmdSetBlendConstants(commandBuffer: CommandBuffer, blendConstants: [*c]const f32) void;
pub extern fn vkCmdSetDepthBounds(commandBuffer: CommandBuffer, minDepthBounds: f32, maxDepthBounds: f32) void;
pub extern fn vkCmdSetStencilCompareMask(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, compareMask: u32) void;
pub extern fn vkCmdSetStencilWriteMask(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, writeMask: u32) void;
pub extern fn vkCmdSetStencilReference(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, reference: u32) void;
pub extern fn vkCmdBindDescriptorSets(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: [*c]const DescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: [*c]const u32) void;
pub extern fn vkCmdBindIndexBuffer(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, indexType: IndexType) void;
pub extern fn vkCmdBindVertexBuffers(commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const Buffer, pOffsets: [*c]const DeviceSize) void;
pub extern fn vkCmdDraw(commandBuffer: CommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndexed(commandBuffer: CommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndirect(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirect(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDispatch(commandBuffer: CommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkCmdDispatchIndirect(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize) void;
pub extern fn vkCmdCopyBuffer(commandBuffer: CommandBuffer, srcBuffer: Buffer, dstBuffer: Buffer, regionCount: u32, pRegions: [*c]const BufferCopy) void;
pub extern fn vkCmdCopyImage(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: [*c]const ImageCopy) void;
pub extern fn vkCmdBlitImage(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: [*c]const ImageBlit, filter: Filter) void;
pub extern fn vkCmdCopyBufferToImage(commandBuffer: CommandBuffer, srcBuffer: Buffer, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: [*c]const BufferImageCopy) void;
pub extern fn vkCmdCopyImageToBuffer(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstBuffer: Buffer, regionCount: u32, pRegions: [*c]const BufferImageCopy) void;
pub extern fn vkCmdUpdateBuffer(commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, dataSize: DeviceSize, pData: ?*const c_void) void;
pub extern fn vkCmdFillBuffer(commandBuffer: CommandBuffer, dstBuffer: Buffer, dstOffset: DeviceSize, size: DeviceSize, data: u32) void;
pub extern fn vkCmdClearColorImage(commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pColor: [*c]const ClearColorValue, rangeCount: u32, pRanges: [*c]const ImageSubresourceRange) void;
pub extern fn vkCmdClearDepthStencilImage(commandBuffer: CommandBuffer, image: Image, imageLayout: ImageLayout, pDepthStencil: [*c]const ClearDepthStencilValue, rangeCount: u32, pRanges: [*c]const ImageSubresourceRange) void;
pub extern fn vkCmdClearAttachments(commandBuffer: CommandBuffer, attachmentCount: u32, pAttachments: [*c]const ClearAttachment, rectCount: u32, pRects: [*c]const ClearRect) void;
pub extern fn vkCmdResolveImage(commandBuffer: CommandBuffer, srcImage: Image, srcImageLayout: ImageLayout, dstImage: Image, dstImageLayout: ImageLayout, regionCount: u32, pRegions: [*c]const ImageResolve) void;
pub extern fn vkCmdSetEvent(commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags) void;
pub extern fn vkCmdResetEvent(commandBuffer: CommandBuffer, event: Event, stageMask: PipelineStageFlags) void;
pub extern fn vkCmdWaitEvents(commandBuffer: CommandBuffer, eventCount: u32, pEvents: [*c]const Event, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const ImageMemoryBarrier) void;
pub extern fn vkCmdPipelineBarrier(commandBuffer: CommandBuffer, srcStageMask: PipelineStageFlags, dstStageMask: PipelineStageFlags, dependencyFlags: DependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const MemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const BufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const ImageMemoryBarrier) void;
pub extern fn vkCmdBeginQuery(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags) void;
pub extern fn vkCmdEndQuery(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32) void;
pub extern fn vkCmdResetQueryPool(commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32) void;
pub extern fn vkCmdWriteTimestamp(commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, queryPool: QueryPool, query: u32) void;
pub extern fn vkCmdCopyQueryPoolResults(commandBuffer: CommandBuffer, queryPool: QueryPool, firstQuery: u32, queryCount: u32, dstBuffer: Buffer, dstOffset: DeviceSize, stride: DeviceSize, flags: QueryResultFlags) void;
pub extern fn vkCmdPushConstants(commandBuffer: CommandBuffer, layout: PipelineLayout, stageFlags: ShaderStageFlags, offset: u32, size: u32, pValues: ?*const c_void) void;
pub extern fn vkCmdBeginRenderPass(commandBuffer: CommandBuffer, pRenderPassBegin: [*c]const RenderPassBeginInfo, contents: SubpassContents) void;
pub extern fn vkCmdNextSubpass(commandBuffer: CommandBuffer, contents: SubpassContents) void;
pub extern fn vkCmdEndRenderPass(commandBuffer: CommandBuffer) void;
pub extern fn vkCmdExecuteCommands(commandBuffer: CommandBuffer, commandBufferCount: u32, pCommandBuffers: [*c]const CommandBuffer) void;
pub const struct_SamplerYcbcrConversion_T = opaque {};
pub const SamplerYcbcrConversion = ?*struct_SamplerYcbcrConversion_T;
pub const struct_DescriptorUpdateTemplate_T = opaque {};
pub const DescriptorUpdateTemplate = ?*struct_DescriptorUpdateTemplate_T;
pub const POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = @enumToInt(enum_PointClippingBehavior.POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES);
pub const POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = @enumToInt(enum_PointClippingBehavior.POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY);
pub const POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = @enumToInt(enum_PointClippingBehavior.POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR);
pub const POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = @enumToInt(enum_PointClippingBehavior.POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR);
pub const POINT_CLIPPING_BEHAVIOR_MAX_ENUM = @enumToInt(enum_PointClippingBehavior.POINT_CLIPPING_BEHAVIOR_MAX_ENUM);
pub const enum_PointClippingBehavior = extern enum(c_int) {
    POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
    POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
    POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0,
    POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1,
    POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647,
    _,
};
pub const PointClippingBehavior = enum_PointClippingBehavior;
pub const TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = @enumToInt(enum_TessellationDomainOrigin.TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT);
pub const TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = @enumToInt(enum_TessellationDomainOrigin.TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT);
pub const TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = @enumToInt(enum_TessellationDomainOrigin.TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR);
pub const TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = @enumToInt(enum_TessellationDomainOrigin.TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR);
pub const TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = @enumToInt(enum_TessellationDomainOrigin.TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM);
pub const enum_TessellationDomainOrigin = extern enum(c_int) {
    TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
    TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
    TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0,
    TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1,
    TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647,
    _,
};
pub const TessellationDomainOrigin = enum_TessellationDomainOrigin;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR);
pub const SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = @enumToInt(enum_SamplerYcbcrModelConversion.SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM);
pub const enum_SamplerYcbcrModelConversion = extern enum(c_int) {
    SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
    SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4,
    SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647,
    _,
};
pub const SamplerYcbcrModelConversion = enum_SamplerYcbcrModelConversion;
pub const SAMPLER_YCBCR_RANGE_ITU_FULL = @enumToInt(enum_SamplerYcbcrRange.SAMPLER_YCBCR_RANGE_ITU_FULL);
pub const SAMPLER_YCBCR_RANGE_ITU_NARROW = @enumToInt(enum_SamplerYcbcrRange.SAMPLER_YCBCR_RANGE_ITU_NARROW);
pub const SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = @enumToInt(enum_SamplerYcbcrRange.SAMPLER_YCBCR_RANGE_ITU_FULL_KHR);
pub const SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = @enumToInt(enum_SamplerYcbcrRange.SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR);
pub const SAMPLER_YCBCR_RANGE_MAX_ENUM = @enumToInt(enum_SamplerYcbcrRange.SAMPLER_YCBCR_RANGE_MAX_ENUM);
pub const enum_SamplerYcbcrRange = extern enum(c_int) {
    SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
    SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0,
    SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1,
    SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647,
    _,
};
pub const SamplerYcbcrRange = enum_SamplerYcbcrRange;
pub const CHROMA_LOCATION_COSITED_EVEN = @enumToInt(enum_ChromaLocation.CHROMA_LOCATION_COSITED_EVEN);
pub const CHROMA_LOCATION_MIDPOINT = @enumToInt(enum_ChromaLocation.CHROMA_LOCATION_MIDPOINT);
pub const CHROMA_LOCATION_COSITED_EVEN_KHR = @enumToInt(enum_ChromaLocation.CHROMA_LOCATION_COSITED_EVEN_KHR);
pub const CHROMA_LOCATION_MIDPOINT_KHR = @enumToInt(enum_ChromaLocation.CHROMA_LOCATION_MIDPOINT_KHR);
pub const CHROMA_LOCATION_MAX_ENUM = @enumToInt(enum_ChromaLocation.CHROMA_LOCATION_MAX_ENUM);
pub const enum_ChromaLocation = extern enum(c_int) {
    CHROMA_LOCATION_COSITED_EVEN = 0,
    CHROMA_LOCATION_MIDPOINT = 1,
    CHROMA_LOCATION_COSITED_EVEN_KHR = 0,
    CHROMA_LOCATION_MIDPOINT_KHR = 1,
    CHROMA_LOCATION_MAX_ENUM = 2147483647,
    _,
};
pub const ChromaLocation = enum_ChromaLocation;
pub const DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = @enumToInt(enum_DescriptorUpdateTemplateType.DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET);
pub const DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = @enumToInt(enum_DescriptorUpdateTemplateType.DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR);
pub const DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = @enumToInt(enum_DescriptorUpdateTemplateType.DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR);
pub const DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = @enumToInt(enum_DescriptorUpdateTemplateType.DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM);
pub const enum_DescriptorUpdateTemplateType = extern enum(c_int) {
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0,
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const DescriptorUpdateTemplateType = enum_DescriptorUpdateTemplateType;
pub const SUBGROUP_FEATURE_BASIC_BIT = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_BASIC_BIT);
pub const SUBGROUP_FEATURE_VOTE_BIT = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_VOTE_BIT);
pub const SUBGROUP_FEATURE_ARITHMETIC_BIT = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_ARITHMETIC_BIT);
pub const SUBGROUP_FEATURE_BALLOT_BIT = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_BALLOT_BIT);
pub const SUBGROUP_FEATURE_SHUFFLE_BIT = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_SHUFFLE_BIT);
pub const SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT);
pub const SUBGROUP_FEATURE_CLUSTERED_BIT = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_CLUSTERED_BIT);
pub const SUBGROUP_FEATURE_QUAD_BIT = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_QUAD_BIT);
pub const SUBGROUP_FEATURE_PARTITIONED_BIT_NV = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_PARTITIONED_BIT_NV);
pub const SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_SubgroupFeatureFlagBits.SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_SubgroupFeatureFlagBits = extern enum(c_int) {
    SUBGROUP_FEATURE_BASIC_BIT = 1,
    SUBGROUP_FEATURE_VOTE_BIT = 2,
    SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
    SUBGROUP_FEATURE_BALLOT_BIT = 8,
    SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
    SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
    SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
    SUBGROUP_FEATURE_QUAD_BIT = 128,
    SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
    SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const SubgroupFeatureFlagBits = enum_SubgroupFeatureFlagBits;
pub const SubgroupFeatureFlags = Flags;
pub const PEER_MEMORY_FEATURE_COPY_SRC_BIT = @enumToInt(enum_PeerMemoryFeatureFlagBits.PEER_MEMORY_FEATURE_COPY_SRC_BIT);
pub const PEER_MEMORY_FEATURE_COPY_DST_BIT = @enumToInt(enum_PeerMemoryFeatureFlagBits.PEER_MEMORY_FEATURE_COPY_DST_BIT);
pub const PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = @enumToInt(enum_PeerMemoryFeatureFlagBits.PEER_MEMORY_FEATURE_GENERIC_SRC_BIT);
pub const PEER_MEMORY_FEATURE_GENERIC_DST_BIT = @enumToInt(enum_PeerMemoryFeatureFlagBits.PEER_MEMORY_FEATURE_GENERIC_DST_BIT);
pub const PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = @enumToInt(enum_PeerMemoryFeatureFlagBits.PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR);
pub const PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = @enumToInt(enum_PeerMemoryFeatureFlagBits.PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR);
pub const PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = @enumToInt(enum_PeerMemoryFeatureFlagBits.PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR);
pub const PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = @enumToInt(enum_PeerMemoryFeatureFlagBits.PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR);
pub const PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_PeerMemoryFeatureFlagBits.PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_PeerMemoryFeatureFlagBits = extern enum(c_int) {
    PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
    PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
    PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
    PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
    PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1,
    PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2,
    PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4,
    PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8,
    PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const PeerMemoryFeatureFlagBits = enum_PeerMemoryFeatureFlagBits;
pub const PeerMemoryFeatureFlags = Flags;
pub const MEMORY_ALLOCATE_DEVICE_MASK_BIT = @enumToInt(enum_MemoryAllocateFlagBits.MEMORY_ALLOCATE_DEVICE_MASK_BIT);
pub const MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = @enumToInt(enum_MemoryAllocateFlagBits.MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT);
pub const MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = @enumToInt(enum_MemoryAllocateFlagBits.MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT);
pub const MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = @enumToInt(enum_MemoryAllocateFlagBits.MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR);
pub const MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = @enumToInt(enum_MemoryAllocateFlagBits.MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR);
pub const MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = @enumToInt(enum_MemoryAllocateFlagBits.MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR);
pub const MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_MemoryAllocateFlagBits.MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM);
pub const enum_MemoryAllocateFlagBits = extern enum(c_int) {
    MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
    MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2,
    MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4,
    MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1,
    MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2,
    MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4,
    MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const MemoryAllocateFlagBits = enum_MemoryAllocateFlagBits;
pub const MemoryAllocateFlags = Flags;
pub const CommandPoolTrimFlags = Flags;
pub const DescriptorUpdateTemplateCreateFlags = Flags;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ExternalMemoryHandleTypeFlagBits.EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM);
pub const enum_ExternalMemoryHandleTypeFlagBits = extern enum(c_int) {
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
    EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
    EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64,
    EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ExternalMemoryHandleTypeFlagBits = enum_ExternalMemoryHandleTypeFlagBits;
pub const ExternalMemoryHandleTypeFlags = Flags;
pub const EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = @enumToInt(enum_ExternalMemoryFeatureFlagBits.EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT);
pub const EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = @enumToInt(enum_ExternalMemoryFeatureFlagBits.EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT);
pub const EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = @enumToInt(enum_ExternalMemoryFeatureFlagBits.EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT);
pub const EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = @enumToInt(enum_ExternalMemoryFeatureFlagBits.EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR);
pub const EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = @enumToInt(enum_ExternalMemoryFeatureFlagBits.EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR);
pub const EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = @enumToInt(enum_ExternalMemoryFeatureFlagBits.EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR);
pub const EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ExternalMemoryFeatureFlagBits.EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_ExternalMemoryFeatureFlagBits = extern enum(c_int) {
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1,
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2,
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4,
    EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ExternalMemoryFeatureFlagBits = enum_ExternalMemoryFeatureFlagBits;
pub const ExternalMemoryFeatureFlags = Flags;
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = @enumToInt(enum_ExternalFenceHandleTypeFlagBits.EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT);
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = @enumToInt(enum_ExternalFenceHandleTypeFlagBits.EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT);
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = @enumToInt(enum_ExternalFenceHandleTypeFlagBits.EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT);
pub const EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = @enumToInt(enum_ExternalFenceHandleTypeFlagBits.EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT);
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = @enumToInt(enum_ExternalFenceHandleTypeFlagBits.EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR);
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = @enumToInt(enum_ExternalFenceHandleTypeFlagBits.EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR);
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = @enumToInt(enum_ExternalFenceHandleTypeFlagBits.EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR);
pub const EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = @enumToInt(enum_ExternalFenceHandleTypeFlagBits.EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR);
pub const EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ExternalFenceHandleTypeFlagBits.EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM);
pub const enum_ExternalFenceHandleTypeFlagBits = extern enum(c_int) {
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4,
    EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8,
    EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ExternalFenceHandleTypeFlagBits = enum_ExternalFenceHandleTypeFlagBits;
pub const ExternalFenceHandleTypeFlags = Flags;
pub const EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = @enumToInt(enum_ExternalFenceFeatureFlagBits.EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT);
pub const EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = @enumToInt(enum_ExternalFenceFeatureFlagBits.EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT);
pub const EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = @enumToInt(enum_ExternalFenceFeatureFlagBits.EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR);
pub const EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = @enumToInt(enum_ExternalFenceFeatureFlagBits.EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR);
pub const EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ExternalFenceFeatureFlagBits.EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_ExternalFenceFeatureFlagBits = extern enum(c_int) {
    EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
    EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
    EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1,
    EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2,
    EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ExternalFenceFeatureFlagBits = enum_ExternalFenceFeatureFlagBits;
pub const ExternalFenceFeatureFlags = Flags;
pub const FENCE_IMPORT_TEMPORARY_BIT = @enumToInt(enum_FenceImportFlagBits.FENCE_IMPORT_TEMPORARY_BIT);
pub const FENCE_IMPORT_TEMPORARY_BIT_KHR = @enumToInt(enum_FenceImportFlagBits.FENCE_IMPORT_TEMPORARY_BIT_KHR);
pub const FENCE_IMPORT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_FenceImportFlagBits.FENCE_IMPORT_FLAG_BITS_MAX_ENUM);
pub const enum_FenceImportFlagBits = extern enum(c_int) {
    FENCE_IMPORT_TEMPORARY_BIT = 1,
    FENCE_IMPORT_TEMPORARY_BIT_KHR = 1,
    FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const FenceImportFlagBits = enum_FenceImportFlagBits;
pub const FenceImportFlags = Flags;
pub const SEMAPHORE_IMPORT_TEMPORARY_BIT = @enumToInt(enum_SemaphoreImportFlagBits.SEMAPHORE_IMPORT_TEMPORARY_BIT);
pub const SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = @enumToInt(enum_SemaphoreImportFlagBits.SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR);
pub const SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_SemaphoreImportFlagBits.SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM);
pub const enum_SemaphoreImportFlagBits = extern enum(c_int) {
    SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
    SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1,
    SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const SemaphoreImportFlagBits = enum_SemaphoreImportFlagBits;
pub const SemaphoreImportFlags = Flags;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR);
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ExternalSemaphoreHandleTypeFlagBits.EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM);
pub const enum_ExternalSemaphoreHandleTypeFlagBits = extern enum(c_int) {
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = 8,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ExternalSemaphoreHandleTypeFlagBits = enum_ExternalSemaphoreHandleTypeFlagBits;
pub const ExternalSemaphoreHandleTypeFlags = Flags;
pub const EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = @enumToInt(enum_ExternalSemaphoreFeatureFlagBits.EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT);
pub const EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = @enumToInt(enum_ExternalSemaphoreFeatureFlagBits.EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT);
pub const EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = @enumToInt(enum_ExternalSemaphoreFeatureFlagBits.EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR);
pub const EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = @enumToInt(enum_ExternalSemaphoreFeatureFlagBits.EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR);
pub const EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ExternalSemaphoreFeatureFlagBits.EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_ExternalSemaphoreFeatureFlagBits = extern enum(c_int) {
    EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
    EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
    EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1,
    EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2,
    EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ExternalSemaphoreFeatureFlagBits = enum_ExternalSemaphoreFeatureFlagBits;
pub const ExternalSemaphoreFeatureFlags = Flags;
pub const struct_PhysicalDeviceSubgroupProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    subgroupSize: u32,
    supportedStages: ShaderStageFlags,
    supportedOperations: SubgroupFeatureFlags,
    quadOperationsInAllStages: Bool32,
};
pub const PhysicalDeviceSubgroupProperties = struct_PhysicalDeviceSubgroupProperties;
pub const struct_BindBufferMemoryInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    buffer: Buffer,
    memory: DeviceMemory,
    memoryOffset: DeviceSize,
};
pub const BindBufferMemoryInfo = struct_BindBufferMemoryInfo;
pub const struct_BindImageMemoryInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    image: Image,
    memory: DeviceMemory,
    memoryOffset: DeviceSize,
};
pub const BindImageMemoryInfo = struct_BindImageMemoryInfo;
pub const struct_PhysicalDevice16BitStorageFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    storageBuffer16BitAccess: Bool32,
    uniformAndStorageBuffer16BitAccess: Bool32,
    storagePushConstant16: Bool32,
    storageInputOutput16: Bool32,
};
pub const PhysicalDevice16BitStorageFeatures = struct_PhysicalDevice16BitStorageFeatures;
pub const struct_MemoryDedicatedRequirements = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    prefersDedicatedAllocation: Bool32,
    requiresDedicatedAllocation: Bool32,
};
pub const MemoryDedicatedRequirements = struct_MemoryDedicatedRequirements;
pub const struct_MemoryDedicatedAllocateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    image: Image,
    buffer: Buffer,
};
pub const MemoryDedicatedAllocateInfo = struct_MemoryDedicatedAllocateInfo;
pub const struct_MemoryAllocateFlagsInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: MemoryAllocateFlags,
    deviceMask: u32,
};
pub const MemoryAllocateFlagsInfo = struct_MemoryAllocateFlagsInfo;
pub const struct_DeviceGroupRenderPassBeginInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    deviceMask: u32,
    deviceRenderAreaCount: u32,
    pDeviceRenderAreas: [*c]const Rect2D,
};
pub const DeviceGroupRenderPassBeginInfo = struct_DeviceGroupRenderPassBeginInfo;
pub const struct_DeviceGroupCommandBufferBeginInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    deviceMask: u32,
};
pub const DeviceGroupCommandBufferBeginInfo = struct_DeviceGroupCommandBufferBeginInfo;
pub const struct_DeviceGroupSubmitInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphoreDeviceIndices: [*c]const u32,
    commandBufferCount: u32,
    pCommandBufferDeviceMasks: [*c]const u32,
    signalSemaphoreCount: u32,
    pSignalSemaphoreDeviceIndices: [*c]const u32,
};
pub const DeviceGroupSubmitInfo = struct_DeviceGroupSubmitInfo;
pub const struct_DeviceGroupBindSparseInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    resourceDeviceIndex: u32,
    memoryDeviceIndex: u32,
};
pub const DeviceGroupBindSparseInfo = struct_DeviceGroupBindSparseInfo;
pub const struct_BindBufferMemoryDeviceGroupInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    deviceIndexCount: u32,
    pDeviceIndices: [*c]const u32,
};
pub const BindBufferMemoryDeviceGroupInfo = struct_BindBufferMemoryDeviceGroupInfo;
pub const struct_BindImageMemoryDeviceGroupInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    deviceIndexCount: u32,
    pDeviceIndices: [*c]const u32,
    splitInstanceBindRegionCount: u32,
    pSplitInstanceBindRegions: [*c]const Rect2D,
};
pub const BindImageMemoryDeviceGroupInfo = struct_BindImageMemoryDeviceGroupInfo;
pub const struct_PhysicalDeviceGroupProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    physicalDeviceCount: u32,
    physicalDevices: [32]PhysicalDevice,
    subsetAllocation: Bool32,
};
pub const PhysicalDeviceGroupProperties = struct_PhysicalDeviceGroupProperties;
pub const struct_DeviceGroupDeviceCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    physicalDeviceCount: u32,
    pPhysicalDevices: [*c]const PhysicalDevice,
};
pub const DeviceGroupDeviceCreateInfo = struct_DeviceGroupDeviceCreateInfo;
pub const struct_BufferMemoryRequirementsInfo2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    buffer: Buffer,
};
pub const BufferMemoryRequirementsInfo2 = struct_BufferMemoryRequirementsInfo2;
pub const struct_ImageMemoryRequirementsInfo2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    image: Image,
};
pub const ImageMemoryRequirementsInfo2 = struct_ImageMemoryRequirementsInfo2;
pub const struct_ImageSparseMemoryRequirementsInfo2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    image: Image,
};
pub const ImageSparseMemoryRequirementsInfo2 = struct_ImageSparseMemoryRequirementsInfo2;
pub const struct_MemoryRequirements2 = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    memoryRequirements: MemoryRequirements,
};
pub const MemoryRequirements2 = struct_MemoryRequirements2;
pub const struct_SparseImageMemoryRequirements2 = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    memoryRequirements: SparseImageMemoryRequirements,
};
pub const SparseImageMemoryRequirements2 = struct_SparseImageMemoryRequirements2;
pub const struct_PhysicalDeviceFeatures2 = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    features: PhysicalDeviceFeatures,
};
pub const PhysicalDeviceFeatures2 = struct_PhysicalDeviceFeatures2;
pub const struct_PhysicalDeviceProperties2 = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    properties: PhysicalDeviceProperties,
};
pub const PhysicalDeviceProperties2 = struct_PhysicalDeviceProperties2;
pub const struct_FormatProperties2 = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    formatProperties: FormatProperties,
};
pub const FormatProperties2 = struct_FormatProperties2;
pub const struct_ImageFormatProperties2 = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    imageFormatProperties: ImageFormatProperties,
};
pub const ImageFormatProperties2 = struct_ImageFormatProperties2;
pub const struct_PhysicalDeviceImageFormatInfo2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    format: Format,
    type: ImageType,
    tiling: ImageTiling,
    usage: ImageUsageFlags,
    flags: ImageCreateFlags,
};
pub const PhysicalDeviceImageFormatInfo2 = struct_PhysicalDeviceImageFormatInfo2;
pub const struct_QueueFamilyProperties2 = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    queueFamilyProperties: QueueFamilyProperties,
};
pub const QueueFamilyProperties2 = struct_QueueFamilyProperties2;
pub const struct_PhysicalDeviceMemoryProperties2 = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    memoryProperties: PhysicalDeviceMemoryProperties,
};
pub const PhysicalDeviceMemoryProperties2 = struct_PhysicalDeviceMemoryProperties2;
pub const struct_SparseImageFormatProperties2 = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    properties: SparseImageFormatProperties,
};
pub const SparseImageFormatProperties2 = struct_SparseImageFormatProperties2;
pub const struct_PhysicalDeviceSparseImageFormatInfo2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    format: Format,
    type: ImageType,
    samples: SampleCountFlagBits,
    usage: ImageUsageFlags,
    tiling: ImageTiling,
};
pub const PhysicalDeviceSparseImageFormatInfo2 = struct_PhysicalDeviceSparseImageFormatInfo2;
pub const struct_PhysicalDevicePointClippingProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    pointClippingBehavior: PointClippingBehavior,
};
pub const PhysicalDevicePointClippingProperties = struct_PhysicalDevicePointClippingProperties;
pub const struct_InputAttachmentAspectReference = extern struct {
    subpass: u32,
    inputAttachmentIndex: u32,
    aspectMask: ImageAspectFlags,
};
pub const InputAttachmentAspectReference = struct_InputAttachmentAspectReference;
pub const struct_RenderPassInputAttachmentAspectCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    aspectReferenceCount: u32,
    pAspectReferences: [*c]const InputAttachmentAspectReference,
};
pub const RenderPassInputAttachmentAspectCreateInfo = struct_RenderPassInputAttachmentAspectCreateInfo;
pub const struct_ImageViewUsageCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    usage: ImageUsageFlags,
};
pub const ImageViewUsageCreateInfo = struct_ImageViewUsageCreateInfo;
pub const struct_PipelineTessellationDomainOriginStateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    domainOrigin: TessellationDomainOrigin,
};
pub const PipelineTessellationDomainOriginStateCreateInfo = struct_PipelineTessellationDomainOriginStateCreateInfo;
pub const struct_RenderPassMultiviewCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    subpassCount: u32,
    pViewMasks: [*c]const u32,
    dependencyCount: u32,
    pViewOffsets: [*c]const i32,
    correlationMaskCount: u32,
    pCorrelationMasks: [*c]const u32,
};
pub const RenderPassMultiviewCreateInfo = struct_RenderPassMultiviewCreateInfo;
pub const struct_PhysicalDeviceMultiviewFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    multiview: Bool32,
    multiviewGeometryShader: Bool32,
    multiviewTessellationShader: Bool32,
};
pub const PhysicalDeviceMultiviewFeatures = struct_PhysicalDeviceMultiviewFeatures;
pub const struct_PhysicalDeviceMultiviewProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
};
pub const PhysicalDeviceMultiviewProperties = struct_PhysicalDeviceMultiviewProperties;
pub const struct_PhysicalDeviceVariablePointersFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    variablePointersStorageBuffer: Bool32,
    variablePointers: Bool32,
};
pub const PhysicalDeviceVariablePointersFeatures = struct_PhysicalDeviceVariablePointersFeatures;
pub const PhysicalDeviceVariablePointerFeatures = PhysicalDeviceVariablePointersFeatures;
pub const struct_PhysicalDeviceProtectedMemoryFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    protectedMemory: Bool32,
};
pub const PhysicalDeviceProtectedMemoryFeatures = struct_PhysicalDeviceProtectedMemoryFeatures;
pub const struct_PhysicalDeviceProtectedMemoryProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    protectedNoFault: Bool32,
};
pub const PhysicalDeviceProtectedMemoryProperties = struct_PhysicalDeviceProtectedMemoryProperties;
pub const struct_DeviceQueueInfo2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueIndex: u32,
};
pub const DeviceQueueInfo2 = struct_DeviceQueueInfo2;
pub const struct_ProtectedSubmitInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    protectedSubmit: Bool32,
};
pub const ProtectedSubmitInfo = struct_ProtectedSubmitInfo;
pub const struct_SamplerYcbcrConversionCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    format: Format,
    ycbcrModel: SamplerYcbcrModelConversion,
    ycbcrRange: SamplerYcbcrRange,
    components: ComponentMapping,
    xChromaOffset: ChromaLocation,
    yChromaOffset: ChromaLocation,
    chromaFilter: Filter,
    forceExplicitReconstruction: Bool32,
};
pub const SamplerYcbcrConversionCreateInfo = struct_SamplerYcbcrConversionCreateInfo;
pub const struct_SamplerYcbcrConversionInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    conversion: SamplerYcbcrConversion,
};
pub const SamplerYcbcrConversionInfo = struct_SamplerYcbcrConversionInfo;
pub const struct_BindImagePlaneMemoryInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    planeAspect: ImageAspectFlagBits,
};
pub const BindImagePlaneMemoryInfo = struct_BindImagePlaneMemoryInfo;
pub const struct_ImagePlaneMemoryRequirementsInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    planeAspect: ImageAspectFlagBits,
};
pub const ImagePlaneMemoryRequirementsInfo = struct_ImagePlaneMemoryRequirementsInfo;
pub const struct_PhysicalDeviceSamplerYcbcrConversionFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    samplerYcbcrConversion: Bool32,
};
pub const PhysicalDeviceSamplerYcbcrConversionFeatures = struct_PhysicalDeviceSamplerYcbcrConversionFeatures;
pub const struct_SamplerYcbcrConversionImageFormatProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    combinedImageSamplerDescriptorCount: u32,
};
pub const SamplerYcbcrConversionImageFormatProperties = struct_SamplerYcbcrConversionImageFormatProperties;
pub const struct_DescriptorUpdateTemplateEntry = extern struct {
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: DescriptorType,
    offset: usize,
    stride: usize,
};
pub const DescriptorUpdateTemplateEntry = struct_DescriptorUpdateTemplateEntry;
pub const struct_DescriptorUpdateTemplateCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DescriptorUpdateTemplateCreateFlags,
    descriptorUpdateEntryCount: u32,
    pDescriptorUpdateEntries: [*c]const DescriptorUpdateTemplateEntry,
    templateType: DescriptorUpdateTemplateType,
    descriptorSetLayout: DescriptorSetLayout,
    pipelineBindPoint: PipelineBindPoint,
    pipelineLayout: PipelineLayout,
    set: u32,
};
pub const DescriptorUpdateTemplateCreateInfo = struct_DescriptorUpdateTemplateCreateInfo;
pub const struct_ExternalMemoryProperties = extern struct {
    externalMemoryFeatures: ExternalMemoryFeatureFlags,
    exportFromImportedHandleTypes: ExternalMemoryHandleTypeFlags,
    compatibleHandleTypes: ExternalMemoryHandleTypeFlags,
};
pub const ExternalMemoryProperties = struct_ExternalMemoryProperties;
pub const struct_PhysicalDeviceExternalImageFormatInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleType: ExternalMemoryHandleTypeFlagBits,
};
pub const PhysicalDeviceExternalImageFormatInfo = struct_PhysicalDeviceExternalImageFormatInfo;
pub const struct_ExternalImageFormatProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    externalMemoryProperties: ExternalMemoryProperties,
};
pub const ExternalImageFormatProperties = struct_ExternalImageFormatProperties;
pub const struct_PhysicalDeviceExternalBufferInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: BufferCreateFlags,
    usage: BufferUsageFlags,
    handleType: ExternalMemoryHandleTypeFlagBits,
};
pub const PhysicalDeviceExternalBufferInfo = struct_PhysicalDeviceExternalBufferInfo;
pub const struct_ExternalBufferProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    externalMemoryProperties: ExternalMemoryProperties,
};
pub const ExternalBufferProperties = struct_ExternalBufferProperties;
pub const struct_PhysicalDeviceIDProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    deviceUUID: [16]u8,
    driverUUID: [16]u8,
    deviceLUID: [8]u8,
    deviceNodeMask: u32,
    deviceLUIDValid: Bool32,
};
pub const PhysicalDeviceIDProperties = struct_PhysicalDeviceIDProperties;
pub const struct_ExternalMemoryImageCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleTypes: ExternalMemoryHandleTypeFlags,
};
pub const ExternalMemoryImageCreateInfo = struct_ExternalMemoryImageCreateInfo;
pub const struct_ExternalMemoryBufferCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleTypes: ExternalMemoryHandleTypeFlags,
};
pub const ExternalMemoryBufferCreateInfo = struct_ExternalMemoryBufferCreateInfo;
pub const struct_ExportMemoryAllocateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleTypes: ExternalMemoryHandleTypeFlags,
};
pub const ExportMemoryAllocateInfo = struct_ExportMemoryAllocateInfo;
pub const struct_PhysicalDeviceExternalFenceInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleType: ExternalFenceHandleTypeFlagBits,
};
pub const PhysicalDeviceExternalFenceInfo = struct_PhysicalDeviceExternalFenceInfo;
pub const struct_ExternalFenceProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    exportFromImportedHandleTypes: ExternalFenceHandleTypeFlags,
    compatibleHandleTypes: ExternalFenceHandleTypeFlags,
    externalFenceFeatures: ExternalFenceFeatureFlags,
};
pub const ExternalFenceProperties = struct_ExternalFenceProperties;
pub const struct_ExportFenceCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleTypes: ExternalFenceHandleTypeFlags,
};
pub const ExportFenceCreateInfo = struct_ExportFenceCreateInfo;
pub const struct_ExportSemaphoreCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleTypes: ExternalSemaphoreHandleTypeFlags,
};
pub const ExportSemaphoreCreateInfo = struct_ExportSemaphoreCreateInfo;
pub const struct_PhysicalDeviceExternalSemaphoreInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleType: ExternalSemaphoreHandleTypeFlagBits,
};
pub const PhysicalDeviceExternalSemaphoreInfo = struct_PhysicalDeviceExternalSemaphoreInfo;
pub const struct_ExternalSemaphoreProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    exportFromImportedHandleTypes: ExternalSemaphoreHandleTypeFlags,
    compatibleHandleTypes: ExternalSemaphoreHandleTypeFlags,
    externalSemaphoreFeatures: ExternalSemaphoreFeatureFlags,
};
pub const ExternalSemaphoreProperties = struct_ExternalSemaphoreProperties;
pub const struct_PhysicalDeviceMaintenance3Properties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: DeviceSize,
};
pub const PhysicalDeviceMaintenance3Properties = struct_PhysicalDeviceMaintenance3Properties;
pub const struct_DescriptorSetLayoutSupport = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    supported: Bool32,
};
pub const DescriptorSetLayoutSupport = struct_DescriptorSetLayoutSupport;
pub const struct_PhysicalDeviceShaderDrawParametersFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderDrawParameters: Bool32,
};
pub const PhysicalDeviceShaderDrawParametersFeatures = struct_PhysicalDeviceShaderDrawParametersFeatures;
pub const PhysicalDeviceShaderDrawParameterFeatures = PhysicalDeviceShaderDrawParametersFeatures;
pub const PFN_vkEnumerateInstanceVersion = ?fn ([*c]u32) callconv(.C) Result;
pub const PFN_vkBindBufferMemory2 = ?fn (Device, u32, [*c]const BindBufferMemoryInfo) callconv(.C) Result;
pub const PFN_vkBindImageMemory2 = ?fn (Device, u32, [*c]const BindImageMemoryInfo) callconv(.C) Result;
pub const PFN_vkGetDeviceGroupPeerMemoryFeatures = ?fn (Device, u32, u32, u32, [*c]PeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMask = ?fn (CommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBase = ?fn (CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDeviceGroups = ?fn (Instance, [*c]u32, [*c]PhysicalDeviceGroupProperties) callconv(.C) Result;
pub const PFN_vkGetImageMemoryRequirements2 = ?fn (Device, [*c]const ImageMemoryRequirementsInfo2, [*c]MemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2 = ?fn (Device, [*c]const BufferMemoryRequirementsInfo2, [*c]MemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2 = ?fn (Device, [*c]const ImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]SparseImageMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFeatures2 = ?fn (PhysicalDevice, [*c]PhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2 = ?fn (PhysicalDevice, [*c]PhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2 = ?fn (PhysicalDevice, Format, [*c]FormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2 = ?fn (PhysicalDevice, [*c]const PhysicalDeviceImageFormatInfo2, [*c]ImageFormatProperties2) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ?fn (PhysicalDevice, [*c]u32, [*c]QueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2 = ?fn (PhysicalDevice, [*c]PhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ?fn (PhysicalDevice, [*c]const PhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]SparseImageFormatProperties2) callconv(.C) void;
pub const PFN_vkTrimCommandPool = ?fn (Device, CommandPool, CommandPoolTrimFlags) callconv(.C) void;
pub const PFN_vkGetDeviceQueue2 = ?fn (Device, [*c]const DeviceQueueInfo2, [*c]Queue) callconv(.C) void;
pub const PFN_vkCreateSamplerYcbcrConversion = ?fn (Device, [*c]const SamplerYcbcrConversionCreateInfo, [*c]const AllocationCallbacks, [*c]SamplerYcbcrConversion) callconv(.C) Result;
pub const PFN_vkDestroySamplerYcbcrConversion = ?fn (Device, SamplerYcbcrConversion, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorUpdateTemplate = ?fn (Device, [*c]const DescriptorUpdateTemplateCreateInfo, [*c]const AllocationCallbacks, [*c]DescriptorUpdateTemplate) callconv(.C) Result;
pub const PFN_vkDestroyDescriptorUpdateTemplate = ?fn (Device, DescriptorUpdateTemplate, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplate = ?fn (Device, DescriptorSet, DescriptorUpdateTemplate, ?*const c_void) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalBufferProperties = ?fn (PhysicalDevice, [*c]const PhysicalDeviceExternalBufferInfo, [*c]ExternalBufferProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalFenceProperties = ?fn (PhysicalDevice, [*c]const PhysicalDeviceExternalFenceInfo, [*c]ExternalFenceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ?fn (PhysicalDevice, [*c]const PhysicalDeviceExternalSemaphoreInfo, [*c]ExternalSemaphoreProperties) callconv(.C) void;
pub const PFN_vkGetDescriptorSetLayoutSupport = ?fn (Device, [*c]const DescriptorSetLayoutCreateInfo, [*c]DescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkEnumerateInstanceVersion(pApiVersion: [*c]u32) Result;
pub extern fn vkBindBufferMemory2(device: Device, bindInfoCount: u32, pBindInfos: [*c]const BindBufferMemoryInfo) Result;
pub extern fn vkBindImageMemory2(device: Device, bindInfoCount: u32, pBindInfos: [*c]const BindImageMemoryInfo) Result;
pub extern fn vkGetDeviceGroupPeerMemoryFeatures(device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]PeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMask(commandBuffer: CommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBase(commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkEnumeratePhysicalDeviceGroups(instance: Instance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]PhysicalDeviceGroupProperties) Result;
pub extern fn vkGetImageMemoryRequirements2(device: Device, pInfo: [*c]const ImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]MemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2(device: Device, pInfo: [*c]const BufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]MemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2(device: Device, pInfo: [*c]const ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]SparseImageMemoryRequirements2) void;
pub extern fn vkGetPhysicalDeviceFeatures2(physicalDevice: PhysicalDevice, pFeatures: [*c]PhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2(physicalDevice: PhysicalDevice, pProperties: [*c]PhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2(physicalDevice: PhysicalDevice, format: Format, pFormatProperties: [*c]FormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: PhysicalDevice, pImageFormatInfo: [*c]const PhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]ImageFormatProperties2) Result;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]QueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2(physicalDevice: PhysicalDevice, pMemoryProperties: [*c]PhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: PhysicalDevice, pFormatInfo: [*c]const PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]SparseImageFormatProperties2) void;
pub extern fn vkTrimCommandPool(device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags) void;
pub extern fn vkGetDeviceQueue2(device: Device, pQueueInfo: [*c]const DeviceQueueInfo2, pQueue: [*c]Queue) void;
pub extern fn vkCreateSamplerYcbcrConversion(device: Device, pCreateInfo: [*c]const SamplerYcbcrConversionCreateInfo, pAllocator: [*c]const AllocationCallbacks, pYcbcrConversion: [*c]SamplerYcbcrConversion) Result;
pub extern fn vkDestroySamplerYcbcrConversion(device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkCreateDescriptorUpdateTemplate(device: Device, pCreateInfo: [*c]const DescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const AllocationCallbacks, pDescriptorUpdateTemplate: [*c]DescriptorUpdateTemplate) Result;
pub extern fn vkDestroyDescriptorUpdateTemplate(device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplate(device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: ?*const c_void) void;
pub extern fn vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: PhysicalDevice, pExternalBufferInfo: [*c]const PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]ExternalBufferProperties) void;
pub extern fn vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: PhysicalDevice, pExternalFenceInfo: [*c]const PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]ExternalFenceProperties) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: [*c]const PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]ExternalSemaphoreProperties) void;
pub extern fn vkGetDescriptorSetLayoutSupport(device: Device, pCreateInfo: [*c]const DescriptorSetLayoutCreateInfo, pSupport: [*c]DescriptorSetLayoutSupport) void;
pub const DRIVER_ID_AMD_PROPRIETARY = @enumToInt(enum_DriverId.DRIVER_ID_AMD_PROPRIETARY);
pub const DRIVER_ID_AMD_OPEN_SOURCE = @enumToInt(enum_DriverId.DRIVER_ID_AMD_OPEN_SOURCE);
pub const DRIVER_ID_MESA_RADV = @enumToInt(enum_DriverId.DRIVER_ID_MESA_RADV);
pub const DRIVER_ID_NVIDIA_PROPRIETARY = @enumToInt(enum_DriverId.DRIVER_ID_NVIDIA_PROPRIETARY);
pub const DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = @enumToInt(enum_DriverId.DRIVER_ID_INTEL_PROPRIETARY_WINDOWS);
pub const DRIVER_ID_INTEL_OPEN_SOURCE_MESA = @enumToInt(enum_DriverId.DRIVER_ID_INTEL_OPEN_SOURCE_MESA);
pub const DRIVER_ID_IMAGINATION_PROPRIETARY = @enumToInt(enum_DriverId.DRIVER_ID_IMAGINATION_PROPRIETARY);
pub const DRIVER_ID_QUALCOMM_PROPRIETARY = @enumToInt(enum_DriverId.DRIVER_ID_QUALCOMM_PROPRIETARY);
pub const DRIVER_ID_ARM_PROPRIETARY = @enumToInt(enum_DriverId.DRIVER_ID_ARM_PROPRIETARY);
pub const DRIVER_ID_GOOGLE_SWIFTSHADER = @enumToInt(enum_DriverId.DRIVER_ID_GOOGLE_SWIFTSHADER);
pub const DRIVER_ID_GGP_PROPRIETARY = @enumToInt(enum_DriverId.DRIVER_ID_GGP_PROPRIETARY);
pub const DRIVER_ID_BROADCOM_PROPRIETARY = @enumToInt(enum_DriverId.DRIVER_ID_BROADCOM_PROPRIETARY);
pub const DRIVER_ID_MESA_LLVMPIPE = @enumToInt(enum_DriverId.DRIVER_ID_MESA_LLVMPIPE);
pub const DRIVER_ID_MOLTENVK = @enumToInt(enum_DriverId.DRIVER_ID_MOLTENVK);
pub const DRIVER_ID_AMD_PROPRIETARY_KHR = @enumToInt(enum_DriverId.DRIVER_ID_AMD_PROPRIETARY_KHR);
pub const DRIVER_ID_AMD_OPEN_SOURCE_KHR = @enumToInt(enum_DriverId.DRIVER_ID_AMD_OPEN_SOURCE_KHR);
pub const DRIVER_ID_MESA_RADV_KHR = @enumToInt(enum_DriverId.DRIVER_ID_MESA_RADV_KHR);
pub const DRIVER_ID_NVIDIA_PROPRIETARY_KHR = @enumToInt(enum_DriverId.DRIVER_ID_NVIDIA_PROPRIETARY_KHR);
pub const DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = @enumToInt(enum_DriverId.DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR);
pub const DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = @enumToInt(enum_DriverId.DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR);
pub const DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = @enumToInt(enum_DriverId.DRIVER_ID_IMAGINATION_PROPRIETARY_KHR);
pub const DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = @enumToInt(enum_DriverId.DRIVER_ID_QUALCOMM_PROPRIETARY_KHR);
pub const DRIVER_ID_ARM_PROPRIETARY_KHR = @enumToInt(enum_DriverId.DRIVER_ID_ARM_PROPRIETARY_KHR);
pub const DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = @enumToInt(enum_DriverId.DRIVER_ID_GOOGLE_SWIFTSHADER_KHR);
pub const DRIVER_ID_GGP_PROPRIETARY_KHR = @enumToInt(enum_DriverId.DRIVER_ID_GGP_PROPRIETARY_KHR);
pub const DRIVER_ID_BROADCOM_PROPRIETARY_KHR = @enumToInt(enum_DriverId.DRIVER_ID_BROADCOM_PROPRIETARY_KHR);
pub const DRIVER_ID_MAX_ENUM = @enumToInt(enum_DriverId.DRIVER_ID_MAX_ENUM);
pub const enum_DriverId = extern enum(c_int) {
    DRIVER_ID_AMD_PROPRIETARY = 1,
    DRIVER_ID_AMD_OPEN_SOURCE = 2,
    DRIVER_ID_MESA_RADV = 3,
    DRIVER_ID_NVIDIA_PROPRIETARY = 4,
    DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
    DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
    DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
    DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
    DRIVER_ID_ARM_PROPRIETARY = 9,
    DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
    DRIVER_ID_GGP_PROPRIETARY = 11,
    DRIVER_ID_BROADCOM_PROPRIETARY = 12,
    DRIVER_ID_MESA_LLVMPIPE = 13,
    DRIVER_ID_MOLTENVK = 14,
    DRIVER_ID_AMD_PROPRIETARY_KHR = 1,
    DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2,
    DRIVER_ID_MESA_RADV_KHR = 3,
    DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4,
    DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5,
    DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6,
    DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7,
    DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8,
    DRIVER_ID_ARM_PROPRIETARY_KHR = 9,
    DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10,
    DRIVER_ID_GGP_PROPRIETARY_KHR = 11,
    DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12,
    DRIVER_ID_MAX_ENUM = 2147483647,
    _,
};
pub const DriverId = enum_DriverId;
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = @enumToInt(enum_ShaderFloatControlsIndependence.SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY);
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = @enumToInt(enum_ShaderFloatControlsIndependence.SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL);
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = @enumToInt(enum_ShaderFloatControlsIndependence.SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE);
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = @enumToInt(enum_ShaderFloatControlsIndependence.SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR);
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = @enumToInt(enum_ShaderFloatControlsIndependence.SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR);
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = @enumToInt(enum_ShaderFloatControlsIndependence.SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR);
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = @enumToInt(enum_ShaderFloatControlsIndependence.SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM);
pub const enum_ShaderFloatControlsIndependence = extern enum(c_int) {
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647,
    _,
};
pub const ShaderFloatControlsIndependence = enum_ShaderFloatControlsIndependence;
pub const SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = @enumToInt(enum_SamplerReductionMode.SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE);
pub const SAMPLER_REDUCTION_MODE_MIN = @enumToInt(enum_SamplerReductionMode.SAMPLER_REDUCTION_MODE_MIN);
pub const SAMPLER_REDUCTION_MODE_MAX = @enumToInt(enum_SamplerReductionMode.SAMPLER_REDUCTION_MODE_MAX);
pub const SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = @enumToInt(enum_SamplerReductionMode.SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT);
pub const SAMPLER_REDUCTION_MODE_MIN_EXT = @enumToInt(enum_SamplerReductionMode.SAMPLER_REDUCTION_MODE_MIN_EXT);
pub const SAMPLER_REDUCTION_MODE_MAX_EXT = @enumToInt(enum_SamplerReductionMode.SAMPLER_REDUCTION_MODE_MAX_EXT);
pub const SAMPLER_REDUCTION_MODE_MAX_ENUM = @enumToInt(enum_SamplerReductionMode.SAMPLER_REDUCTION_MODE_MAX_ENUM);
pub const enum_SamplerReductionMode = extern enum(c_int) {
    SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
    SAMPLER_REDUCTION_MODE_MIN = 1,
    SAMPLER_REDUCTION_MODE_MAX = 2,
    SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0,
    SAMPLER_REDUCTION_MODE_MIN_EXT = 1,
    SAMPLER_REDUCTION_MODE_MAX_EXT = 2,
    SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647,
    _,
};
pub const SamplerReductionMode = enum_SamplerReductionMode;
pub const SEMAPHORE_TYPE_BINARY = @enumToInt(enum_SemaphoreType.SEMAPHORE_TYPE_BINARY);
pub const SEMAPHORE_TYPE_TIMELINE = @enumToInt(enum_SemaphoreType.SEMAPHORE_TYPE_TIMELINE);
pub const SEMAPHORE_TYPE_BINARY_KHR = @enumToInt(enum_SemaphoreType.SEMAPHORE_TYPE_BINARY_KHR);
pub const SEMAPHORE_TYPE_TIMELINE_KHR = @enumToInt(enum_SemaphoreType.SEMAPHORE_TYPE_TIMELINE_KHR);
pub const SEMAPHORE_TYPE_MAX_ENUM = @enumToInt(enum_SemaphoreType.SEMAPHORE_TYPE_MAX_ENUM);
pub const enum_SemaphoreType = extern enum(c_int) {
    SEMAPHORE_TYPE_BINARY = 0,
    SEMAPHORE_TYPE_TIMELINE = 1,
    SEMAPHORE_TYPE_BINARY_KHR = 0,
    SEMAPHORE_TYPE_TIMELINE_KHR = 1,
    SEMAPHORE_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const SemaphoreType = enum_SemaphoreType;
pub const RESOLVE_MODE_NONE = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_NONE);
pub const RESOLVE_MODE_SAMPLE_ZERO_BIT = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_SAMPLE_ZERO_BIT);
pub const RESOLVE_MODE_AVERAGE_BIT = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_AVERAGE_BIT);
pub const RESOLVE_MODE_MIN_BIT = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_MIN_BIT);
pub const RESOLVE_MODE_MAX_BIT = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_MAX_BIT);
pub const RESOLVE_MODE_NONE_KHR = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_NONE_KHR);
pub const RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR);
pub const RESOLVE_MODE_AVERAGE_BIT_KHR = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_AVERAGE_BIT_KHR);
pub const RESOLVE_MODE_MIN_BIT_KHR = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_MIN_BIT_KHR);
pub const RESOLVE_MODE_MAX_BIT_KHR = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_MAX_BIT_KHR);
pub const RESOLVE_MODE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_ResolveModeFlagBits.RESOLVE_MODE_FLAG_BITS_MAX_ENUM);
pub const enum_ResolveModeFlagBits = extern enum(c_int) {
    RESOLVE_MODE_NONE = 0,
    RESOLVE_MODE_SAMPLE_ZERO_BIT = 1,
    RESOLVE_MODE_AVERAGE_BIT = 2,
    RESOLVE_MODE_MIN_BIT = 4,
    RESOLVE_MODE_MAX_BIT = 8,
    RESOLVE_MODE_NONE_KHR = 0,
    RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1,
    RESOLVE_MODE_AVERAGE_BIT_KHR = 2,
    RESOLVE_MODE_MIN_BIT_KHR = 4,
    RESOLVE_MODE_MAX_BIT_KHR = 8,
    RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const ResolveModeFlagBits = enum_ResolveModeFlagBits;
pub const ResolveModeFlags = Flags;
pub const DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = @enumToInt(enum_DescriptorBindingFlagBits.DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT);
pub const DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = @enumToInt(enum_DescriptorBindingFlagBits.DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT);
pub const DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = @enumToInt(enum_DescriptorBindingFlagBits.DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT);
pub const DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = @enumToInt(enum_DescriptorBindingFlagBits.DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT);
pub const DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = @enumToInt(enum_DescriptorBindingFlagBits.DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT);
pub const DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = @enumToInt(enum_DescriptorBindingFlagBits.DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT);
pub const DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = @enumToInt(enum_DescriptorBindingFlagBits.DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT);
pub const DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = @enumToInt(enum_DescriptorBindingFlagBits.DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT);
pub const DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = @enumToInt(enum_DescriptorBindingFlagBits.DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM);
pub const enum_DescriptorBindingFlagBits = extern enum(c_int) {
    DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1,
    DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2,
    DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4,
    DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8,
    DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1,
    DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2,
    DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4,
    DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8,
    DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const DescriptorBindingFlagBits = enum_DescriptorBindingFlagBits;
pub const DescriptorBindingFlags = Flags;
pub const SEMAPHORE_WAIT_ANY_BIT = @enumToInt(enum_SemaphoreWaitFlagBits.SEMAPHORE_WAIT_ANY_BIT);
pub const SEMAPHORE_WAIT_ANY_BIT_KHR = @enumToInt(enum_SemaphoreWaitFlagBits.SEMAPHORE_WAIT_ANY_BIT_KHR);
pub const SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_SemaphoreWaitFlagBits.SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM);
pub const enum_SemaphoreWaitFlagBits = extern enum(c_int) {
    SEMAPHORE_WAIT_ANY_BIT = 1,
    SEMAPHORE_WAIT_ANY_BIT_KHR = 1,
    SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const SemaphoreWaitFlagBits = enum_SemaphoreWaitFlagBits;
pub const SemaphoreWaitFlags = Flags;
pub const struct_PhysicalDeviceVulkan11Features = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    storageBuffer16BitAccess: Bool32,
    uniformAndStorageBuffer16BitAccess: Bool32,
    storagePushConstant16: Bool32,
    storageInputOutput16: Bool32,
    multiview: Bool32,
    multiviewGeometryShader: Bool32,
    multiviewTessellationShader: Bool32,
    variablePointersStorageBuffer: Bool32,
    variablePointers: Bool32,
    protectedMemory: Bool32,
    samplerYcbcrConversion: Bool32,
    shaderDrawParameters: Bool32,
};
pub const PhysicalDeviceVulkan11Features = struct_PhysicalDeviceVulkan11Features;
pub const struct_PhysicalDeviceVulkan11Properties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    deviceUUID: [16]u8,
    driverUUID: [16]u8,
    deviceLUID: [8]u8,
    deviceNodeMask: u32,
    deviceLUIDValid: Bool32,
    subgroupSize: u32,
    subgroupSupportedStages: ShaderStageFlags,
    subgroupSupportedOperations: SubgroupFeatureFlags,
    subgroupQuadOperationsInAllStages: Bool32,
    pointClippingBehavior: PointClippingBehavior,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
    protectedNoFault: Bool32,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: DeviceSize,
};
pub const PhysicalDeviceVulkan11Properties = struct_PhysicalDeviceVulkan11Properties;
pub const struct_PhysicalDeviceVulkan12Features = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    samplerMirrorClampToEdge: Bool32,
    drawIndirectCount: Bool32,
    storageBuffer8BitAccess: Bool32,
    uniformAndStorageBuffer8BitAccess: Bool32,
    storagePushConstant8: Bool32,
    shaderBufferInt64Atomics: Bool32,
    shaderSharedInt64Atomics: Bool32,
    shaderFloat16: Bool32,
    shaderInt8: Bool32,
    descriptorIndexing: Bool32,
    shaderInputAttachmentArrayDynamicIndexing: Bool32,
    shaderUniformTexelBufferArrayDynamicIndexing: Bool32,
    shaderStorageTexelBufferArrayDynamicIndexing: Bool32,
    shaderUniformBufferArrayNonUniformIndexing: Bool32,
    shaderSampledImageArrayNonUniformIndexing: Bool32,
    shaderStorageBufferArrayNonUniformIndexing: Bool32,
    shaderStorageImageArrayNonUniformIndexing: Bool32,
    shaderInputAttachmentArrayNonUniformIndexing: Bool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: Bool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: Bool32,
    descriptorBindingUniformBufferUpdateAfterBind: Bool32,
    descriptorBindingSampledImageUpdateAfterBind: Bool32,
    descriptorBindingStorageImageUpdateAfterBind: Bool32,
    descriptorBindingStorageBufferUpdateAfterBind: Bool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: Bool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: Bool32,
    descriptorBindingUpdateUnusedWhilePending: Bool32,
    descriptorBindingPartiallyBound: Bool32,
    descriptorBindingVariableDescriptorCount: Bool32,
    runtimeDescriptorArray: Bool32,
    samplerFilterMinmax: Bool32,
    scalarBlockLayout: Bool32,
    imagelessFramebuffer: Bool32,
    uniformBufferStandardLayout: Bool32,
    shaderSubgroupExtendedTypes: Bool32,
    separateDepthStencilLayouts: Bool32,
    hostQueryReset: Bool32,
    timelineSemaphore: Bool32,
    bufferDeviceAddress: Bool32,
    bufferDeviceAddressCaptureReplay: Bool32,
    bufferDeviceAddressMultiDevice: Bool32,
    vulkanMemoryModel: Bool32,
    vulkanMemoryModelDeviceScope: Bool32,
    vulkanMemoryModelAvailabilityVisibilityChains: Bool32,
    shaderOutputViewportIndex: Bool32,
    shaderOutputLayer: Bool32,
    subgroupBroadcastDynamicId: Bool32,
};
pub const PhysicalDeviceVulkan12Features = struct_PhysicalDeviceVulkan12Features;
pub const struct_ConformanceVersion = extern struct {
    major: u8,
    minor: u8,
    subminor: u8,
    patch: u8,
};
pub const ConformanceVersion = struct_ConformanceVersion;
pub const struct_PhysicalDeviceVulkan12Properties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    driverID: DriverId,
    driverName: [256]u8,
    driverInfo: [256]u8,
    conformanceVersion: ConformanceVersion,
    denormBehaviorIndependence: ShaderFloatControlsIndependence,
    roundingModeIndependence: ShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: Bool32,
    shaderSignedZeroInfNanPreserveFloat32: Bool32,
    shaderSignedZeroInfNanPreserveFloat64: Bool32,
    shaderDenormPreserveFloat16: Bool32,
    shaderDenormPreserveFloat32: Bool32,
    shaderDenormPreserveFloat64: Bool32,
    shaderDenormFlushToZeroFloat16: Bool32,
    shaderDenormFlushToZeroFloat32: Bool32,
    shaderDenormFlushToZeroFloat64: Bool32,
    shaderRoundingModeRTEFloat16: Bool32,
    shaderRoundingModeRTEFloat32: Bool32,
    shaderRoundingModeRTEFloat64: Bool32,
    shaderRoundingModeRTZFloat16: Bool32,
    shaderRoundingModeRTZFloat32: Bool32,
    shaderRoundingModeRTZFloat64: Bool32,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: Bool32,
    shaderSampledImageArrayNonUniformIndexingNative: Bool32,
    shaderStorageBufferArrayNonUniformIndexingNative: Bool32,
    shaderStorageImageArrayNonUniformIndexingNative: Bool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: Bool32,
    robustBufferAccessUpdateAfterBind: Bool32,
    quadDivergentImplicitLod: Bool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
    supportedDepthResolveModes: ResolveModeFlags,
    supportedStencilResolveModes: ResolveModeFlags,
    independentResolveNone: Bool32,
    independentResolve: Bool32,
    filterMinmaxSingleComponentFormats: Bool32,
    filterMinmaxImageComponentMapping: Bool32,
    maxTimelineSemaphoreValueDifference: u64,
    framebufferIntegerColorSampleCounts: SampleCountFlags,
};
pub const PhysicalDeviceVulkan12Properties = struct_PhysicalDeviceVulkan12Properties;
pub const struct_ImageFormatListCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    viewFormatCount: u32,
    pViewFormats: [*c]const Format,
};
pub const ImageFormatListCreateInfo = struct_ImageFormatListCreateInfo;
pub const struct_AttachmentDescription2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: AttachmentDescriptionFlags,
    format: Format,
    samples: SampleCountFlagBits,
    loadOp: AttachmentLoadOp,
    storeOp: AttachmentStoreOp,
    stencilLoadOp: AttachmentLoadOp,
    stencilStoreOp: AttachmentStoreOp,
    initialLayout: ImageLayout,
    finalLayout: ImageLayout,
};
pub const AttachmentDescription2 = struct_AttachmentDescription2;
pub const struct_AttachmentReference2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    attachment: u32,
    layout: ImageLayout,
    aspectMask: ImageAspectFlags,
};
pub const AttachmentReference2 = struct_AttachmentReference2;
pub const struct_SubpassDescription2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: SubpassDescriptionFlags,
    pipelineBindPoint: PipelineBindPoint,
    viewMask: u32,
    inputAttachmentCount: u32,
    pInputAttachments: [*c]const AttachmentReference2,
    colorAttachmentCount: u32,
    pColorAttachments: [*c]const AttachmentReference2,
    pResolveAttachments: [*c]const AttachmentReference2,
    pDepthStencilAttachment: [*c]const AttachmentReference2,
    preserveAttachmentCount: u32,
    pPreserveAttachments: [*c]const u32,
};
pub const SubpassDescription2 = struct_SubpassDescription2;
pub const struct_SubpassDependency2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: PipelineStageFlags,
    dstStageMask: PipelineStageFlags,
    srcAccessMask: AccessFlags,
    dstAccessMask: AccessFlags,
    dependencyFlags: DependencyFlags,
    viewOffset: i32,
};
pub const SubpassDependency2 = struct_SubpassDependency2;
pub const struct_RenderPassCreateInfo2 = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: RenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: [*c]const AttachmentDescription2,
    subpassCount: u32,
    pSubpasses: [*c]const SubpassDescription2,
    dependencyCount: u32,
    pDependencies: [*c]const SubpassDependency2,
    correlatedViewMaskCount: u32,
    pCorrelatedViewMasks: [*c]const u32,
};
pub const RenderPassCreateInfo2 = struct_RenderPassCreateInfo2;
pub const struct_SubpassBeginInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    contents: SubpassContents,
};
pub const SubpassBeginInfo = struct_SubpassBeginInfo;
pub const struct_SubpassEndInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
};
pub const SubpassEndInfo = struct_SubpassEndInfo;
pub const struct_PhysicalDevice8BitStorageFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    storageBuffer8BitAccess: Bool32,
    uniformAndStorageBuffer8BitAccess: Bool32,
    storagePushConstant8: Bool32,
};
pub const PhysicalDevice8BitStorageFeatures = struct_PhysicalDevice8BitStorageFeatures;
pub const struct_PhysicalDeviceDriverProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    driverID: DriverId,
    driverName: [256]u8,
    driverInfo: [256]u8,
    conformanceVersion: ConformanceVersion,
};
pub const PhysicalDeviceDriverProperties = struct_PhysicalDeviceDriverProperties;
pub const struct_PhysicalDeviceShaderAtomicInt64Features = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderBufferInt64Atomics: Bool32,
    shaderSharedInt64Atomics: Bool32,
};
pub const PhysicalDeviceShaderAtomicInt64Features = struct_PhysicalDeviceShaderAtomicInt64Features;
pub const struct_PhysicalDeviceShaderFloat16Int8Features = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderFloat16: Bool32,
    shaderInt8: Bool32,
};
pub const PhysicalDeviceShaderFloat16Int8Features = struct_PhysicalDeviceShaderFloat16Int8Features;
pub const struct_PhysicalDeviceFloatControlsProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    denormBehaviorIndependence: ShaderFloatControlsIndependence,
    roundingModeIndependence: ShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: Bool32,
    shaderSignedZeroInfNanPreserveFloat32: Bool32,
    shaderSignedZeroInfNanPreserveFloat64: Bool32,
    shaderDenormPreserveFloat16: Bool32,
    shaderDenormPreserveFloat32: Bool32,
    shaderDenormPreserveFloat64: Bool32,
    shaderDenormFlushToZeroFloat16: Bool32,
    shaderDenormFlushToZeroFloat32: Bool32,
    shaderDenormFlushToZeroFloat64: Bool32,
    shaderRoundingModeRTEFloat16: Bool32,
    shaderRoundingModeRTEFloat32: Bool32,
    shaderRoundingModeRTEFloat64: Bool32,
    shaderRoundingModeRTZFloat16: Bool32,
    shaderRoundingModeRTZFloat32: Bool32,
    shaderRoundingModeRTZFloat64: Bool32,
};
pub const PhysicalDeviceFloatControlsProperties = struct_PhysicalDeviceFloatControlsProperties;
pub const struct_DescriptorSetLayoutBindingFlagsCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    bindingCount: u32,
    pBindingFlags: [*c]const DescriptorBindingFlags,
};
pub const DescriptorSetLayoutBindingFlagsCreateInfo = struct_DescriptorSetLayoutBindingFlagsCreateInfo;
pub const struct_PhysicalDeviceDescriptorIndexingFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderInputAttachmentArrayDynamicIndexing: Bool32,
    shaderUniformTexelBufferArrayDynamicIndexing: Bool32,
    shaderStorageTexelBufferArrayDynamicIndexing: Bool32,
    shaderUniformBufferArrayNonUniformIndexing: Bool32,
    shaderSampledImageArrayNonUniformIndexing: Bool32,
    shaderStorageBufferArrayNonUniformIndexing: Bool32,
    shaderStorageImageArrayNonUniformIndexing: Bool32,
    shaderInputAttachmentArrayNonUniformIndexing: Bool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: Bool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: Bool32,
    descriptorBindingUniformBufferUpdateAfterBind: Bool32,
    descriptorBindingSampledImageUpdateAfterBind: Bool32,
    descriptorBindingStorageImageUpdateAfterBind: Bool32,
    descriptorBindingStorageBufferUpdateAfterBind: Bool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: Bool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: Bool32,
    descriptorBindingUpdateUnusedWhilePending: Bool32,
    descriptorBindingPartiallyBound: Bool32,
    descriptorBindingVariableDescriptorCount: Bool32,
    runtimeDescriptorArray: Bool32,
};
pub const PhysicalDeviceDescriptorIndexingFeatures = struct_PhysicalDeviceDescriptorIndexingFeatures;
pub const struct_PhysicalDeviceDescriptorIndexingProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: Bool32,
    shaderSampledImageArrayNonUniformIndexingNative: Bool32,
    shaderStorageBufferArrayNonUniformIndexingNative: Bool32,
    shaderStorageImageArrayNonUniformIndexingNative: Bool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: Bool32,
    robustBufferAccessUpdateAfterBind: Bool32,
    quadDivergentImplicitLod: Bool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
};
pub const PhysicalDeviceDescriptorIndexingProperties = struct_PhysicalDeviceDescriptorIndexingProperties;
pub const struct_DescriptorSetVariableDescriptorCountAllocateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    descriptorSetCount: u32,
    pDescriptorCounts: [*c]const u32,
};
pub const DescriptorSetVariableDescriptorCountAllocateInfo = struct_DescriptorSetVariableDescriptorCountAllocateInfo;
pub const struct_DescriptorSetVariableDescriptorCountLayoutSupport = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxVariableDescriptorCount: u32,
};
pub const DescriptorSetVariableDescriptorCountLayoutSupport = struct_DescriptorSetVariableDescriptorCountLayoutSupport;
pub const struct_SubpassDescriptionDepthStencilResolve = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    depthResolveMode: ResolveModeFlagBits,
    stencilResolveMode: ResolveModeFlagBits,
    pDepthStencilResolveAttachment: [*c]const AttachmentReference2,
};
pub const SubpassDescriptionDepthStencilResolve = struct_SubpassDescriptionDepthStencilResolve;
pub const struct_PhysicalDeviceDepthStencilResolveProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    supportedDepthResolveModes: ResolveModeFlags,
    supportedStencilResolveModes: ResolveModeFlags,
    independentResolveNone: Bool32,
    independentResolve: Bool32,
};
pub const PhysicalDeviceDepthStencilResolveProperties = struct_PhysicalDeviceDepthStencilResolveProperties;
pub const struct_PhysicalDeviceScalarBlockLayoutFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    scalarBlockLayout: Bool32,
};
pub const PhysicalDeviceScalarBlockLayoutFeatures = struct_PhysicalDeviceScalarBlockLayoutFeatures;
pub const struct_ImageStencilUsageCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    stencilUsage: ImageUsageFlags,
};
pub const ImageStencilUsageCreateInfo = struct_ImageStencilUsageCreateInfo;
pub const struct_SamplerReductionModeCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    reductionMode: SamplerReductionMode,
};
pub const SamplerReductionModeCreateInfo = struct_SamplerReductionModeCreateInfo;
pub const struct_PhysicalDeviceSamplerFilterMinmaxProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    filterMinmaxSingleComponentFormats: Bool32,
    filterMinmaxImageComponentMapping: Bool32,
};
pub const PhysicalDeviceSamplerFilterMinmaxProperties = struct_PhysicalDeviceSamplerFilterMinmaxProperties;
pub const struct_PhysicalDeviceVulkanMemoryModelFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    vulkanMemoryModel: Bool32,
    vulkanMemoryModelDeviceScope: Bool32,
    vulkanMemoryModelAvailabilityVisibilityChains: Bool32,
};
pub const PhysicalDeviceVulkanMemoryModelFeatures = struct_PhysicalDeviceVulkanMemoryModelFeatures;
pub const struct_PhysicalDeviceImagelessFramebufferFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    imagelessFramebuffer: Bool32,
};
pub const PhysicalDeviceImagelessFramebufferFeatures = struct_PhysicalDeviceImagelessFramebufferFeatures;
pub const struct_FramebufferAttachmentImageInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: ImageCreateFlags,
    usage: ImageUsageFlags,
    width: u32,
    height: u32,
    layerCount: u32,
    viewFormatCount: u32,
    pViewFormats: [*c]const Format,
};
pub const FramebufferAttachmentImageInfo = struct_FramebufferAttachmentImageInfo;
pub const struct_FramebufferAttachmentsCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    attachmentImageInfoCount: u32,
    pAttachmentImageInfos: [*c]const FramebufferAttachmentImageInfo,
};
pub const FramebufferAttachmentsCreateInfo = struct_FramebufferAttachmentsCreateInfo;
pub const struct_RenderPassAttachmentBeginInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    attachmentCount: u32,
    pAttachments: [*c]const ImageView,
};
pub const RenderPassAttachmentBeginInfo = struct_RenderPassAttachmentBeginInfo;
pub const struct_PhysicalDeviceUniformBufferStandardLayoutFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    uniformBufferStandardLayout: Bool32,
};
pub const PhysicalDeviceUniformBufferStandardLayoutFeatures = struct_PhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const struct_PhysicalDeviceShaderSubgroupExtendedTypesFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderSubgroupExtendedTypes: Bool32,
};
pub const PhysicalDeviceShaderSubgroupExtendedTypesFeatures = struct_PhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const struct_PhysicalDeviceSeparateDepthStencilLayoutsFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    separateDepthStencilLayouts: Bool32,
};
pub const PhysicalDeviceSeparateDepthStencilLayoutsFeatures = struct_PhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const struct_AttachmentReferenceStencilLayout = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    stencilLayout: ImageLayout,
};
pub const AttachmentReferenceStencilLayout = struct_AttachmentReferenceStencilLayout;
pub const struct_AttachmentDescriptionStencilLayout = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    stencilInitialLayout: ImageLayout,
    stencilFinalLayout: ImageLayout,
};
pub const AttachmentDescriptionStencilLayout = struct_AttachmentDescriptionStencilLayout;
pub const struct_PhysicalDeviceHostQueryResetFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    hostQueryReset: Bool32,
};
pub const PhysicalDeviceHostQueryResetFeatures = struct_PhysicalDeviceHostQueryResetFeatures;
pub const struct_PhysicalDeviceTimelineSemaphoreFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    timelineSemaphore: Bool32,
};
pub const PhysicalDeviceTimelineSemaphoreFeatures = struct_PhysicalDeviceTimelineSemaphoreFeatures;
pub const struct_PhysicalDeviceTimelineSemaphoreProperties = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxTimelineSemaphoreValueDifference: u64,
};
pub const PhysicalDeviceTimelineSemaphoreProperties = struct_PhysicalDeviceTimelineSemaphoreProperties;
pub const struct_SemaphoreTypeCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    semaphoreType: SemaphoreType,
    initialValue: u64,
};
pub const SemaphoreTypeCreateInfo = struct_SemaphoreTypeCreateInfo;
pub const struct_TimelineSemaphoreSubmitInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    waitSemaphoreValueCount: u32,
    pWaitSemaphoreValues: [*c]const u64,
    signalSemaphoreValueCount: u32,
    pSignalSemaphoreValues: [*c]const u64,
};
pub const TimelineSemaphoreSubmitInfo = struct_TimelineSemaphoreSubmitInfo;
pub const struct_SemaphoreWaitInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: SemaphoreWaitFlags,
    semaphoreCount: u32,
    pSemaphores: [*c]const Semaphore,
    pValues: [*c]const u64,
};
pub const SemaphoreWaitInfo = struct_SemaphoreWaitInfo;
pub const struct_SemaphoreSignalInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    semaphore: Semaphore,
    value: u64,
};
pub const SemaphoreSignalInfo = struct_SemaphoreSignalInfo;
pub const struct_PhysicalDeviceBufferDeviceAddressFeatures = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    bufferDeviceAddress: Bool32,
    bufferDeviceAddressCaptureReplay: Bool32,
    bufferDeviceAddressMultiDevice: Bool32,
};
pub const PhysicalDeviceBufferDeviceAddressFeatures = struct_PhysicalDeviceBufferDeviceAddressFeatures;
pub const struct_BufferDeviceAddressInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    buffer: Buffer,
};
pub const BufferDeviceAddressInfo = struct_BufferDeviceAddressInfo;
pub const struct_BufferOpaqueCaptureAddressCreateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    opaqueCaptureAddress: u64,
};
pub const BufferOpaqueCaptureAddressCreateInfo = struct_BufferOpaqueCaptureAddressCreateInfo;
pub const struct_MemoryOpaqueCaptureAddressAllocateInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    opaqueCaptureAddress: u64,
};
pub const MemoryOpaqueCaptureAddressAllocateInfo = struct_MemoryOpaqueCaptureAddressAllocateInfo;
pub const struct_DeviceMemoryOpaqueCaptureAddressInfo = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    memory: DeviceMemory,
};
pub const DeviceMemoryOpaqueCaptureAddressInfo = struct_DeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkCmdDrawIndirectCount = ?fn (CommandBuffer, Buffer, DeviceSize, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCount = ?fn (CommandBuffer, Buffer, DeviceSize, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRenderPass2 = ?fn (Device, [*c]const RenderPassCreateInfo2, [*c]const AllocationCallbacks, [*c]RenderPass) callconv(.C) Result;
pub const PFN_vkCmdBeginRenderPass2 = ?fn (CommandBuffer, [*c]const RenderPassBeginInfo, [*c]const SubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2 = ?fn (CommandBuffer, [*c]const SubpassBeginInfo, [*c]const SubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2 = ?fn (CommandBuffer, [*c]const SubpassEndInfo) callconv(.C) void;
pub const PFN_vkResetQueryPool = ?fn (Device, QueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkGetSemaphoreCounterValue = ?fn (Device, Semaphore, [*c]u64) callconv(.C) Result;
pub const PFN_vkWaitSemaphores = ?fn (Device, [*c]const SemaphoreWaitInfo, u64) callconv(.C) Result;
pub const PFN_vkSignalSemaphore = ?fn (Device, [*c]const SemaphoreSignalInfo) callconv(.C) Result;
pub const PFN_vkGetBufferDeviceAddress = ?fn (Device, [*c]const BufferDeviceAddressInfo) callconv(.C) DeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddress = ?fn (Device, [*c]const BufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ?fn (Device, [*c]const DeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub extern fn vkCmdDrawIndirectCount(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCount(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCreateRenderPass2(device: Device, pCreateInfo: [*c]const RenderPassCreateInfo2, pAllocator: [*c]const AllocationCallbacks, pRenderPass: [*c]RenderPass) Result;
pub extern fn vkCmdBeginRenderPass2(commandBuffer: CommandBuffer, pRenderPassBegin: [*c]const RenderPassBeginInfo, pSubpassBeginInfo: [*c]const SubpassBeginInfo) void;
pub extern fn vkCmdNextSubpass2(commandBuffer: CommandBuffer, pSubpassBeginInfo: [*c]const SubpassBeginInfo, pSubpassEndInfo: [*c]const SubpassEndInfo) void;
pub extern fn vkCmdEndRenderPass2(commandBuffer: CommandBuffer, pSubpassEndInfo: [*c]const SubpassEndInfo) void;
pub extern fn vkResetQueryPool(device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32) void;
pub extern fn vkGetSemaphoreCounterValue(device: Device, semaphore: Semaphore, pValue: [*c]u64) Result;
pub extern fn vkWaitSemaphores(device: Device, pWaitInfo: [*c]const SemaphoreWaitInfo, timeout: u64) Result;
pub extern fn vkSignalSemaphore(device: Device, pSignalInfo: [*c]const SemaphoreSignalInfo) Result;
pub extern fn vkGetBufferDeviceAddress(device: Device, pInfo: [*c]const BufferDeviceAddressInfo) DeviceAddress;
pub extern fn vkGetBufferOpaqueCaptureAddress(device: Device, pInfo: [*c]const BufferDeviceAddressInfo) u64;
pub extern fn vkGetDeviceMemoryOpaqueCaptureAddress(device: Device, pInfo: [*c]const DeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const struct_SurfaceKHR_T = opaque {};
pub const SurfaceKHR = ?*struct_SurfaceKHR_T;
pub const PRESENT_MODE_IMMEDIATE_KHR = @enumToInt(enum_PresentModeKHR.PRESENT_MODE_IMMEDIATE_KHR);
pub const PRESENT_MODE_MAILBOX_KHR = @enumToInt(enum_PresentModeKHR.PRESENT_MODE_MAILBOX_KHR);
pub const PRESENT_MODE_FIFO_KHR = @enumToInt(enum_PresentModeKHR.PRESENT_MODE_FIFO_KHR);
pub const PRESENT_MODE_FIFO_RELAXED_KHR = @enumToInt(enum_PresentModeKHR.PRESENT_MODE_FIFO_RELAXED_KHR);
pub const PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = @enumToInt(enum_PresentModeKHR.PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR);
pub const PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = @enumToInt(enum_PresentModeKHR.PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR);
pub const PRESENT_MODE_MAX_ENUM_KHR = @enumToInt(enum_PresentModeKHR.PRESENT_MODE_MAX_ENUM_KHR);
pub const enum_PresentModeKHR = extern enum(c_int) {
    PRESENT_MODE_IMMEDIATE_KHR = 0,
    PRESENT_MODE_MAILBOX_KHR = 1,
    PRESENT_MODE_FIFO_KHR = 2,
    PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    PRESENT_MODE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const PresentModeKHR = enum_PresentModeKHR;
pub const COLOR_SPACE_SRGB_NONLINEAR_KHR = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_SRGB_NONLINEAR_KHR);
pub const COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT);
pub const COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT);
pub const COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_DISPLAY_P3_LINEAR_EXT);
pub const COLOR_SPACE_DCI_P3_NONLINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_DCI_P3_NONLINEAR_EXT);
pub const COLOR_SPACE_BT709_LINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_BT709_LINEAR_EXT);
pub const COLOR_SPACE_BT709_NONLINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_BT709_NONLINEAR_EXT);
pub const COLOR_SPACE_BT2020_LINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_BT2020_LINEAR_EXT);
pub const COLOR_SPACE_HDR10_ST2084_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_HDR10_ST2084_EXT);
pub const COLOR_SPACE_DOLBYVISION_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_DOLBYVISION_EXT);
pub const COLOR_SPACE_HDR10_HLG_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_HDR10_HLG_EXT);
pub const COLOR_SPACE_ADOBERGB_LINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_ADOBERGB_LINEAR_EXT);
pub const COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_ADOBERGB_NONLINEAR_EXT);
pub const COLOR_SPACE_PASS_THROUGH_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_PASS_THROUGH_EXT);
pub const COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT);
pub const COLOR_SPACE_DISPLAY_NATIVE_AMD = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_DISPLAY_NATIVE_AMD);
pub const COLORSPACE_SRGB_NONLINEAR_KHR = @enumToInt(enum_ColorSpaceKHR.COLORSPACE_SRGB_NONLINEAR_KHR);
pub const COLOR_SPACE_DCI_P3_LINEAR_EXT = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_DCI_P3_LINEAR_EXT);
pub const COLOR_SPACE_MAX_ENUM_KHR = @enumToInt(enum_ColorSpaceKHR.COLOR_SPACE_MAX_ENUM_KHR);
pub const enum_ColorSpaceKHR = extern enum(c_int) {
    COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
    COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
    COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
    COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
    COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
    COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
    COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
    COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
    COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
    COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
    COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
    COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
    COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
    COLORSPACE_SRGB_NONLINEAR_KHR = 0,
    COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003,
    COLOR_SPACE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const ColorSpaceKHR = enum_ColorSpaceKHR;
pub const SURFACE_TRANSFORM_IDENTITY_BIT_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_IDENTITY_BIT_KHR);
pub const SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_ROTATE_90_BIT_KHR);
pub const SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_ROTATE_180_BIT_KHR);
pub const SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_ROTATE_270_BIT_KHR);
pub const SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR);
pub const SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR);
pub const SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR);
pub const SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR);
pub const SURFACE_TRANSFORM_INHERIT_BIT_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_INHERIT_BIT_KHR);
pub const SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_SurfaceTransformFlagBitsKHR = extern enum(c_int) {
    SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
    SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
    SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
    SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
    SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
    SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const SurfaceTransformFlagBitsKHR = enum_SurfaceTransformFlagBitsKHR;
pub const COMPOSITE_ALPHA_OPAQUE_BIT_KHR = @enumToInt(enum_CompositeAlphaFlagBitsKHR.COMPOSITE_ALPHA_OPAQUE_BIT_KHR);
pub const COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = @enumToInt(enum_CompositeAlphaFlagBitsKHR.COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR);
pub const COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = @enumToInt(enum_CompositeAlphaFlagBitsKHR.COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR);
pub const COMPOSITE_ALPHA_INHERIT_BIT_KHR = @enumToInt(enum_CompositeAlphaFlagBitsKHR.COMPOSITE_ALPHA_INHERIT_BIT_KHR);
pub const COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_CompositeAlphaFlagBitsKHR.COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_CompositeAlphaFlagBitsKHR = extern enum(c_int) {
    COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
    COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
    COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
    COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
    COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const CompositeAlphaFlagBitsKHR = enum_CompositeAlphaFlagBitsKHR;
pub const CompositeAlphaFlagsKHR = Flags;
pub const SurfaceTransformFlagsKHR = Flags;
pub const struct_SurfaceCapabilitiesKHR = extern struct {
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: Extent2D,
    minImageExtent: Extent2D,
    maxImageExtent: Extent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: SurfaceTransformFlagsKHR,
    currentTransform: SurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: CompositeAlphaFlagsKHR,
    supportedUsageFlags: ImageUsageFlags,
};
pub const SurfaceCapabilitiesKHR = struct_SurfaceCapabilitiesKHR;
pub const struct_SurfaceFormatKHR = extern struct {
    format: Format,
    colorSpace: ColorSpaceKHR,
};
pub const SurfaceFormatKHR = struct_SurfaceFormatKHR;
pub const PFN_vkDestroySurfaceKHR = ?fn (Instance, SurfaceKHR, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ?fn (PhysicalDevice, u32, SurfaceKHR, [*c]Bool32) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ?fn (PhysicalDevice, SurfaceKHR, [*c]SurfaceCapabilitiesKHR) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ?fn (PhysicalDevice, SurfaceKHR, [*c]u32, [*c]SurfaceFormatKHR) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ?fn (PhysicalDevice, SurfaceKHR, [*c]u32, [*c]PresentModeKHR) callconv(.C) Result;
pub extern fn vkDestroySurfaceKHR(instance: Instance, surface: SurfaceKHR, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: PhysicalDevice, queueFamilyIndex: u32, surface: SurfaceKHR, pSupported: [*c]Bool32) Result;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: [*c]SurfaceCapabilitiesKHR) Result;
pub extern fn vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]SurfaceFormatKHR) Result;
pub extern fn vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pPresentModeCount: [*c]u32, pPresentModes: [*c]PresentModeKHR) Result;
pub const struct_SwapchainKHR_T = opaque {};
pub const SwapchainKHR = ?*struct_SwapchainKHR_T;
pub const SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = @enumToInt(enum_SwapchainCreateFlagBitsKHR.SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR);
pub const SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = @enumToInt(enum_SwapchainCreateFlagBitsKHR.SWAPCHAIN_CREATE_PROTECTED_BIT_KHR);
pub const SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = @enumToInt(enum_SwapchainCreateFlagBitsKHR.SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR);
pub const SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_SwapchainCreateFlagBitsKHR.SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_SwapchainCreateFlagBitsKHR = extern enum(c_int) {
    SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
    SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
    SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4,
    SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const SwapchainCreateFlagBitsKHR = enum_SwapchainCreateFlagBitsKHR;
pub const SwapchainCreateFlagsKHR = Flags;
pub const DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = @enumToInt(enum_DeviceGroupPresentModeFlagBitsKHR.DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR);
pub const DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = @enumToInt(enum_DeviceGroupPresentModeFlagBitsKHR.DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR);
pub const DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = @enumToInt(enum_DeviceGroupPresentModeFlagBitsKHR.DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR);
pub const DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = @enumToInt(enum_DeviceGroupPresentModeFlagBitsKHR.DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR);
pub const DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_DeviceGroupPresentModeFlagBitsKHR.DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_DeviceGroupPresentModeFlagBitsKHR = extern enum(c_int) {
    DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
    DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
    DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
    DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
    DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const DeviceGroupPresentModeFlagBitsKHR = enum_DeviceGroupPresentModeFlagBitsKHR;
pub const DeviceGroupPresentModeFlagsKHR = Flags;
pub const struct_SwapchainCreateInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: SwapchainCreateFlagsKHR,
    surface: SurfaceKHR,
    minImageCount: u32,
    imageFormat: Format,
    imageColorSpace: ColorSpaceKHR,
    imageExtent: Extent2D,
    imageArrayLayers: u32,
    imageUsage: ImageUsageFlags,
    imageSharingMode: SharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
    preTransform: SurfaceTransformFlagBitsKHR,
    compositeAlpha: CompositeAlphaFlagBitsKHR,
    presentMode: PresentModeKHR,
    clipped: Bool32,
    oldSwapchain: SwapchainKHR,
};
pub const SwapchainCreateInfoKHR = struct_SwapchainCreateInfoKHR;
pub const struct_PresentInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: [*c]const Semaphore,
    swapchainCount: u32,
    pSwapchains: [*c]const SwapchainKHR,
    pImageIndices: [*c]const u32,
    pResults: [*c]Result,
};
pub const PresentInfoKHR = struct_PresentInfoKHR;
pub const struct_ImageSwapchainCreateInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    swapchain: SwapchainKHR,
};
pub const ImageSwapchainCreateInfoKHR = struct_ImageSwapchainCreateInfoKHR;
pub const struct_BindImageMemorySwapchainInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    swapchain: SwapchainKHR,
    imageIndex: u32,
};
pub const BindImageMemorySwapchainInfoKHR = struct_BindImageMemorySwapchainInfoKHR;
pub const struct_AcquireNextImageInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    swapchain: SwapchainKHR,
    timeout: u64,
    semaphore: Semaphore,
    fence: Fence,
    deviceMask: u32,
};
pub const AcquireNextImageInfoKHR = struct_AcquireNextImageInfoKHR;
pub const struct_DeviceGroupPresentCapabilitiesKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    presentMask: [32]u32,
    modes: DeviceGroupPresentModeFlagsKHR,
};
pub const DeviceGroupPresentCapabilitiesKHR = struct_DeviceGroupPresentCapabilitiesKHR;
pub const struct_DeviceGroupPresentInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    swapchainCount: u32,
    pDeviceMasks: [*c]const u32,
    mode: DeviceGroupPresentModeFlagBitsKHR,
};
pub const DeviceGroupPresentInfoKHR = struct_DeviceGroupPresentInfoKHR;
pub const struct_DeviceGroupSwapchainCreateInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    modes: DeviceGroupPresentModeFlagsKHR,
};
pub const DeviceGroupSwapchainCreateInfoKHR = struct_DeviceGroupSwapchainCreateInfoKHR;
pub const PFN_vkCreateSwapchainKHR = ?fn (Device, [*c]const SwapchainCreateInfoKHR, [*c]const AllocationCallbacks, [*c]SwapchainKHR) callconv(.C) Result;
pub const PFN_vkDestroySwapchainKHR = ?fn (Device, SwapchainKHR, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetSwapchainImagesKHR = ?fn (Device, SwapchainKHR, [*c]u32, [*c]Image) callconv(.C) Result;
pub const PFN_vkAcquireNextImageKHR = ?fn (Device, SwapchainKHR, u64, Semaphore, Fence, [*c]u32) callconv(.C) Result;
pub const PFN_vkQueuePresentKHR = ?fn (Queue, [*c]const PresentInfoKHR) callconv(.C) Result;
pub const PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ?fn (Device, [*c]DeviceGroupPresentCapabilitiesKHR) callconv(.C) Result;
pub const PFN_vkGetDeviceGroupSurfacePresentModesKHR = ?fn (Device, SurfaceKHR, [*c]DeviceGroupPresentModeFlagsKHR) callconv(.C) Result;
pub const PFN_vkGetPhysicalDevicePresentRectanglesKHR = ?fn (PhysicalDevice, SurfaceKHR, [*c]u32, [*c]Rect2D) callconv(.C) Result;
pub const PFN_vkAcquireNextImage2KHR = ?fn (Device, [*c]const AcquireNextImageInfoKHR, [*c]u32) callconv(.C) Result;
pub extern fn vkCreateSwapchainKHR(device: Device, pCreateInfo: [*c]const SwapchainCreateInfoKHR, pAllocator: [*c]const AllocationCallbacks, pSwapchain: [*c]SwapchainKHR) Result;
pub extern fn vkDestroySwapchainKHR(device: Device, swapchain: SwapchainKHR, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkGetSwapchainImagesKHR(device: Device, swapchain: SwapchainKHR, pSwapchainImageCount: [*c]u32, pSwapchainImages: [*c]Image) Result;
pub extern fn vkAcquireNextImageKHR(device: Device, swapchain: SwapchainKHR, timeout: u64, semaphore: Semaphore, fence: Fence, pImageIndex: [*c]u32) Result;
pub extern fn vkQueuePresentKHR(queue: Queue, pPresentInfo: [*c]const PresentInfoKHR) Result;
pub extern fn vkGetDeviceGroupPresentCapabilitiesKHR(device: Device, pDeviceGroupPresentCapabilities: [*c]DeviceGroupPresentCapabilitiesKHR) Result;
pub extern fn vkGetDeviceGroupSurfacePresentModesKHR(device: Device, surface: SurfaceKHR, pModes: [*c]DeviceGroupPresentModeFlagsKHR) Result;
pub extern fn vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pRectCount: [*c]u32, pRects: [*c]Rect2D) Result;
pub extern fn vkAcquireNextImage2KHR(device: Device, pAcquireInfo: [*c]const AcquireNextImageInfoKHR, pImageIndex: [*c]u32) Result;
pub const struct_DisplayKHR_T = opaque {};
pub const DisplayKHR = ?*struct_DisplayKHR_T;
pub const struct_DisplayModeKHR_T = opaque {};
pub const DisplayModeKHR = ?*struct_DisplayModeKHR_T;
pub const DisplayModeCreateFlagsKHR = Flags;
pub const DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = @enumToInt(enum_DisplayPlaneAlphaFlagBitsKHR.DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR);
pub const DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = @enumToInt(enum_DisplayPlaneAlphaFlagBitsKHR.DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR);
pub const DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = @enumToInt(enum_DisplayPlaneAlphaFlagBitsKHR.DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR);
pub const DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = @enumToInt(enum_DisplayPlaneAlphaFlagBitsKHR.DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR);
pub const DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_DisplayPlaneAlphaFlagBitsKHR.DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_DisplayPlaneAlphaFlagBitsKHR = extern enum(c_int) {
    DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
    DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
    DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
    DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
    DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const DisplayPlaneAlphaFlagBitsKHR = enum_DisplayPlaneAlphaFlagBitsKHR;
pub const DisplayPlaneAlphaFlagsKHR = Flags;
pub const DisplaySurfaceCreateFlagsKHR = Flags;
pub const struct_DisplayModeParametersKHR = extern struct {
    visibleRegion: Extent2D,
    refreshRate: u32,
};
pub const DisplayModeParametersKHR = struct_DisplayModeParametersKHR;
pub const struct_DisplayModeCreateInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DisplayModeCreateFlagsKHR,
    parameters: DisplayModeParametersKHR,
};
pub const DisplayModeCreateInfoKHR = struct_DisplayModeCreateInfoKHR;
pub const struct_DisplayModePropertiesKHR = extern struct {
    displayMode: DisplayModeKHR,
    parameters: DisplayModeParametersKHR,
};
pub const DisplayModePropertiesKHR = struct_DisplayModePropertiesKHR;
pub const struct_DisplayPlaneCapabilitiesKHR = extern struct {
    supportedAlpha: DisplayPlaneAlphaFlagsKHR,
    minSrcPosition: Offset2D,
    maxSrcPosition: Offset2D,
    minSrcExtent: Extent2D,
    maxSrcExtent: Extent2D,
    minDstPosition: Offset2D,
    maxDstPosition: Offset2D,
    minDstExtent: Extent2D,
    maxDstExtent: Extent2D,
};
pub const DisplayPlaneCapabilitiesKHR = struct_DisplayPlaneCapabilitiesKHR;
pub const struct_DisplayPlanePropertiesKHR = extern struct {
    currentDisplay: DisplayKHR,
    currentStackIndex: u32,
};
pub const DisplayPlanePropertiesKHR = struct_DisplayPlanePropertiesKHR;
pub const struct_DisplayPropertiesKHR = extern struct {
    display: DisplayKHR,
    displayName: [*c]const u8,
    physicalDimensions: Extent2D,
    physicalResolution: Extent2D,
    supportedTransforms: SurfaceTransformFlagsKHR,
    planeReorderPossible: Bool32,
    persistentContent: Bool32,
};
pub const DisplayPropertiesKHR = struct_DisplayPropertiesKHR;
pub const struct_DisplaySurfaceCreateInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DisplaySurfaceCreateFlagsKHR,
    displayMode: DisplayModeKHR,
    planeIndex: u32,
    planeStackIndex: u32,
    transform: SurfaceTransformFlagBitsKHR,
    globalAlpha: f32,
    alphaMode: DisplayPlaneAlphaFlagBitsKHR,
    imageExtent: Extent2D,
};
pub const DisplaySurfaceCreateInfoKHR = struct_DisplaySurfaceCreateInfoKHR;
pub const PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ?fn (PhysicalDevice, [*c]u32, [*c]DisplayPropertiesKHR) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ?fn (PhysicalDevice, [*c]u32, [*c]DisplayPlanePropertiesKHR) callconv(.C) Result;
pub const PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ?fn (PhysicalDevice, u32, [*c]u32, [*c]DisplayKHR) callconv(.C) Result;
pub const PFN_vkGetDisplayModePropertiesKHR = ?fn (PhysicalDevice, DisplayKHR, [*c]u32, [*c]DisplayModePropertiesKHR) callconv(.C) Result;
pub const PFN_vkCreateDisplayModeKHR = ?fn (PhysicalDevice, DisplayKHR, [*c]const DisplayModeCreateInfoKHR, [*c]const AllocationCallbacks, [*c]DisplayModeKHR) callconv(.C) Result;
pub const PFN_vkGetDisplayPlaneCapabilitiesKHR = ?fn (PhysicalDevice, DisplayModeKHR, u32, [*c]DisplayPlaneCapabilitiesKHR) callconv(.C) Result;
pub const PFN_vkCreateDisplayPlaneSurfaceKHR = ?fn (Instance, [*c]const DisplaySurfaceCreateInfoKHR, [*c]const AllocationCallbacks, [*c]SurfaceKHR) callconv(.C) Result;
pub extern fn vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: PhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]DisplayPropertiesKHR) Result;
pub extern fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: PhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]DisplayPlanePropertiesKHR) Result;
pub extern fn vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: PhysicalDevice, planeIndex: u32, pDisplayCount: [*c]u32, pDisplays: [*c]DisplayKHR) Result;
pub extern fn vkGetDisplayModePropertiesKHR(physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]DisplayModePropertiesKHR) Result;
pub extern fn vkCreateDisplayModeKHR(physicalDevice: PhysicalDevice, display: DisplayKHR, pCreateInfo: [*c]const DisplayModeCreateInfoKHR, pAllocator: [*c]const AllocationCallbacks, pMode: [*c]DisplayModeKHR) Result;
pub extern fn vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: PhysicalDevice, mode: DisplayModeKHR, planeIndex: u32, pCapabilities: [*c]DisplayPlaneCapabilitiesKHR) Result;
pub extern fn vkCreateDisplayPlaneSurfaceKHR(instance: Instance, pCreateInfo: [*c]const DisplaySurfaceCreateInfoKHR, pAllocator: [*c]const AllocationCallbacks, pSurface: [*c]SurfaceKHR) Result;
pub const struct_DisplayPresentInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcRect: Rect2D,
    dstRect: Rect2D,
    persistent: Bool32,
};
pub const DisplayPresentInfoKHR = struct_DisplayPresentInfoKHR;
pub const PFN_vkCreateSharedSwapchainsKHR = ?fn (Device, u32, [*c]const SwapchainCreateInfoKHR, [*c]const AllocationCallbacks, [*c]SwapchainKHR) callconv(.C) Result;
pub extern fn vkCreateSharedSwapchainsKHR(device: Device, swapchainCount: u32, pCreateInfos: [*c]const SwapchainCreateInfoKHR, pAllocator: [*c]const AllocationCallbacks, pSwapchains: [*c]SwapchainKHR) Result;
pub const RenderPassMultiviewCreateInfoKHR = RenderPassMultiviewCreateInfo;
pub const PhysicalDeviceMultiviewFeaturesKHR = PhysicalDeviceMultiviewFeatures;
pub const PhysicalDeviceMultiviewPropertiesKHR = PhysicalDeviceMultiviewProperties;
pub const PhysicalDeviceFeatures2KHR = PhysicalDeviceFeatures2;
pub const PhysicalDeviceProperties2KHR = PhysicalDeviceProperties2;
pub const FormatProperties2KHR = FormatProperties2;
pub const ImageFormatProperties2KHR = ImageFormatProperties2;
pub const PhysicalDeviceImageFormatInfo2KHR = PhysicalDeviceImageFormatInfo2;
pub const QueueFamilyProperties2KHR = QueueFamilyProperties2;
pub const PhysicalDeviceMemoryProperties2KHR = PhysicalDeviceMemoryProperties2;
pub const SparseImageFormatProperties2KHR = SparseImageFormatProperties2;
pub const PhysicalDeviceSparseImageFormatInfo2KHR = PhysicalDeviceSparseImageFormatInfo2;
pub const PFN_vkGetPhysicalDeviceFeatures2KHR = ?fn (PhysicalDevice, [*c]PhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2KHR = ?fn (PhysicalDevice, [*c]PhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2KHR = ?fn (PhysicalDevice, Format, [*c]FormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ?fn (PhysicalDevice, [*c]const PhysicalDeviceImageFormatInfo2, [*c]ImageFormatProperties2) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ?fn (PhysicalDevice, [*c]u32, [*c]QueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ?fn (PhysicalDevice, [*c]PhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ?fn (PhysicalDevice, [*c]const PhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]SparseImageFormatProperties2) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceFeatures2KHR(physicalDevice: PhysicalDevice, pFeatures: [*c]PhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2KHR(physicalDevice: PhysicalDevice, pProperties: [*c]PhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice: PhysicalDevice, format: Format, pFormatProperties: [*c]FormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice: PhysicalDevice, pImageFormatInfo: [*c]const PhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]ImageFormatProperties2) Result;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice: PhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]QueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice: PhysicalDevice, pMemoryProperties: [*c]PhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice: PhysicalDevice, pFormatInfo: [*c]const PhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]SparseImageFormatProperties2) void;
pub const PeerMemoryFeatureFlagsKHR = PeerMemoryFeatureFlags;
pub const PeerMemoryFeatureFlagBitsKHR = PeerMemoryFeatureFlagBits;
pub const MemoryAllocateFlagsKHR = MemoryAllocateFlags;
pub const MemoryAllocateFlagBitsKHR = MemoryAllocateFlagBits;
pub const MemoryAllocateFlagsInfoKHR = MemoryAllocateFlagsInfo;
pub const DeviceGroupRenderPassBeginInfoKHR = DeviceGroupRenderPassBeginInfo;
pub const DeviceGroupCommandBufferBeginInfoKHR = DeviceGroupCommandBufferBeginInfo;
pub const DeviceGroupSubmitInfoKHR = DeviceGroupSubmitInfo;
pub const DeviceGroupBindSparseInfoKHR = DeviceGroupBindSparseInfo;
pub const BindBufferMemoryDeviceGroupInfoKHR = BindBufferMemoryDeviceGroupInfo;
pub const BindImageMemoryDeviceGroupInfoKHR = BindImageMemoryDeviceGroupInfo;
pub const PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ?fn (Device, u32, u32, u32, [*c]PeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMaskKHR = ?fn (CommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBaseKHR = ?fn (CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub extern fn vkGetDeviceGroupPeerMemoryFeaturesKHR(device: Device, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]PeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMaskKHR(commandBuffer: CommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBaseKHR(commandBuffer: CommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub const CommandPoolTrimFlagsKHR = CommandPoolTrimFlags;
pub const PFN_vkTrimCommandPoolKHR = ?fn (Device, CommandPool, CommandPoolTrimFlags) callconv(.C) void;
pub extern fn vkTrimCommandPoolKHR(device: Device, commandPool: CommandPool, flags: CommandPoolTrimFlags) void;
pub const PhysicalDeviceGroupPropertiesKHR = PhysicalDeviceGroupProperties;
pub const DeviceGroupDeviceCreateInfoKHR = DeviceGroupDeviceCreateInfo;
pub const PFN_vkEnumeratePhysicalDeviceGroupsKHR = ?fn (Instance, [*c]u32, [*c]PhysicalDeviceGroupProperties) callconv(.C) Result;
pub extern fn vkEnumeratePhysicalDeviceGroupsKHR(instance: Instance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]PhysicalDeviceGroupProperties) Result;
pub const ExternalMemoryHandleTypeFlagsKHR = ExternalMemoryHandleTypeFlags;
pub const ExternalMemoryHandleTypeFlagBitsKHR = ExternalMemoryHandleTypeFlagBits;
pub const ExternalMemoryFeatureFlagsKHR = ExternalMemoryFeatureFlags;
pub const ExternalMemoryFeatureFlagBitsKHR = ExternalMemoryFeatureFlagBits;
pub const ExternalMemoryPropertiesKHR = ExternalMemoryProperties;
pub const PhysicalDeviceExternalImageFormatInfoKHR = PhysicalDeviceExternalImageFormatInfo;
pub const ExternalImageFormatPropertiesKHR = ExternalImageFormatProperties;
pub const PhysicalDeviceExternalBufferInfoKHR = PhysicalDeviceExternalBufferInfo;
pub const ExternalBufferPropertiesKHR = ExternalBufferProperties;
pub const PhysicalDeviceIDPropertiesKHR = PhysicalDeviceIDProperties;
pub const PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ?fn (PhysicalDevice, [*c]const PhysicalDeviceExternalBufferInfo, [*c]ExternalBufferProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice: PhysicalDevice, pExternalBufferInfo: [*c]const PhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]ExternalBufferProperties) void;
pub const ExternalMemoryImageCreateInfoKHR = ExternalMemoryImageCreateInfo;
pub const ExternalMemoryBufferCreateInfoKHR = ExternalMemoryBufferCreateInfo;
pub const ExportMemoryAllocateInfoKHR = ExportMemoryAllocateInfo;
pub const struct_ImportMemoryFdInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleType: ExternalMemoryHandleTypeFlagBits,
    fd: c_int,
};
pub const ImportMemoryFdInfoKHR = struct_ImportMemoryFdInfoKHR;
pub const struct_MemoryFdPropertiesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    memoryTypeBits: u32,
};
pub const MemoryFdPropertiesKHR = struct_MemoryFdPropertiesKHR;
pub const struct_MemoryGetFdInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    memory: DeviceMemory,
    handleType: ExternalMemoryHandleTypeFlagBits,
};
pub const MemoryGetFdInfoKHR = struct_MemoryGetFdInfoKHR;
pub const PFN_vkGetMemoryFdKHR = ?fn (Device, [*c]const MemoryGetFdInfoKHR, [*c]c_int) callconv(.C) Result;
pub const PFN_vkGetMemoryFdPropertiesKHR = ?fn (Device, ExternalMemoryHandleTypeFlagBits, c_int, [*c]MemoryFdPropertiesKHR) callconv(.C) Result;
pub extern fn vkGetMemoryFdKHR(device: Device, pGetFdInfo: [*c]const MemoryGetFdInfoKHR, pFd: [*c]c_int) Result;
pub extern fn vkGetMemoryFdPropertiesKHR(device: Device, handleType: ExternalMemoryHandleTypeFlagBits, fd: c_int, pMemoryFdProperties: [*c]MemoryFdPropertiesKHR) Result;
pub const ExternalSemaphoreHandleTypeFlagsKHR = ExternalSemaphoreHandleTypeFlags;
pub const ExternalSemaphoreHandleTypeFlagBitsKHR = ExternalSemaphoreHandleTypeFlagBits;
pub const ExternalSemaphoreFeatureFlagsKHR = ExternalSemaphoreFeatureFlags;
pub const ExternalSemaphoreFeatureFlagBitsKHR = ExternalSemaphoreFeatureFlagBits;
pub const PhysicalDeviceExternalSemaphoreInfoKHR = PhysicalDeviceExternalSemaphoreInfo;
pub const ExternalSemaphorePropertiesKHR = ExternalSemaphoreProperties;
pub const PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ?fn (PhysicalDevice, [*c]const PhysicalDeviceExternalSemaphoreInfo, [*c]ExternalSemaphoreProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice: PhysicalDevice, pExternalSemaphoreInfo: [*c]const PhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]ExternalSemaphoreProperties) void;
pub const SemaphoreImportFlagsKHR = SemaphoreImportFlags;
pub const SemaphoreImportFlagBitsKHR = SemaphoreImportFlagBits;
pub const ExportSemaphoreCreateInfoKHR = ExportSemaphoreCreateInfo;
pub const struct_ImportSemaphoreFdInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    semaphore: Semaphore,
    flags: SemaphoreImportFlags,
    handleType: ExternalSemaphoreHandleTypeFlagBits,
    fd: c_int,
};
pub const ImportSemaphoreFdInfoKHR = struct_ImportSemaphoreFdInfoKHR;
pub const struct_SemaphoreGetFdInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    semaphore: Semaphore,
    handleType: ExternalSemaphoreHandleTypeFlagBits,
};
pub const SemaphoreGetFdInfoKHR = struct_SemaphoreGetFdInfoKHR;
pub const PFN_vkImportSemaphoreFdKHR = ?fn (Device, [*c]const ImportSemaphoreFdInfoKHR) callconv(.C) Result;
pub const PFN_vkGetSemaphoreFdKHR = ?fn (Device, [*c]const SemaphoreGetFdInfoKHR, [*c]c_int) callconv(.C) Result;
pub extern fn vkImportSemaphoreFdKHR(device: Device, pImportSemaphoreFdInfo: [*c]const ImportSemaphoreFdInfoKHR) Result;
pub extern fn vkGetSemaphoreFdKHR(device: Device, pGetFdInfo: [*c]const SemaphoreGetFdInfoKHR, pFd: [*c]c_int) Result;
pub const struct_PhysicalDevicePushDescriptorPropertiesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxPushDescriptors: u32,
};
pub const PhysicalDevicePushDescriptorPropertiesKHR = struct_PhysicalDevicePushDescriptorPropertiesKHR;
pub const PFN_vkCmdPushDescriptorSetKHR = ?fn (CommandBuffer, PipelineBindPoint, PipelineLayout, u32, u32, [*c]const WriteDescriptorSet) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplateKHR = ?fn (CommandBuffer, DescriptorUpdateTemplate, PipelineLayout, u32, ?*const c_void) callconv(.C) void;
pub extern fn vkCmdPushDescriptorSetKHR(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, layout: PipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: [*c]const WriteDescriptorSet) void;
pub extern fn vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: CommandBuffer, descriptorUpdateTemplate: DescriptorUpdateTemplate, layout: PipelineLayout, set: u32, pData: ?*const c_void) void;
pub const PhysicalDeviceShaderFloat16Int8FeaturesKHR = PhysicalDeviceShaderFloat16Int8Features;
pub const PhysicalDeviceFloat16Int8FeaturesKHR = PhysicalDeviceShaderFloat16Int8Features;
pub const PhysicalDevice16BitStorageFeaturesKHR = PhysicalDevice16BitStorageFeatures;
pub const struct_RectLayerKHR = extern struct {
    offset: Offset2D,
    extent: Extent2D,
    layer: u32,
};
pub const RectLayerKHR = struct_RectLayerKHR;
pub const struct_PresentRegionKHR = extern struct {
    rectangleCount: u32,
    pRectangles: [*c]const RectLayerKHR,
};
pub const PresentRegionKHR = struct_PresentRegionKHR;
pub const struct_PresentRegionsKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    swapchainCount: u32,
    pRegions: [*c]const PresentRegionKHR,
};
pub const PresentRegionsKHR = struct_PresentRegionsKHR;
pub const DescriptorUpdateTemplateKHR = DescriptorUpdateTemplate;
pub const DescriptorUpdateTemplateTypeKHR = DescriptorUpdateTemplateType;
pub const DescriptorUpdateTemplateCreateFlagsKHR = DescriptorUpdateTemplateCreateFlags;
pub const DescriptorUpdateTemplateEntryKHR = DescriptorUpdateTemplateEntry;
pub const DescriptorUpdateTemplateCreateInfoKHR = DescriptorUpdateTemplateCreateInfo;
pub const PFN_vkCreateDescriptorUpdateTemplateKHR = ?fn (Device, [*c]const DescriptorUpdateTemplateCreateInfo, [*c]const AllocationCallbacks, [*c]DescriptorUpdateTemplate) callconv(.C) Result;
pub const PFN_vkDestroyDescriptorUpdateTemplateKHR = ?fn (Device, DescriptorUpdateTemplate, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplateKHR = ?fn (Device, DescriptorSet, DescriptorUpdateTemplate, ?*const c_void) callconv(.C) void;
pub extern fn vkCreateDescriptorUpdateTemplateKHR(device: Device, pCreateInfo: [*c]const DescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const AllocationCallbacks, pDescriptorUpdateTemplate: [*c]DescriptorUpdateTemplate) Result;
pub extern fn vkDestroyDescriptorUpdateTemplateKHR(device: Device, descriptorUpdateTemplate: DescriptorUpdateTemplate, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplateKHR(device: Device, descriptorSet: DescriptorSet, descriptorUpdateTemplate: DescriptorUpdateTemplate, pData: ?*const c_void) void;
pub const PhysicalDeviceImagelessFramebufferFeaturesKHR = PhysicalDeviceImagelessFramebufferFeatures;
pub const FramebufferAttachmentsCreateInfoKHR = FramebufferAttachmentsCreateInfo;
pub const FramebufferAttachmentImageInfoKHR = FramebufferAttachmentImageInfo;
pub const RenderPassAttachmentBeginInfoKHR = RenderPassAttachmentBeginInfo;
pub const RenderPassCreateInfo2KHR = RenderPassCreateInfo2;
pub const AttachmentDescription2KHR = AttachmentDescription2;
pub const AttachmentReference2KHR = AttachmentReference2;
pub const SubpassDescription2KHR = SubpassDescription2;
pub const SubpassDependency2KHR = SubpassDependency2;
pub const SubpassBeginInfoKHR = SubpassBeginInfo;
pub const SubpassEndInfoKHR = SubpassEndInfo;
pub const PFN_vkCreateRenderPass2KHR = ?fn (Device, [*c]const RenderPassCreateInfo2, [*c]const AllocationCallbacks, [*c]RenderPass) callconv(.C) Result;
pub const PFN_vkCmdBeginRenderPass2KHR = ?fn (CommandBuffer, [*c]const RenderPassBeginInfo, [*c]const SubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2KHR = ?fn (CommandBuffer, [*c]const SubpassBeginInfo, [*c]const SubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2KHR = ?fn (CommandBuffer, [*c]const SubpassEndInfo) callconv(.C) void;
pub extern fn vkCreateRenderPass2KHR(device: Device, pCreateInfo: [*c]const RenderPassCreateInfo2, pAllocator: [*c]const AllocationCallbacks, pRenderPass: [*c]RenderPass) Result;
pub extern fn vkCmdBeginRenderPass2KHR(commandBuffer: CommandBuffer, pRenderPassBegin: [*c]const RenderPassBeginInfo, pSubpassBeginInfo: [*c]const SubpassBeginInfo) void;
pub extern fn vkCmdNextSubpass2KHR(commandBuffer: CommandBuffer, pSubpassBeginInfo: [*c]const SubpassBeginInfo, pSubpassEndInfo: [*c]const SubpassEndInfo) void;
pub extern fn vkCmdEndRenderPass2KHR(commandBuffer: CommandBuffer, pSubpassEndInfo: [*c]const SubpassEndInfo) void;
pub const struct_SharedPresentSurfaceCapabilitiesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    sharedPresentSupportedUsageFlags: ImageUsageFlags,
};
pub const SharedPresentSurfaceCapabilitiesKHR = struct_SharedPresentSurfaceCapabilitiesKHR;
pub const PFN_vkGetSwapchainStatusKHR = ?fn (Device, SwapchainKHR) callconv(.C) Result;
pub extern fn vkGetSwapchainStatusKHR(device: Device, swapchain: SwapchainKHR) Result;
pub const ExternalFenceHandleTypeFlagsKHR = ExternalFenceHandleTypeFlags;
pub const ExternalFenceHandleTypeFlagBitsKHR = ExternalFenceHandleTypeFlagBits;
pub const ExternalFenceFeatureFlagsKHR = ExternalFenceFeatureFlags;
pub const ExternalFenceFeatureFlagBitsKHR = ExternalFenceFeatureFlagBits;
pub const PhysicalDeviceExternalFenceInfoKHR = PhysicalDeviceExternalFenceInfo;
pub const ExternalFencePropertiesKHR = ExternalFenceProperties;
pub const PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ?fn (PhysicalDevice, [*c]const PhysicalDeviceExternalFenceInfo, [*c]ExternalFenceProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice: PhysicalDevice, pExternalFenceInfo: [*c]const PhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]ExternalFenceProperties) void;
pub const FenceImportFlagsKHR = FenceImportFlags;
pub const FenceImportFlagBitsKHR = FenceImportFlagBits;
pub const ExportFenceCreateInfoKHR = ExportFenceCreateInfo;
pub const struct_ImportFenceFdInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    fence: Fence,
    flags: FenceImportFlags,
    handleType: ExternalFenceHandleTypeFlagBits,
    fd: c_int,
};
pub const ImportFenceFdInfoKHR = struct_ImportFenceFdInfoKHR;
pub const struct_FenceGetFdInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    fence: Fence,
    handleType: ExternalFenceHandleTypeFlagBits,
};
pub const FenceGetFdInfoKHR = struct_FenceGetFdInfoKHR;
pub const PFN_vkImportFenceFdKHR = ?fn (Device, [*c]const ImportFenceFdInfoKHR) callconv(.C) Result;
pub const PFN_vkGetFenceFdKHR = ?fn (Device, [*c]const FenceGetFdInfoKHR, [*c]c_int) callconv(.C) Result;
pub extern fn vkImportFenceFdKHR(device: Device, pImportFenceFdInfo: [*c]const ImportFenceFdInfoKHR) Result;
pub extern fn vkGetFenceFdKHR(device: Device, pGetFdInfo: [*c]const FenceGetFdInfoKHR, pFd: [*c]c_int) Result;
pub const PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_GENERIC_KHR);
pub const PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR);
pub const PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR);
pub const PERFORMANCE_COUNTER_UNIT_BYTES_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_BYTES_KHR);
pub const PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR);
pub const PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_KELVIN_KHR);
pub const PERFORMANCE_COUNTER_UNIT_WATTS_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_WATTS_KHR);
pub const PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_VOLTS_KHR);
pub const PERFORMANCE_COUNTER_UNIT_AMPS_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_AMPS_KHR);
pub const PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_HERTZ_KHR);
pub const PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_CYCLES_KHR);
pub const PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = @enumToInt(enum_PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR);
pub const enum_PerformanceCounterUnitKHR = extern enum(c_int) {
    PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
    PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
    PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
    PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
    PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
    PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
    PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
    PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
    PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
    PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
    PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
    PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const PerformanceCounterUnitKHR = enum_PerformanceCounterUnitKHR;
pub const PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = @enumToInt(enum_PerformanceCounterScopeKHR.PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR);
pub const PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = @enumToInt(enum_PerformanceCounterScopeKHR.PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR);
pub const PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = @enumToInt(enum_PerformanceCounterScopeKHR.PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR);
pub const QUERY_SCOPE_COMMAND_BUFFER_KHR = @enumToInt(enum_PerformanceCounterScopeKHR.QUERY_SCOPE_COMMAND_BUFFER_KHR);
pub const QUERY_SCOPE_RENDER_PASS_KHR = @enumToInt(enum_PerformanceCounterScopeKHR.QUERY_SCOPE_RENDER_PASS_KHR);
pub const QUERY_SCOPE_COMMAND_KHR = @enumToInt(enum_PerformanceCounterScopeKHR.QUERY_SCOPE_COMMAND_KHR);
pub const PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = @enumToInt(enum_PerformanceCounterScopeKHR.PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR);
pub const enum_PerformanceCounterScopeKHR = extern enum(c_int) {
    PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
    PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
    PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
    QUERY_SCOPE_COMMAND_BUFFER_KHR = 0,
    QUERY_SCOPE_RENDER_PASS_KHR = 1,
    QUERY_SCOPE_COMMAND_KHR = 2,
    PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const PerformanceCounterScopeKHR = enum_PerformanceCounterScopeKHR;
pub const PERFORMANCE_COUNTER_STORAGE_INT32_KHR = @enumToInt(enum_PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_INT32_KHR);
pub const PERFORMANCE_COUNTER_STORAGE_INT64_KHR = @enumToInt(enum_PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_INT64_KHR);
pub const PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = @enumToInt(enum_PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_UINT32_KHR);
pub const PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = @enumToInt(enum_PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_UINT64_KHR);
pub const PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = @enumToInt(enum_PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR);
pub const PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = @enumToInt(enum_PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR);
pub const PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = @enumToInt(enum_PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR);
pub const enum_PerformanceCounterStorageKHR = extern enum(c_int) {
    PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
    PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
    PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
    PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
    PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
    PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
    PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const PerformanceCounterStorageKHR = enum_PerformanceCounterStorageKHR;
pub const PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = @enumToInt(enum_PerformanceCounterDescriptionFlagBitsKHR.PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR);
pub const PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = @enumToInt(enum_PerformanceCounterDescriptionFlagBitsKHR.PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR);
pub const PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = @enumToInt(enum_PerformanceCounterDescriptionFlagBitsKHR.PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR);
pub const PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = @enumToInt(enum_PerformanceCounterDescriptionFlagBitsKHR.PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR);
pub const PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_PerformanceCounterDescriptionFlagBitsKHR.PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_PerformanceCounterDescriptionFlagBitsKHR = extern enum(c_int) {
    PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1,
    PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2,
    PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1,
    PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2,
    PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const PerformanceCounterDescriptionFlagBitsKHR = enum_PerformanceCounterDescriptionFlagBitsKHR;
pub const PerformanceCounterDescriptionFlagsKHR = Flags;
pub const ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_AcquireProfilingLockFlagBitsKHR.ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_AcquireProfilingLockFlagBitsKHR = extern enum(c_int) {
    ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const AcquireProfilingLockFlagBitsKHR = enum_AcquireProfilingLockFlagBitsKHR;
pub const AcquireProfilingLockFlagsKHR = Flags;
pub const struct_PhysicalDevicePerformanceQueryFeaturesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    performanceCounterQueryPools: Bool32,
    performanceCounterMultipleQueryPools: Bool32,
};
pub const PhysicalDevicePerformanceQueryFeaturesKHR = struct_PhysicalDevicePerformanceQueryFeaturesKHR;
pub const struct_PhysicalDevicePerformanceQueryPropertiesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    allowCommandBufferQueryCopies: Bool32,
};
pub const PhysicalDevicePerformanceQueryPropertiesKHR = struct_PhysicalDevicePerformanceQueryPropertiesKHR;
pub const struct_PerformanceCounterKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    unit: PerformanceCounterUnitKHR,
    scope: PerformanceCounterScopeKHR,
    storage: PerformanceCounterStorageKHR,
    uuid: [16]u8,
};
pub const PerformanceCounterKHR = struct_PerformanceCounterKHR;
pub const struct_PerformanceCounterDescriptionKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PerformanceCounterDescriptionFlagsKHR,
    name: [256]u8,
    category: [256]u8,
    description: [256]u8,
};
pub const PerformanceCounterDescriptionKHR = struct_PerformanceCounterDescriptionKHR;
pub const struct_QueryPoolPerformanceCreateInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    queueFamilyIndex: u32,
    counterIndexCount: u32,
    pCounterIndices: [*c]const u32,
};
pub const QueryPoolPerformanceCreateInfoKHR = struct_QueryPoolPerformanceCreateInfoKHR;
pub const union_PerformanceCounterResultKHR = extern union {
    int32: i32,
    int64: i64,
    uint32: u32,
    uint64: u64,
    float32: f32,
    float64: f64,
};
pub const PerformanceCounterResultKHR = union_PerformanceCounterResultKHR;
pub const struct_AcquireProfilingLockInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: AcquireProfilingLockFlagsKHR,
    timeout: u64,
};
pub const AcquireProfilingLockInfoKHR = struct_AcquireProfilingLockInfoKHR;
pub const struct_PerformanceQuerySubmitInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    counterPassIndex: u32,
};
pub const PerformanceQuerySubmitInfoKHR = struct_PerformanceQuerySubmitInfoKHR;
pub const PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = ?fn (PhysicalDevice, u32, [*c]u32, [*c]PerformanceCounterKHR, [*c]PerformanceCounterDescriptionKHR) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ?fn (PhysicalDevice, [*c]const QueryPoolPerformanceCreateInfoKHR, [*c]u32) callconv(.C) void;
pub const PFN_vkAcquireProfilingLockKHR = ?fn (Device, [*c]const AcquireProfilingLockInfoKHR) callconv(.C) Result;
pub const PFN_vkReleaseProfilingLockKHR = ?fn (Device) callconv(.C) void;
pub extern fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice: PhysicalDevice, queueFamilyIndex: u32, pCounterCount: [*c]u32, pCounters: [*c]PerformanceCounterKHR, pCounterDescriptions: [*c]PerformanceCounterDescriptionKHR) Result;
pub extern fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice: PhysicalDevice, pPerformanceQueryCreateInfo: [*c]const QueryPoolPerformanceCreateInfoKHR, pNumPasses: [*c]u32) void;
pub extern fn vkAcquireProfilingLockKHR(device: Device, pInfo: [*c]const AcquireProfilingLockInfoKHR) Result;
pub extern fn vkReleaseProfilingLockKHR(device: Device) void;
pub const PointClippingBehaviorKHR = PointClippingBehavior;
pub const TessellationDomainOriginKHR = TessellationDomainOrigin;
pub const PhysicalDevicePointClippingPropertiesKHR = PhysicalDevicePointClippingProperties;
pub const RenderPassInputAttachmentAspectCreateInfoKHR = RenderPassInputAttachmentAspectCreateInfo;
pub const InputAttachmentAspectReferenceKHR = InputAttachmentAspectReference;
pub const ImageViewUsageCreateInfoKHR = ImageViewUsageCreateInfo;
pub const PipelineTessellationDomainOriginStateCreateInfoKHR = PipelineTessellationDomainOriginStateCreateInfo;
pub const struct_PhysicalDeviceSurfaceInfo2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    surface: SurfaceKHR,
};
pub const PhysicalDeviceSurfaceInfo2KHR = struct_PhysicalDeviceSurfaceInfo2KHR;
pub const struct_SurfaceCapabilities2KHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    surfaceCapabilities: SurfaceCapabilitiesKHR,
};
pub const SurfaceCapabilities2KHR = struct_SurfaceCapabilities2KHR;
pub const struct_SurfaceFormat2KHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    surfaceFormat: SurfaceFormatKHR,
};
pub const SurfaceFormat2KHR = struct_SurfaceFormat2KHR;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ?fn (PhysicalDevice, [*c]const PhysicalDeviceSurfaceInfo2KHR, [*c]SurfaceCapabilities2KHR) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ?fn (PhysicalDevice, [*c]const PhysicalDeviceSurfaceInfo2KHR, [*c]u32, [*c]SurfaceFormat2KHR) callconv(.C) Result;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: PhysicalDevice, pSurfaceInfo: [*c]const PhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: [*c]SurfaceCapabilities2KHR) Result;
pub extern fn vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: PhysicalDevice, pSurfaceInfo: [*c]const PhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]SurfaceFormat2KHR) Result;
pub const PhysicalDeviceVariablePointerFeaturesKHR = PhysicalDeviceVariablePointersFeatures;
pub const PhysicalDeviceVariablePointersFeaturesKHR = PhysicalDeviceVariablePointersFeatures;
pub const struct_DisplayProperties2KHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    displayProperties: DisplayPropertiesKHR,
};
pub const DisplayProperties2KHR = struct_DisplayProperties2KHR;
pub const struct_DisplayPlaneProperties2KHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    displayPlaneProperties: DisplayPlanePropertiesKHR,
};
pub const DisplayPlaneProperties2KHR = struct_DisplayPlaneProperties2KHR;
pub const struct_DisplayModeProperties2KHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    displayModeProperties: DisplayModePropertiesKHR,
};
pub const DisplayModeProperties2KHR = struct_DisplayModeProperties2KHR;
pub const struct_DisplayPlaneInfo2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    mode: DisplayModeKHR,
    planeIndex: u32,
};
pub const DisplayPlaneInfo2KHR = struct_DisplayPlaneInfo2KHR;
pub const struct_DisplayPlaneCapabilities2KHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    capabilities: DisplayPlaneCapabilitiesKHR,
};
pub const DisplayPlaneCapabilities2KHR = struct_DisplayPlaneCapabilities2KHR;
pub const PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ?fn (PhysicalDevice, [*c]u32, [*c]DisplayProperties2KHR) callconv(.C) Result;
pub const PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ?fn (PhysicalDevice, [*c]u32, [*c]DisplayPlaneProperties2KHR) callconv(.C) Result;
pub const PFN_vkGetDisplayModeProperties2KHR = ?fn (PhysicalDevice, DisplayKHR, [*c]u32, [*c]DisplayModeProperties2KHR) callconv(.C) Result;
pub const PFN_vkGetDisplayPlaneCapabilities2KHR = ?fn (PhysicalDevice, [*c]const DisplayPlaneInfo2KHR, [*c]DisplayPlaneCapabilities2KHR) callconv(.C) Result;
pub extern fn vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: PhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]DisplayProperties2KHR) Result;
pub extern fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: PhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]DisplayPlaneProperties2KHR) Result;
pub extern fn vkGetDisplayModeProperties2KHR(physicalDevice: PhysicalDevice, display: DisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]DisplayModeProperties2KHR) Result;
pub extern fn vkGetDisplayPlaneCapabilities2KHR(physicalDevice: PhysicalDevice, pDisplayPlaneInfo: [*c]const DisplayPlaneInfo2KHR, pCapabilities: [*c]DisplayPlaneCapabilities2KHR) Result;
pub const MemoryDedicatedRequirementsKHR = MemoryDedicatedRequirements;
pub const MemoryDedicatedAllocateInfoKHR = MemoryDedicatedAllocateInfo;
pub const BufferMemoryRequirementsInfo2KHR = BufferMemoryRequirementsInfo2;
pub const ImageMemoryRequirementsInfo2KHR = ImageMemoryRequirementsInfo2;
pub const ImageSparseMemoryRequirementsInfo2KHR = ImageSparseMemoryRequirementsInfo2;
pub const MemoryRequirements2KHR = MemoryRequirements2;
pub const SparseImageMemoryRequirements2KHR = SparseImageMemoryRequirements2;
pub const PFN_vkGetImageMemoryRequirements2KHR = ?fn (Device, [*c]const ImageMemoryRequirementsInfo2, [*c]MemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2KHR = ?fn (Device, [*c]const BufferMemoryRequirementsInfo2, [*c]MemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2KHR = ?fn (Device, [*c]const ImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]SparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetImageMemoryRequirements2KHR(device: Device, pInfo: [*c]const ImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]MemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2KHR(device: Device, pInfo: [*c]const BufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]MemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2KHR(device: Device, pInfo: [*c]const ImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]SparseImageMemoryRequirements2) void;
pub const ImageFormatListCreateInfoKHR = ImageFormatListCreateInfo;
pub const SamplerYcbcrConversionKHR = SamplerYcbcrConversion;
pub const SamplerYcbcrModelConversionKHR = SamplerYcbcrModelConversion;
pub const SamplerYcbcrRangeKHR = SamplerYcbcrRange;
pub const ChromaLocationKHR = ChromaLocation;
pub const SamplerYcbcrConversionCreateInfoKHR = SamplerYcbcrConversionCreateInfo;
pub const SamplerYcbcrConversionInfoKHR = SamplerYcbcrConversionInfo;
pub const BindImagePlaneMemoryInfoKHR = BindImagePlaneMemoryInfo;
pub const ImagePlaneMemoryRequirementsInfoKHR = ImagePlaneMemoryRequirementsInfo;
pub const PhysicalDeviceSamplerYcbcrConversionFeaturesKHR = PhysicalDeviceSamplerYcbcrConversionFeatures;
pub const SamplerYcbcrConversionImageFormatPropertiesKHR = SamplerYcbcrConversionImageFormatProperties;
pub const PFN_vkCreateSamplerYcbcrConversionKHR = ?fn (Device, [*c]const SamplerYcbcrConversionCreateInfo, [*c]const AllocationCallbacks, [*c]SamplerYcbcrConversion) callconv(.C) Result;
pub const PFN_vkDestroySamplerYcbcrConversionKHR = ?fn (Device, SamplerYcbcrConversion, [*c]const AllocationCallbacks) callconv(.C) void;
pub extern fn vkCreateSamplerYcbcrConversionKHR(device: Device, pCreateInfo: [*c]const SamplerYcbcrConversionCreateInfo, pAllocator: [*c]const AllocationCallbacks, pYcbcrConversion: [*c]SamplerYcbcrConversion) Result;
pub extern fn vkDestroySamplerYcbcrConversionKHR(device: Device, ycbcrConversion: SamplerYcbcrConversion, pAllocator: [*c]const AllocationCallbacks) void;
pub const BindBufferMemoryInfoKHR = BindBufferMemoryInfo;
pub const BindImageMemoryInfoKHR = BindImageMemoryInfo;
pub const PFN_vkBindBufferMemory2KHR = ?fn (Device, u32, [*c]const BindBufferMemoryInfo) callconv(.C) Result;
pub const PFN_vkBindImageMemory2KHR = ?fn (Device, u32, [*c]const BindImageMemoryInfo) callconv(.C) Result;
pub extern fn vkBindBufferMemory2KHR(device: Device, bindInfoCount: u32, pBindInfos: [*c]const BindBufferMemoryInfo) Result;
pub extern fn vkBindImageMemory2KHR(device: Device, bindInfoCount: u32, pBindInfos: [*c]const BindImageMemoryInfo) Result;
pub const PhysicalDeviceMaintenance3PropertiesKHR = PhysicalDeviceMaintenance3Properties;
pub const DescriptorSetLayoutSupportKHR = DescriptorSetLayoutSupport;
pub const PFN_vkGetDescriptorSetLayoutSupportKHR = ?fn (Device, [*c]const DescriptorSetLayoutCreateInfo, [*c]DescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkGetDescriptorSetLayoutSupportKHR(device: Device, pCreateInfo: [*c]const DescriptorSetLayoutCreateInfo, pSupport: [*c]DescriptorSetLayoutSupport) void;
pub const PFN_vkCmdDrawIndirectCountKHR = ?fn (CommandBuffer, Buffer, DeviceSize, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountKHR = ?fn (CommandBuffer, Buffer, DeviceSize, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountKHR(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountKHR(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) void;
pub const PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = PhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const PhysicalDevice8BitStorageFeaturesKHR = PhysicalDevice8BitStorageFeatures;
pub const PhysicalDeviceShaderAtomicInt64FeaturesKHR = PhysicalDeviceShaderAtomicInt64Features;
pub const struct_PhysicalDeviceShaderClockFeaturesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderSubgroupClock: Bool32,
    shaderDeviceClock: Bool32,
};
pub const PhysicalDeviceShaderClockFeaturesKHR = struct_PhysicalDeviceShaderClockFeaturesKHR;
pub const DriverIdKHR = DriverId;
pub const ConformanceVersionKHR = ConformanceVersion;
pub const PhysicalDeviceDriverPropertiesKHR = PhysicalDeviceDriverProperties;
pub const ShaderFloatControlsIndependenceKHR = ShaderFloatControlsIndependence;
pub const PhysicalDeviceFloatControlsPropertiesKHR = PhysicalDeviceFloatControlsProperties;
pub const ResolveModeFlagBitsKHR = ResolveModeFlagBits;
pub const ResolveModeFlagsKHR = ResolveModeFlags;
pub const SubpassDescriptionDepthStencilResolveKHR = SubpassDescriptionDepthStencilResolve;
pub const PhysicalDeviceDepthStencilResolvePropertiesKHR = PhysicalDeviceDepthStencilResolveProperties;
pub const SemaphoreTypeKHR = SemaphoreType;
pub const SemaphoreWaitFlagBitsKHR = SemaphoreWaitFlagBits;
pub const SemaphoreWaitFlagsKHR = SemaphoreWaitFlags;
pub const PhysicalDeviceTimelineSemaphoreFeaturesKHR = PhysicalDeviceTimelineSemaphoreFeatures;
pub const PhysicalDeviceTimelineSemaphorePropertiesKHR = PhysicalDeviceTimelineSemaphoreProperties;
pub const SemaphoreTypeCreateInfoKHR = SemaphoreTypeCreateInfo;
pub const TimelineSemaphoreSubmitInfoKHR = TimelineSemaphoreSubmitInfo;
pub const SemaphoreWaitInfoKHR = SemaphoreWaitInfo;
pub const SemaphoreSignalInfoKHR = SemaphoreSignalInfo;
pub const PFN_vkGetSemaphoreCounterValueKHR = ?fn (Device, Semaphore, [*c]u64) callconv(.C) Result;
pub const PFN_vkWaitSemaphoresKHR = ?fn (Device, [*c]const SemaphoreWaitInfo, u64) callconv(.C) Result;
pub const PFN_vkSignalSemaphoreKHR = ?fn (Device, [*c]const SemaphoreSignalInfo) callconv(.C) Result;
pub extern fn vkGetSemaphoreCounterValueKHR(device: Device, semaphore: Semaphore, pValue: [*c]u64) Result;
pub extern fn vkWaitSemaphoresKHR(device: Device, pWaitInfo: [*c]const SemaphoreWaitInfo, timeout: u64) Result;
pub extern fn vkSignalSemaphoreKHR(device: Device, pSignalInfo: [*c]const SemaphoreSignalInfo) Result;
pub const PhysicalDeviceVulkanMemoryModelFeaturesKHR = PhysicalDeviceVulkanMemoryModelFeatures;
pub const struct_PhysicalDeviceShaderTerminateInvocationFeaturesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderTerminateInvocation: Bool32,
};
pub const PhysicalDeviceShaderTerminateInvocationFeaturesKHR = struct_PhysicalDeviceShaderTerminateInvocationFeaturesKHR;
pub const FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = @enumToInt(enum_FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR);
pub const FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = @enumToInt(enum_FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR);
pub const FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = @enumToInt(enum_FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR);
pub const FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = @enumToInt(enum_FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR);
pub const FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = @enumToInt(enum_FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR);
pub const FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = @enumToInt(enum_FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR);
pub const enum_FragmentShadingRateCombinerOpKHR = extern enum(c_int) {
    FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
    FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
    FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
    FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
    FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,
    FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const FragmentShadingRateCombinerOpKHR = enum_FragmentShadingRateCombinerOpKHR;
pub const struct_FragmentShadingRateAttachmentInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pFragmentShadingRateAttachment: [*c]const AttachmentReference2,
    shadingRateAttachmentTexelSize: Extent2D,
};
pub const FragmentShadingRateAttachmentInfoKHR = struct_FragmentShadingRateAttachmentInfoKHR;
pub const struct_PipelineFragmentShadingRateStateCreateInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    fragmentSize: Extent2D,
    combinerOps: [2]FragmentShadingRateCombinerOpKHR,
};
pub const PipelineFragmentShadingRateStateCreateInfoKHR = struct_PipelineFragmentShadingRateStateCreateInfoKHR;
pub const struct_PhysicalDeviceFragmentShadingRateFeaturesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    pipelineFragmentShadingRate: Bool32,
    primitiveFragmentShadingRate: Bool32,
    attachmentFragmentShadingRate: Bool32,
};
pub const PhysicalDeviceFragmentShadingRateFeaturesKHR = struct_PhysicalDeviceFragmentShadingRateFeaturesKHR;
pub const struct_PhysicalDeviceFragmentShadingRatePropertiesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    minFragmentShadingRateAttachmentTexelSize: Extent2D,
    maxFragmentShadingRateAttachmentTexelSize: Extent2D,
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32,
    primitiveFragmentShadingRateWithMultipleViewports: Bool32,
    layeredShadingRateAttachments: Bool32,
    fragmentShadingRateNonTrivialCombinerOps: Bool32,
    maxFragmentSize: Extent2D,
    maxFragmentSizeAspectRatio: u32,
    maxFragmentShadingRateCoverageSamples: u32,
    maxFragmentShadingRateRasterizationSamples: SampleCountFlagBits,
    fragmentShadingRateWithShaderDepthStencilWrites: Bool32,
    fragmentShadingRateWithSampleMask: Bool32,
    fragmentShadingRateWithShaderSampleMask: Bool32,
    fragmentShadingRateWithConservativeRasterization: Bool32,
    fragmentShadingRateWithFragmentShaderInterlock: Bool32,
    fragmentShadingRateWithCustomSampleLocations: Bool32,
    fragmentShadingRateStrictMultiplyCombiner: Bool32,
};
pub const PhysicalDeviceFragmentShadingRatePropertiesKHR = struct_PhysicalDeviceFragmentShadingRatePropertiesKHR;
pub const struct_PhysicalDeviceFragmentShadingRateKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    sampleCounts: SampleCountFlags,
    fragmentSize: Extent2D,
};
pub const PhysicalDeviceFragmentShadingRateKHR = struct_PhysicalDeviceFragmentShadingRateKHR;
pub const PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = ?fn (PhysicalDevice, [*c]u32, [*c]PhysicalDeviceFragmentShadingRateKHR) callconv(.C) Result;
pub const PFN_vkCmdSetFragmentShadingRateKHR = ?fn (CommandBuffer, [*c]const Extent2D, [*c]const FragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice: PhysicalDevice, pFragmentShadingRateCount: [*c]u32, pFragmentShadingRates: [*c]PhysicalDeviceFragmentShadingRateKHR) Result;
pub extern fn vkCmdSetFragmentShadingRateKHR(commandBuffer: CommandBuffer, pFragmentSize: [*c]const Extent2D, combinerOps: [*c]const FragmentShadingRateCombinerOpKHR) void;
pub const struct_SurfaceProtectedCapabilitiesKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    supportsProtected: Bool32,
};
pub const SurfaceProtectedCapabilitiesKHR = struct_SurfaceProtectedCapabilitiesKHR;
pub const PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = PhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const AttachmentReferenceStencilLayoutKHR = AttachmentReferenceStencilLayout;
pub const AttachmentDescriptionStencilLayoutKHR = AttachmentDescriptionStencilLayout;
pub const PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = PhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const PhysicalDeviceBufferDeviceAddressFeaturesKHR = PhysicalDeviceBufferDeviceAddressFeatures;
pub const BufferDeviceAddressInfoKHR = BufferDeviceAddressInfo;
pub const BufferOpaqueCaptureAddressCreateInfoKHR = BufferOpaqueCaptureAddressCreateInfo;
pub const MemoryOpaqueCaptureAddressAllocateInfoKHR = MemoryOpaqueCaptureAddressAllocateInfo;
pub const DeviceMemoryOpaqueCaptureAddressInfoKHR = DeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkGetBufferDeviceAddressKHR = ?fn (Device, [*c]const BufferDeviceAddressInfo) callconv(.C) DeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddressKHR = ?fn (Device, [*c]const BufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ?fn (Device, [*c]const DeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub extern fn vkGetBufferDeviceAddressKHR(device: Device, pInfo: [*c]const BufferDeviceAddressInfo) DeviceAddress;
pub extern fn vkGetBufferOpaqueCaptureAddressKHR(device: Device, pInfo: [*c]const BufferDeviceAddressInfo) u64;
pub extern fn vkGetDeviceMemoryOpaqueCaptureAddressKHR(device: Device, pInfo: [*c]const DeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = @enumToInt(enum_PipelineExecutableStatisticFormatKHR.PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR);
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = @enumToInt(enum_PipelineExecutableStatisticFormatKHR.PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR);
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = @enumToInt(enum_PipelineExecutableStatisticFormatKHR.PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR);
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = @enumToInt(enum_PipelineExecutableStatisticFormatKHR.PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR);
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = @enumToInt(enum_PipelineExecutableStatisticFormatKHR.PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR);
pub const enum_PipelineExecutableStatisticFormatKHR = extern enum(c_int) {
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const PipelineExecutableStatisticFormatKHR = enum_PipelineExecutableStatisticFormatKHR;
pub const struct_PhysicalDevicePipelineExecutablePropertiesFeaturesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    pipelineExecutableInfo: Bool32,
};
pub const PhysicalDevicePipelineExecutablePropertiesFeaturesKHR = struct_PhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
pub const struct_PipelineInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pipeline: Pipeline,
};
pub const PipelineInfoKHR = struct_PipelineInfoKHR;
pub const struct_PipelineExecutablePropertiesKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    stages: ShaderStageFlags,
    name: [256]u8,
    description: [256]u8,
    subgroupSize: u32,
};
pub const PipelineExecutablePropertiesKHR = struct_PipelineExecutablePropertiesKHR;
pub const struct_PipelineExecutableInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pipeline: Pipeline,
    executableIndex: u32,
};
pub const PipelineExecutableInfoKHR = struct_PipelineExecutableInfoKHR;
pub const union_PipelineExecutableStatisticValueKHR = extern union {
    b32: Bool32,
    i64: i64,
    u64: u64,
    f64: f64,
};
pub const PipelineExecutableStatisticValueKHR = union_PipelineExecutableStatisticValueKHR;
pub const struct_PipelineExecutableStatisticKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    name: [256]u8,
    description: [256]u8,
    format: PipelineExecutableStatisticFormatKHR,
    value: PipelineExecutableStatisticValueKHR,
};
pub const PipelineExecutableStatisticKHR = struct_PipelineExecutableStatisticKHR;
pub const struct_PipelineExecutableInternalRepresentationKHR = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    name: [256]u8,
    description: [256]u8,
    isText: Bool32,
    dataSize: usize,
    pData: ?*c_void,
};
pub const PipelineExecutableInternalRepresentationKHR = struct_PipelineExecutableInternalRepresentationKHR;
pub const PFN_vkGetPipelineExecutablePropertiesKHR = ?fn (Device, [*c]const PipelineInfoKHR, [*c]u32, [*c]PipelineExecutablePropertiesKHR) callconv(.C) Result;
pub const PFN_vkGetPipelineExecutableStatisticsKHR = ?fn (Device, [*c]const PipelineExecutableInfoKHR, [*c]u32, [*c]PipelineExecutableStatisticKHR) callconv(.C) Result;
pub const PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ?fn (Device, [*c]const PipelineExecutableInfoKHR, [*c]u32, [*c]PipelineExecutableInternalRepresentationKHR) callconv(.C) Result;
pub extern fn vkGetPipelineExecutablePropertiesKHR(device: Device, pPipelineInfo: [*c]const PipelineInfoKHR, pExecutableCount: [*c]u32, pProperties: [*c]PipelineExecutablePropertiesKHR) Result;
pub extern fn vkGetPipelineExecutableStatisticsKHR(device: Device, pExecutableInfo: [*c]const PipelineExecutableInfoKHR, pStatisticCount: [*c]u32, pStatistics: [*c]PipelineExecutableStatisticKHR) Result;
pub extern fn vkGetPipelineExecutableInternalRepresentationsKHR(device: Device, pExecutableInfo: [*c]const PipelineExecutableInfoKHR, pInternalRepresentationCount: [*c]u32, pInternalRepresentations: [*c]PipelineExecutableInternalRepresentationKHR) Result;
pub const struct_BufferCopy2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcOffset: DeviceSize,
    dstOffset: DeviceSize,
    size: DeviceSize,
};
pub const BufferCopy2KHR = struct_BufferCopy2KHR;
pub const struct_CopyBufferInfo2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcBuffer: Buffer,
    dstBuffer: Buffer,
    regionCount: u32,
    pRegions: [*c]const BufferCopy2KHR,
};
pub const CopyBufferInfo2KHR = struct_CopyBufferInfo2KHR;
pub const struct_ImageCopy2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcSubresource: ImageSubresourceLayers,
    srcOffset: Offset3D,
    dstSubresource: ImageSubresourceLayers,
    dstOffset: Offset3D,
    extent: Extent3D,
};
pub const ImageCopy2KHR = struct_ImageCopy2KHR;
pub const struct_CopyImageInfo2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcImage: Image,
    srcImageLayout: ImageLayout,
    dstImage: Image,
    dstImageLayout: ImageLayout,
    regionCount: u32,
    pRegions: [*c]const ImageCopy2KHR,
};
pub const CopyImageInfo2KHR = struct_CopyImageInfo2KHR;
pub const struct_BufferImageCopy2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    bufferOffset: DeviceSize,
    bufferRowLength: u32,
    bufferImageHeight: u32,
    imageSubresource: ImageSubresourceLayers,
    imageOffset: Offset3D,
    imageExtent: Extent3D,
};
pub const BufferImageCopy2KHR = struct_BufferImageCopy2KHR;
pub const struct_CopyBufferToImageInfo2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcBuffer: Buffer,
    dstImage: Image,
    dstImageLayout: ImageLayout,
    regionCount: u32,
    pRegions: [*c]const BufferImageCopy2KHR,
};
pub const CopyBufferToImageInfo2KHR = struct_CopyBufferToImageInfo2KHR;
pub const struct_CopyImageToBufferInfo2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcImage: Image,
    srcImageLayout: ImageLayout,
    dstBuffer: Buffer,
    regionCount: u32,
    pRegions: [*c]const BufferImageCopy2KHR,
};
pub const CopyImageToBufferInfo2KHR = struct_CopyImageToBufferInfo2KHR;
pub const struct_ImageBlit2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcSubresource: ImageSubresourceLayers,
    srcOffsets: [2]Offset3D,
    dstSubresource: ImageSubresourceLayers,
    dstOffsets: [2]Offset3D,
};
pub const ImageBlit2KHR = struct_ImageBlit2KHR;
pub const struct_BlitImageInfo2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcImage: Image,
    srcImageLayout: ImageLayout,
    dstImage: Image,
    dstImageLayout: ImageLayout,
    regionCount: u32,
    pRegions: [*c]const ImageBlit2KHR,
    filter: Filter,
};
pub const BlitImageInfo2KHR = struct_BlitImageInfo2KHR;
pub const struct_ImageResolve2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcSubresource: ImageSubresourceLayers,
    srcOffset: Offset3D,
    dstSubresource: ImageSubresourceLayers,
    dstOffset: Offset3D,
    extent: Extent3D,
};
pub const ImageResolve2KHR = struct_ImageResolve2KHR;
pub const struct_ResolveImageInfo2KHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcImage: Image,
    srcImageLayout: ImageLayout,
    dstImage: Image,
    dstImageLayout: ImageLayout,
    regionCount: u32,
    pRegions: [*c]const ImageResolve2KHR,
};
pub const ResolveImageInfo2KHR = struct_ResolveImageInfo2KHR;
pub const PFN_vkCmdCopyBuffer2KHR = ?fn (CommandBuffer, [*c]const CopyBufferInfo2KHR) callconv(.C) void;
pub const PFN_vkCmdCopyImage2KHR = ?fn (CommandBuffer, [*c]const CopyImageInfo2KHR) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage2KHR = ?fn (CommandBuffer, [*c]const CopyBufferToImageInfo2KHR) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer2KHR = ?fn (CommandBuffer, [*c]const CopyImageToBufferInfo2KHR) callconv(.C) void;
pub const PFN_vkCmdBlitImage2KHR = ?fn (CommandBuffer, [*c]const BlitImageInfo2KHR) callconv(.C) void;
pub const PFN_vkCmdResolveImage2KHR = ?fn (CommandBuffer, [*c]const ResolveImageInfo2KHR) callconv(.C) void;
pub extern fn vkCmdCopyBuffer2KHR(commandBuffer: CommandBuffer, pCopyBufferInfo: [*c]const CopyBufferInfo2KHR) void;
pub extern fn vkCmdCopyImage2KHR(commandBuffer: CommandBuffer, pCopyImageInfo: [*c]const CopyImageInfo2KHR) void;
pub extern fn vkCmdCopyBufferToImage2KHR(commandBuffer: CommandBuffer, pCopyBufferToImageInfo: [*c]const CopyBufferToImageInfo2KHR) void;
pub extern fn vkCmdCopyImageToBuffer2KHR(commandBuffer: CommandBuffer, pCopyImageToBufferInfo: [*c]const CopyImageToBufferInfo2KHR) void;
pub extern fn vkCmdBlitImage2KHR(commandBuffer: CommandBuffer, pBlitImageInfo: [*c]const BlitImageInfo2KHR) void;
pub extern fn vkCmdResolveImage2KHR(commandBuffer: CommandBuffer, pResolveImageInfo: [*c]const ResolveImageInfo2KHR) void;
pub const struct_DebugReportCallbackEXT_T = opaque {};
pub const DebugReportCallbackEXT = ?*struct_DebugReportCallbackEXT_T;
pub const DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT);
pub const DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = @enumToInt(enum_DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT);
pub const enum_DebugReportObjectTypeEXT = extern enum(c_int) {
    DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000165000,
    DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28,
    DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000,
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000,
    DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
    DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const DebugReportObjectTypeEXT = enum_DebugReportObjectTypeEXT;
pub const DEBUG_REPORT_INFORMATION_BIT_EXT = @enumToInt(enum_DebugReportFlagBitsEXT.DEBUG_REPORT_INFORMATION_BIT_EXT);
pub const DEBUG_REPORT_WARNING_BIT_EXT = @enumToInt(enum_DebugReportFlagBitsEXT.DEBUG_REPORT_WARNING_BIT_EXT);
pub const DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = @enumToInt(enum_DebugReportFlagBitsEXT.DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT);
pub const DEBUG_REPORT_ERROR_BIT_EXT = @enumToInt(enum_DebugReportFlagBitsEXT.DEBUG_REPORT_ERROR_BIT_EXT);
pub const DEBUG_REPORT_DEBUG_BIT_EXT = @enumToInt(enum_DebugReportFlagBitsEXT.DEBUG_REPORT_DEBUG_BIT_EXT);
pub const DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_DebugReportFlagBitsEXT.DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_DebugReportFlagBitsEXT = extern enum(c_int) {
    DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
    DEBUG_REPORT_WARNING_BIT_EXT = 2,
    DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
    DEBUG_REPORT_ERROR_BIT_EXT = 8,
    DEBUG_REPORT_DEBUG_BIT_EXT = 16,
    DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const DebugReportFlagBitsEXT = enum_DebugReportFlagBitsEXT;
pub const DebugReportFlagsEXT = Flags;
pub const PFN_vkDebugReportCallbackEXT = ?fn (DebugReportFlagsEXT, DebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8, ?*c_void) callconv(.C) Bool32;
pub const struct_DebugReportCallbackCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DebugReportFlagsEXT,
    pfnCallback: PFN_vkDebugReportCallbackEXT,
    pUserData: ?*c_void,
};
pub const DebugReportCallbackCreateInfoEXT = struct_DebugReportCallbackCreateInfoEXT;
pub const PFN_vkCreateDebugReportCallbackEXT = ?fn (Instance, [*c]const DebugReportCallbackCreateInfoEXT, [*c]const AllocationCallbacks, [*c]DebugReportCallbackEXT) callconv(.C) Result;
pub const PFN_vkDestroyDebugReportCallbackEXT = ?fn (Instance, DebugReportCallbackEXT, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkDebugReportMessageEXT = ?fn (Instance, DebugReportFlagsEXT, DebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8) callconv(.C) void;
pub extern fn vkCreateDebugReportCallbackEXT(instance: Instance, pCreateInfo: [*c]const DebugReportCallbackCreateInfoEXT, pAllocator: [*c]const AllocationCallbacks, pCallback: [*c]DebugReportCallbackEXT) Result;
pub extern fn vkDestroyDebugReportCallbackEXT(instance: Instance, callback: DebugReportCallbackEXT, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkDebugReportMessageEXT(instance: Instance, flags: DebugReportFlagsEXT, objectType: DebugReportObjectTypeEXT, object: u64, location: usize, messageCode: i32, pLayerPrefix: [*c]const u8, pMessage: [*c]const u8) void;
pub const RASTERIZATION_ORDER_STRICT_AMD = @enumToInt(enum_RasterizationOrderAMD.RASTERIZATION_ORDER_STRICT_AMD);
pub const RASTERIZATION_ORDER_RELAXED_AMD = @enumToInt(enum_RasterizationOrderAMD.RASTERIZATION_ORDER_RELAXED_AMD);
pub const RASTERIZATION_ORDER_MAX_ENUM_AMD = @enumToInt(enum_RasterizationOrderAMD.RASTERIZATION_ORDER_MAX_ENUM_AMD);
pub const enum_RasterizationOrderAMD = extern enum(c_int) {
    RASTERIZATION_ORDER_STRICT_AMD = 0,
    RASTERIZATION_ORDER_RELAXED_AMD = 1,
    RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const RasterizationOrderAMD = enum_RasterizationOrderAMD;
pub const struct_PipelineRasterizationStateRasterizationOrderAMD = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    rasterizationOrder: RasterizationOrderAMD,
};
pub const PipelineRasterizationStateRasterizationOrderAMD = struct_PipelineRasterizationStateRasterizationOrderAMD;
pub const struct_DebugMarkerObjectNameInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    objectType: DebugReportObjectTypeEXT,
    object: u64,
    pObjectName: [*c]const u8,
};
pub const DebugMarkerObjectNameInfoEXT = struct_DebugMarkerObjectNameInfoEXT;
pub const struct_DebugMarkerObjectTagInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    objectType: DebugReportObjectTypeEXT,
    object: u64,
    tagName: u64,
    tagSize: usize,
    pTag: ?*const c_void,
};
pub const DebugMarkerObjectTagInfoEXT = struct_DebugMarkerObjectTagInfoEXT;
pub const struct_DebugMarkerMarkerInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pMarkerName: [*c]const u8,
    color: [4]f32,
};
pub const DebugMarkerMarkerInfoEXT = struct_DebugMarkerMarkerInfoEXT;
pub const PFN_vkDebugMarkerSetObjectTagEXT = ?fn (Device, [*c]const DebugMarkerObjectTagInfoEXT) callconv(.C) Result;
pub const PFN_vkDebugMarkerSetObjectNameEXT = ?fn (Device, [*c]const DebugMarkerObjectNameInfoEXT) callconv(.C) Result;
pub const PFN_vkCmdDebugMarkerBeginEXT = ?fn (CommandBuffer, [*c]const DebugMarkerMarkerInfoEXT) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerEndEXT = ?fn (CommandBuffer) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerInsertEXT = ?fn (CommandBuffer, [*c]const DebugMarkerMarkerInfoEXT) callconv(.C) void;
pub extern fn vkDebugMarkerSetObjectTagEXT(device: Device, pTagInfo: [*c]const DebugMarkerObjectTagInfoEXT) Result;
pub extern fn vkDebugMarkerSetObjectNameEXT(device: Device, pNameInfo: [*c]const DebugMarkerObjectNameInfoEXT) Result;
pub extern fn vkCmdDebugMarkerBeginEXT(commandBuffer: CommandBuffer, pMarkerInfo: [*c]const DebugMarkerMarkerInfoEXT) void;
pub extern fn vkCmdDebugMarkerEndEXT(commandBuffer: CommandBuffer) void;
pub extern fn vkCmdDebugMarkerInsertEXT(commandBuffer: CommandBuffer, pMarkerInfo: [*c]const DebugMarkerMarkerInfoEXT) void;
pub const struct_DedicatedAllocationImageCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    dedicatedAllocation: Bool32,
};
pub const DedicatedAllocationImageCreateInfoNV = struct_DedicatedAllocationImageCreateInfoNV;
pub const struct_DedicatedAllocationBufferCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    dedicatedAllocation: Bool32,
};
pub const DedicatedAllocationBufferCreateInfoNV = struct_DedicatedAllocationBufferCreateInfoNV;
pub const struct_DedicatedAllocationMemoryAllocateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    image: Image,
    buffer: Buffer,
};
pub const DedicatedAllocationMemoryAllocateInfoNV = struct_DedicatedAllocationMemoryAllocateInfoNV;
pub const PipelineRasterizationStateStreamCreateFlagsEXT = Flags;
pub const struct_PhysicalDeviceTransformFeedbackFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    transformFeedback: Bool32,
    geometryStreams: Bool32,
};
pub const PhysicalDeviceTransformFeedbackFeaturesEXT = struct_PhysicalDeviceTransformFeedbackFeaturesEXT;
pub const struct_PhysicalDeviceTransformFeedbackPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxTransformFeedbackStreams: u32,
    maxTransformFeedbackBuffers: u32,
    maxTransformFeedbackBufferSize: DeviceSize,
    maxTransformFeedbackStreamDataSize: u32,
    maxTransformFeedbackBufferDataSize: u32,
    maxTransformFeedbackBufferDataStride: u32,
    transformFeedbackQueries: Bool32,
    transformFeedbackStreamsLinesTriangles: Bool32,
    transformFeedbackRasterizationStreamSelect: Bool32,
    transformFeedbackDraw: Bool32,
};
pub const PhysicalDeviceTransformFeedbackPropertiesEXT = struct_PhysicalDeviceTransformFeedbackPropertiesEXT;
pub const struct_PipelineRasterizationStateStreamCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineRasterizationStateStreamCreateFlagsEXT,
    rasterizationStream: u32,
};
pub const PipelineRasterizationStateStreamCreateInfoEXT = struct_PipelineRasterizationStateStreamCreateInfoEXT;
pub const PFN_vkCmdBindTransformFeedbackBuffersEXT = ?fn (CommandBuffer, u32, u32, [*c]const Buffer, [*c]const DeviceSize, [*c]const DeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginTransformFeedbackEXT = ?fn (CommandBuffer, u32, u32, [*c]const Buffer, [*c]const DeviceSize) callconv(.C) void;
pub const PFN_vkCmdEndTransformFeedbackEXT = ?fn (CommandBuffer, u32, u32, [*c]const Buffer, [*c]const DeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginQueryIndexedEXT = ?fn (CommandBuffer, QueryPool, u32, QueryControlFlags, u32) callconv(.C) void;
pub const PFN_vkCmdEndQueryIndexedEXT = ?fn (CommandBuffer, QueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirectByteCountEXT = ?fn (CommandBuffer, u32, u32, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const Buffer, pOffsets: [*c]const DeviceSize, pSizes: [*c]const DeviceSize) void;
pub extern fn vkCmdBeginTransformFeedbackEXT(commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const Buffer, pCounterBufferOffsets: [*c]const DeviceSize) void;
pub extern fn vkCmdEndTransformFeedbackEXT(commandBuffer: CommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const Buffer, pCounterBufferOffsets: [*c]const DeviceSize) void;
pub extern fn vkCmdBeginQueryIndexedEXT(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, flags: QueryControlFlags, index: u32) void;
pub extern fn vkCmdEndQueryIndexedEXT(commandBuffer: CommandBuffer, queryPool: QueryPool, query: u32, index: u32) void;
pub extern fn vkCmdDrawIndirectByteCountEXT(commandBuffer: CommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: Buffer, counterBufferOffset: DeviceSize, counterOffset: u32, vertexStride: u32) void;
pub const struct_ImageViewHandleInfoNVX = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    imageView: ImageView,
    descriptorType: DescriptorType,
    sampler: Sampler,
};
pub const ImageViewHandleInfoNVX = struct_ImageViewHandleInfoNVX;
pub const struct_ImageViewAddressPropertiesNVX = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    deviceAddress: DeviceAddress,
    size: DeviceSize,
};
pub const ImageViewAddressPropertiesNVX = struct_ImageViewAddressPropertiesNVX;
pub const PFN_vkGetImageViewHandleNVX = ?fn (Device, [*c]const ImageViewHandleInfoNVX) callconv(.C) u32;
pub const PFN_vkGetImageViewAddressNVX = ?fn (Device, ImageView, [*c]ImageViewAddressPropertiesNVX) callconv(.C) Result;
pub extern fn vkGetImageViewHandleNVX(device: Device, pInfo: [*c]const ImageViewHandleInfoNVX) u32;
pub extern fn vkGetImageViewAddressNVX(device: Device, imageView: ImageView, pProperties: [*c]ImageViewAddressPropertiesNVX) Result;
pub const PFN_vkCmdDrawIndirectCountAMD = ?fn (CommandBuffer, Buffer, DeviceSize, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountAMD = ?fn (CommandBuffer, Buffer, DeviceSize, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountAMD(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountAMD(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) void;
pub const struct_TextureLODGatherFormatPropertiesAMD = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    supportsTextureGatherLODBiasAMD: Bool32,
};
pub const TextureLODGatherFormatPropertiesAMD = struct_TextureLODGatherFormatPropertiesAMD;
pub const SHADER_INFO_TYPE_STATISTICS_AMD = @enumToInt(enum_ShaderInfoTypeAMD.SHADER_INFO_TYPE_STATISTICS_AMD);
pub const SHADER_INFO_TYPE_BINARY_AMD = @enumToInt(enum_ShaderInfoTypeAMD.SHADER_INFO_TYPE_BINARY_AMD);
pub const SHADER_INFO_TYPE_DISASSEMBLY_AMD = @enumToInt(enum_ShaderInfoTypeAMD.SHADER_INFO_TYPE_DISASSEMBLY_AMD);
pub const SHADER_INFO_TYPE_MAX_ENUM_AMD = @enumToInt(enum_ShaderInfoTypeAMD.SHADER_INFO_TYPE_MAX_ENUM_AMD);
pub const enum_ShaderInfoTypeAMD = extern enum(c_int) {
    SHADER_INFO_TYPE_STATISTICS_AMD = 0,
    SHADER_INFO_TYPE_BINARY_AMD = 1,
    SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const ShaderInfoTypeAMD = enum_ShaderInfoTypeAMD;
pub const struct_ShaderResourceUsageAMD = extern struct {
    numUsedVgprs: u32,
    numUsedSgprs: u32,
    ldsSizePerLocalWorkGroup: u32,
    ldsUsageSizeInBytes: usize,
    scratchMemUsageInBytes: usize,
};
pub const ShaderResourceUsageAMD = struct_ShaderResourceUsageAMD;
pub const struct_ShaderStatisticsInfoAMD = extern struct {
    shaderStageMask: ShaderStageFlags,
    resourceUsage: ShaderResourceUsageAMD,
    numPhysicalVgprs: u32,
    numPhysicalSgprs: u32,
    numAvailableVgprs: u32,
    numAvailableSgprs: u32,
    computeWorkGroupSize: [3]u32,
};
pub const ShaderStatisticsInfoAMD = struct_ShaderStatisticsInfoAMD;
pub const PFN_vkGetShaderInfoAMD = ?fn (Device, Pipeline, ShaderStageFlagBits, ShaderInfoTypeAMD, [*c]usize, ?*c_void) callconv(.C) Result;
pub extern fn vkGetShaderInfoAMD(device: Device, pipeline: Pipeline, shaderStage: ShaderStageFlagBits, infoType: ShaderInfoTypeAMD, pInfoSize: [*c]usize, pInfo: ?*c_void) Result;
pub const struct_PhysicalDeviceCornerSampledImageFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    cornerSampledImage: Bool32,
};
pub const PhysicalDeviceCornerSampledImageFeaturesNV = struct_PhysicalDeviceCornerSampledImageFeaturesNV;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = @enumToInt(enum_ExternalMemoryHandleTypeFlagBitsNV.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = @enumToInt(enum_ExternalMemoryHandleTypeFlagBitsNV.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = @enumToInt(enum_ExternalMemoryHandleTypeFlagBitsNV.EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = @enumToInt(enum_ExternalMemoryHandleTypeFlagBitsNV.EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV);
pub const EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_ExternalMemoryHandleTypeFlagBitsNV.EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV);
pub const enum_ExternalMemoryHandleTypeFlagBitsNV = extern enum(c_int) {
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8,
    EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const ExternalMemoryHandleTypeFlagBitsNV = enum_ExternalMemoryHandleTypeFlagBitsNV;
pub const ExternalMemoryHandleTypeFlagsNV = Flags;
pub const EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = @enumToInt(enum_ExternalMemoryFeatureFlagBitsNV.EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV);
pub const EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = @enumToInt(enum_ExternalMemoryFeatureFlagBitsNV.EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV);
pub const EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = @enumToInt(enum_ExternalMemoryFeatureFlagBitsNV.EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV);
pub const EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_ExternalMemoryFeatureFlagBitsNV.EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV);
pub const enum_ExternalMemoryFeatureFlagBitsNV = extern enum(c_int) {
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
    EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const ExternalMemoryFeatureFlagBitsNV = enum_ExternalMemoryFeatureFlagBitsNV;
pub const ExternalMemoryFeatureFlagsNV = Flags;
pub const struct_ExternalImageFormatPropertiesNV = extern struct {
    imageFormatProperties: ImageFormatProperties,
    externalMemoryFeatures: ExternalMemoryFeatureFlagsNV,
    exportFromImportedHandleTypes: ExternalMemoryHandleTypeFlagsNV,
    compatibleHandleTypes: ExternalMemoryHandleTypeFlagsNV,
};
pub const ExternalImageFormatPropertiesNV = struct_ExternalImageFormatPropertiesNV;
pub const PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ?fn (PhysicalDevice, Format, ImageType, ImageTiling, ImageUsageFlags, ImageCreateFlags, ExternalMemoryHandleTypeFlagsNV, [*c]ExternalImageFormatPropertiesNV) callconv(.C) Result;
pub extern fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: PhysicalDevice, format: Format, type: ImageType, tiling: ImageTiling, usage: ImageUsageFlags, flags: ImageCreateFlags, externalHandleType: ExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: [*c]ExternalImageFormatPropertiesNV) Result;
pub const struct_ExternalMemoryImageCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleTypes: ExternalMemoryHandleTypeFlagsNV,
};
pub const ExternalMemoryImageCreateInfoNV = struct_ExternalMemoryImageCreateInfoNV;
pub const struct_ExportMemoryAllocateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleTypes: ExternalMemoryHandleTypeFlagsNV,
};
pub const ExportMemoryAllocateInfoNV = struct_ExportMemoryAllocateInfoNV;
pub const VALIDATION_CHECK_ALL_EXT = @enumToInt(enum_ValidationCheckEXT.VALIDATION_CHECK_ALL_EXT);
pub const VALIDATION_CHECK_SHADERS_EXT = @enumToInt(enum_ValidationCheckEXT.VALIDATION_CHECK_SHADERS_EXT);
pub const VALIDATION_CHECK_MAX_ENUM_EXT = @enumToInt(enum_ValidationCheckEXT.VALIDATION_CHECK_MAX_ENUM_EXT);
pub const enum_ValidationCheckEXT = extern enum(c_int) {
    VALIDATION_CHECK_ALL_EXT = 0,
    VALIDATION_CHECK_SHADERS_EXT = 1,
    VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const ValidationCheckEXT = enum_ValidationCheckEXT;
pub const struct_ValidationFlagsEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    disabledValidationCheckCount: u32,
    pDisabledValidationChecks: [*c]const ValidationCheckEXT,
};
pub const ValidationFlagsEXT = struct_ValidationFlagsEXT;
pub const struct_PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    textureCompressionASTC_HDR: Bool32,
};
pub const PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = struct_PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;
pub const struct_ImageViewASTCDecodeModeEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    decodeMode: Format,
};
pub const ImageViewASTCDecodeModeEXT = struct_ImageViewASTCDecodeModeEXT;
pub const struct_PhysicalDeviceASTCDecodeFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    decodeModeSharedExponent: Bool32,
};
pub const PhysicalDeviceASTCDecodeFeaturesEXT = struct_PhysicalDeviceASTCDecodeFeaturesEXT;
pub const CONDITIONAL_RENDERING_INVERTED_BIT_EXT = @enumToInt(enum_ConditionalRenderingFlagBitsEXT.CONDITIONAL_RENDERING_INVERTED_BIT_EXT);
pub const CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_ConditionalRenderingFlagBitsEXT.CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_ConditionalRenderingFlagBitsEXT = extern enum(c_int) {
    CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1,
    CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const ConditionalRenderingFlagBitsEXT = enum_ConditionalRenderingFlagBitsEXT;
pub const ConditionalRenderingFlagsEXT = Flags;
pub const struct_ConditionalRenderingBeginInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    buffer: Buffer,
    offset: DeviceSize,
    flags: ConditionalRenderingFlagsEXT,
};
pub const ConditionalRenderingBeginInfoEXT = struct_ConditionalRenderingBeginInfoEXT;
pub const struct_PhysicalDeviceConditionalRenderingFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    conditionalRendering: Bool32,
    inheritedConditionalRendering: Bool32,
};
pub const PhysicalDeviceConditionalRenderingFeaturesEXT = struct_PhysicalDeviceConditionalRenderingFeaturesEXT;
pub const struct_CommandBufferInheritanceConditionalRenderingInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    conditionalRenderingEnable: Bool32,
};
pub const CommandBufferInheritanceConditionalRenderingInfoEXT = struct_CommandBufferInheritanceConditionalRenderingInfoEXT;
pub const PFN_vkCmdBeginConditionalRenderingEXT = ?fn (CommandBuffer, [*c]const ConditionalRenderingBeginInfoEXT) callconv(.C) void;
pub const PFN_vkCmdEndConditionalRenderingEXT = ?fn (CommandBuffer) callconv(.C) void;
pub extern fn vkCmdBeginConditionalRenderingEXT(commandBuffer: CommandBuffer, pConditionalRenderingBegin: [*c]const ConditionalRenderingBeginInfoEXT) void;
pub extern fn vkCmdEndConditionalRenderingEXT(commandBuffer: CommandBuffer) void;
pub const struct_ViewportWScalingNV = extern struct {
    xcoeff: f32,
    ycoeff: f32,
};
pub const ViewportWScalingNV = struct_ViewportWScalingNV;
pub const struct_PipelineViewportWScalingStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    viewportWScalingEnable: Bool32,
    viewportCount: u32,
    pViewportWScalings: [*c]const ViewportWScalingNV,
};
pub const PipelineViewportWScalingStateCreateInfoNV = struct_PipelineViewportWScalingStateCreateInfoNV;
pub const PFN_vkCmdSetViewportWScalingNV = ?fn (CommandBuffer, u32, u32, [*c]const ViewportWScalingNV) callconv(.C) void;
pub extern fn vkCmdSetViewportWScalingNV(commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: [*c]const ViewportWScalingNV) void;
pub const PFN_vkReleaseDisplayEXT = ?fn (PhysicalDevice, DisplayKHR) callconv(.C) Result;
pub extern fn vkReleaseDisplayEXT(physicalDevice: PhysicalDevice, display: DisplayKHR) Result;
pub const SURFACE_COUNTER_VBLANK_BIT_EXT = @enumToInt(enum_SurfaceCounterFlagBitsEXT.SURFACE_COUNTER_VBLANK_BIT_EXT);
pub const SURFACE_COUNTER_VBLANK_EXT = @enumToInt(enum_SurfaceCounterFlagBitsEXT.SURFACE_COUNTER_VBLANK_EXT);
pub const SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_SurfaceCounterFlagBitsEXT.SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_SurfaceCounterFlagBitsEXT = extern enum(c_int) {
    SURFACE_COUNTER_VBLANK_BIT_EXT = 1,
    SURFACE_COUNTER_VBLANK_EXT = 1,
    SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const SurfaceCounterFlagBitsEXT = enum_SurfaceCounterFlagBitsEXT;
pub const SurfaceCounterFlagsEXT = Flags;
pub const struct_SurfaceCapabilities2EXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: Extent2D,
    minImageExtent: Extent2D,
    maxImageExtent: Extent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: SurfaceTransformFlagsKHR,
    currentTransform: SurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: CompositeAlphaFlagsKHR,
    supportedUsageFlags: ImageUsageFlags,
    supportedSurfaceCounters: SurfaceCounterFlagsEXT,
};
pub const SurfaceCapabilities2EXT = struct_SurfaceCapabilities2EXT;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ?fn (PhysicalDevice, SurfaceKHR, [*c]SurfaceCapabilities2EXT) callconv(.C) Result;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: PhysicalDevice, surface: SurfaceKHR, pSurfaceCapabilities: [*c]SurfaceCapabilities2EXT) Result;
pub const DISPLAY_POWER_STATE_OFF_EXT = @enumToInt(enum_DisplayPowerStateEXT.DISPLAY_POWER_STATE_OFF_EXT);
pub const DISPLAY_POWER_STATE_SUSPEND_EXT = @enumToInt(enum_DisplayPowerStateEXT.DISPLAY_POWER_STATE_SUSPEND_EXT);
pub const DISPLAY_POWER_STATE_ON_EXT = @enumToInt(enum_DisplayPowerStateEXT.DISPLAY_POWER_STATE_ON_EXT);
pub const DISPLAY_POWER_STATE_MAX_ENUM_EXT = @enumToInt(enum_DisplayPowerStateEXT.DISPLAY_POWER_STATE_MAX_ENUM_EXT);
pub const enum_DisplayPowerStateEXT = extern enum(c_int) {
    DISPLAY_POWER_STATE_OFF_EXT = 0,
    DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
    DISPLAY_POWER_STATE_ON_EXT = 2,
    DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const DisplayPowerStateEXT = enum_DisplayPowerStateEXT;
pub const DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = @enumToInt(enum_DeviceEventTypeEXT.DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT);
pub const DEVICE_EVENT_TYPE_MAX_ENUM_EXT = @enumToInt(enum_DeviceEventTypeEXT.DEVICE_EVENT_TYPE_MAX_ENUM_EXT);
pub const enum_DeviceEventTypeEXT = extern enum(c_int) {
    DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const DeviceEventTypeEXT = enum_DeviceEventTypeEXT;
pub const DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = @enumToInt(enum_DisplayEventTypeEXT.DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT);
pub const DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = @enumToInt(enum_DisplayEventTypeEXT.DISPLAY_EVENT_TYPE_MAX_ENUM_EXT);
pub const enum_DisplayEventTypeEXT = extern enum(c_int) {
    DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const DisplayEventTypeEXT = enum_DisplayEventTypeEXT;
pub const struct_DisplayPowerInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    powerState: DisplayPowerStateEXT,
};
pub const DisplayPowerInfoEXT = struct_DisplayPowerInfoEXT;
pub const struct_DeviceEventInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    deviceEvent: DeviceEventTypeEXT,
};
pub const DeviceEventInfoEXT = struct_DeviceEventInfoEXT;
pub const struct_DisplayEventInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    displayEvent: DisplayEventTypeEXT,
};
pub const DisplayEventInfoEXT = struct_DisplayEventInfoEXT;
pub const struct_SwapchainCounterCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    surfaceCounters: SurfaceCounterFlagsEXT,
};
pub const SwapchainCounterCreateInfoEXT = struct_SwapchainCounterCreateInfoEXT;
pub const PFN_vkDisplayPowerControlEXT = ?fn (Device, DisplayKHR, [*c]const DisplayPowerInfoEXT) callconv(.C) Result;
pub const PFN_vkRegisterDeviceEventEXT = ?fn (Device, [*c]const DeviceEventInfoEXT, [*c]const AllocationCallbacks, [*c]Fence) callconv(.C) Result;
pub const PFN_vkRegisterDisplayEventEXT = ?fn (Device, DisplayKHR, [*c]const DisplayEventInfoEXT, [*c]const AllocationCallbacks, [*c]Fence) callconv(.C) Result;
pub const PFN_vkGetSwapchainCounterEXT = ?fn (Device, SwapchainKHR, SurfaceCounterFlagBitsEXT, [*c]u64) callconv(.C) Result;
pub extern fn vkDisplayPowerControlEXT(device: Device, display: DisplayKHR, pDisplayPowerInfo: [*c]const DisplayPowerInfoEXT) Result;
pub extern fn vkRegisterDeviceEventEXT(device: Device, pDeviceEventInfo: [*c]const DeviceEventInfoEXT, pAllocator: [*c]const AllocationCallbacks, pFence: [*c]Fence) Result;
pub extern fn vkRegisterDisplayEventEXT(device: Device, display: DisplayKHR, pDisplayEventInfo: [*c]const DisplayEventInfoEXT, pAllocator: [*c]const AllocationCallbacks, pFence: [*c]Fence) Result;
pub extern fn vkGetSwapchainCounterEXT(device: Device, swapchain: SwapchainKHR, counter: SurfaceCounterFlagBitsEXT, pCounterValue: [*c]u64) Result;
pub const struct_RefreshCycleDurationGOOGLE = extern struct {
    refreshDuration: u64,
};
pub const RefreshCycleDurationGOOGLE = struct_RefreshCycleDurationGOOGLE;
pub const struct_PastPresentationTimingGOOGLE = extern struct {
    presentID: u32,
    desiredPresentTime: u64,
    actualPresentTime: u64,
    earliestPresentTime: u64,
    presentMargin: u64,
};
pub const PastPresentationTimingGOOGLE = struct_PastPresentationTimingGOOGLE;
pub const struct_PresentTimeGOOGLE = extern struct {
    presentID: u32,
    desiredPresentTime: u64,
};
pub const PresentTimeGOOGLE = struct_PresentTimeGOOGLE;
pub const struct_PresentTimesInfoGOOGLE = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    swapchainCount: u32,
    pTimes: [*c]const PresentTimeGOOGLE,
};
pub const PresentTimesInfoGOOGLE = struct_PresentTimesInfoGOOGLE;
pub const PFN_vkGetRefreshCycleDurationGOOGLE = ?fn (Device, SwapchainKHR, [*c]RefreshCycleDurationGOOGLE) callconv(.C) Result;
pub const PFN_vkGetPastPresentationTimingGOOGLE = ?fn (Device, SwapchainKHR, [*c]u32, [*c]PastPresentationTimingGOOGLE) callconv(.C) Result;
pub extern fn vkGetRefreshCycleDurationGOOGLE(device: Device, swapchain: SwapchainKHR, pDisplayTimingProperties: [*c]RefreshCycleDurationGOOGLE) Result;
pub extern fn vkGetPastPresentationTimingGOOGLE(device: Device, swapchain: SwapchainKHR, pPresentationTimingCount: [*c]u32, pPresentationTimings: [*c]PastPresentationTimingGOOGLE) Result;
pub const struct_PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    perViewPositionAllComponents: Bool32,
};
pub const PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = struct_PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
pub const VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = @enumToInt(enum_ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV);
pub const VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = @enumToInt(enum_ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV);
pub const VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = @enumToInt(enum_ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV);
pub const VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = @enumToInt(enum_ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV);
pub const VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = @enumToInt(enum_ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV);
pub const VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = @enumToInt(enum_ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV);
pub const VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = @enumToInt(enum_ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV);
pub const VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = @enumToInt(enum_ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV);
pub const VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = @enumToInt(enum_ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV);
pub const enum_ViewportCoordinateSwizzleNV = extern enum(c_int) {
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const ViewportCoordinateSwizzleNV = enum_ViewportCoordinateSwizzleNV;
pub const PipelineViewportSwizzleStateCreateFlagsNV = Flags;
pub const struct_ViewportSwizzleNV = extern struct {
    x: ViewportCoordinateSwizzleNV,
    y: ViewportCoordinateSwizzleNV,
    z: ViewportCoordinateSwizzleNV,
    w: ViewportCoordinateSwizzleNV,
};
pub const ViewportSwizzleNV = struct_ViewportSwizzleNV;
pub const struct_PipelineViewportSwizzleStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineViewportSwizzleStateCreateFlagsNV,
    viewportCount: u32,
    pViewportSwizzles: [*c]const ViewportSwizzleNV,
};
pub const PipelineViewportSwizzleStateCreateInfoNV = struct_PipelineViewportSwizzleStateCreateInfoNV;
pub const DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = @enumToInt(enum_DiscardRectangleModeEXT.DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT);
pub const DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = @enumToInt(enum_DiscardRectangleModeEXT.DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT);
pub const DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = @enumToInt(enum_DiscardRectangleModeEXT.DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT);
pub const enum_DiscardRectangleModeEXT = extern enum(c_int) {
    DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const DiscardRectangleModeEXT = enum_DiscardRectangleModeEXT;
pub const PipelineDiscardRectangleStateCreateFlagsEXT = Flags;
pub const struct_PhysicalDeviceDiscardRectanglePropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxDiscardRectangles: u32,
};
pub const PhysicalDeviceDiscardRectanglePropertiesEXT = struct_PhysicalDeviceDiscardRectanglePropertiesEXT;
pub const struct_PipelineDiscardRectangleStateCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineDiscardRectangleStateCreateFlagsEXT,
    discardRectangleMode: DiscardRectangleModeEXT,
    discardRectangleCount: u32,
    pDiscardRectangles: [*c]const Rect2D,
};
pub const PipelineDiscardRectangleStateCreateInfoEXT = struct_PipelineDiscardRectangleStateCreateInfoEXT;
pub const PFN_vkCmdSetDiscardRectangleEXT = ?fn (CommandBuffer, u32, u32, [*c]const Rect2D) callconv(.C) void;
pub extern fn vkCmdSetDiscardRectangleEXT(commandBuffer: CommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: [*c]const Rect2D) void;
pub const CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = @enumToInt(enum_ConservativeRasterizationModeEXT.CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT);
pub const CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = @enumToInt(enum_ConservativeRasterizationModeEXT.CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT);
pub const CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = @enumToInt(enum_ConservativeRasterizationModeEXT.CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT);
pub const CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = @enumToInt(enum_ConservativeRasterizationModeEXT.CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT);
pub const enum_ConservativeRasterizationModeEXT = extern enum(c_int) {
    CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
    CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
    CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const ConservativeRasterizationModeEXT = enum_ConservativeRasterizationModeEXT;
pub const PipelineRasterizationConservativeStateCreateFlagsEXT = Flags;
pub const struct_PhysicalDeviceConservativeRasterizationPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    primitiveOverestimationSize: f32,
    maxExtraPrimitiveOverestimationSize: f32,
    extraPrimitiveOverestimationSizeGranularity: f32,
    primitiveUnderestimation: Bool32,
    conservativePointAndLineRasterization: Bool32,
    degenerateTrianglesRasterized: Bool32,
    degenerateLinesRasterized: Bool32,
    fullyCoveredFragmentShaderInputVariable: Bool32,
    conservativeRasterizationPostDepthCoverage: Bool32,
};
pub const PhysicalDeviceConservativeRasterizationPropertiesEXT = struct_PhysicalDeviceConservativeRasterizationPropertiesEXT;
pub const struct_PipelineRasterizationConservativeStateCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineRasterizationConservativeStateCreateFlagsEXT,
    conservativeRasterizationMode: ConservativeRasterizationModeEXT,
    extraPrimitiveOverestimationSize: f32,
};
pub const PipelineRasterizationConservativeStateCreateInfoEXT = struct_PipelineRasterizationConservativeStateCreateInfoEXT;
pub const PipelineRasterizationDepthClipStateCreateFlagsEXT = Flags;
pub const struct_PhysicalDeviceDepthClipEnableFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    depthClipEnable: Bool32,
};
pub const PhysicalDeviceDepthClipEnableFeaturesEXT = struct_PhysicalDeviceDepthClipEnableFeaturesEXT;
pub const struct_PipelineRasterizationDepthClipStateCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineRasterizationDepthClipStateCreateFlagsEXT,
    depthClipEnable: Bool32,
};
pub const PipelineRasterizationDepthClipStateCreateInfoEXT = struct_PipelineRasterizationDepthClipStateCreateInfoEXT;
pub const struct_XYColorEXT = extern struct {
    x: f32,
    y: f32,
};
pub const XYColorEXT = struct_XYColorEXT;
pub const struct_HdrMetadataEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    displayPrimaryRed: XYColorEXT,
    displayPrimaryGreen: XYColorEXT,
    displayPrimaryBlue: XYColorEXT,
    whitePoint: XYColorEXT,
    maxLuminance: f32,
    minLuminance: f32,
    maxContentLightLevel: f32,
    maxFrameAverageLightLevel: f32,
};
pub const HdrMetadataEXT = struct_HdrMetadataEXT;
pub const PFN_vkSetHdrMetadataEXT = ?fn (Device, u32, [*c]const SwapchainKHR, [*c]const HdrMetadataEXT) callconv(.C) void;
pub extern fn vkSetHdrMetadataEXT(device: Device, swapchainCount: u32, pSwapchains: [*c]const SwapchainKHR, pMetadata: [*c]const HdrMetadataEXT) void;
pub const struct_DebugUtilsMessengerEXT_T = opaque {};
pub const DebugUtilsMessengerEXT = ?*struct_DebugUtilsMessengerEXT_T;
pub const DebugUtilsMessengerCallbackDataFlagsEXT = Flags;
pub const DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = @enumToInt(enum_DebugUtilsMessageSeverityFlagBitsEXT.DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT);
pub const DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = @enumToInt(enum_DebugUtilsMessageSeverityFlagBitsEXT.DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT);
pub const DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = @enumToInt(enum_DebugUtilsMessageSeverityFlagBitsEXT.DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT);
pub const DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = @enumToInt(enum_DebugUtilsMessageSeverityFlagBitsEXT.DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT);
pub const DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_DebugUtilsMessageSeverityFlagBitsEXT.DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_DebugUtilsMessageSeverityFlagBitsEXT = extern enum(c_int) {
    DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
    DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
    DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
    DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
    DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const DebugUtilsMessageSeverityFlagBitsEXT = enum_DebugUtilsMessageSeverityFlagBitsEXT;
pub const DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = @enumToInt(enum_DebugUtilsMessageTypeFlagBitsEXT.DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT);
pub const DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = @enumToInt(enum_DebugUtilsMessageTypeFlagBitsEXT.DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT);
pub const DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = @enumToInt(enum_DebugUtilsMessageTypeFlagBitsEXT.DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT);
pub const DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_DebugUtilsMessageTypeFlagBitsEXT.DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_DebugUtilsMessageTypeFlagBitsEXT = extern enum(c_int) {
    DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
    DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
    DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
    DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const DebugUtilsMessageTypeFlagBitsEXT = enum_DebugUtilsMessageTypeFlagBitsEXT;
pub const DebugUtilsMessageTypeFlagsEXT = Flags;
pub const DebugUtilsMessageSeverityFlagsEXT = Flags;
pub const DebugUtilsMessengerCreateFlagsEXT = Flags;
pub const struct_DebugUtilsLabelEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pLabelName: [*c]const u8,
    color: [4]f32,
};
pub const DebugUtilsLabelEXT = struct_DebugUtilsLabelEXT;
pub const struct_DebugUtilsObjectNameInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    objectType: ObjectType,
    objectHandle: u64,
    pObjectName: [*c]const u8,
};
pub const DebugUtilsObjectNameInfoEXT = struct_DebugUtilsObjectNameInfoEXT;
pub const struct_DebugUtilsMessengerCallbackDataEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DebugUtilsMessengerCallbackDataFlagsEXT,
    pMessageIdName: [*c]const u8,
    messageIdNumber: i32,
    pMessage: [*c]const u8,
    queueLabelCount: u32,
    pQueueLabels: [*c]const DebugUtilsLabelEXT,
    cmdBufLabelCount: u32,
    pCmdBufLabels: [*c]const DebugUtilsLabelEXT,
    objectCount: u32,
    pObjects: [*c]const DebugUtilsObjectNameInfoEXT,
};
pub const DebugUtilsMessengerCallbackDataEXT = struct_DebugUtilsMessengerCallbackDataEXT;
pub const PFN_vkDebugUtilsMessengerCallbackEXT = ?fn (DebugUtilsMessageSeverityFlagBitsEXT, DebugUtilsMessageTypeFlagsEXT, [*c]const DebugUtilsMessengerCallbackDataEXT, ?*c_void) callconv(.C) Bool32;
pub const struct_DebugUtilsMessengerCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DebugUtilsMessengerCreateFlagsEXT,
    messageSeverity: DebugUtilsMessageSeverityFlagsEXT,
    messageType: DebugUtilsMessageTypeFlagsEXT,
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pUserData: ?*c_void,
};
pub const DebugUtilsMessengerCreateInfoEXT = struct_DebugUtilsMessengerCreateInfoEXT;
pub const struct_DebugUtilsObjectTagInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    objectType: ObjectType,
    objectHandle: u64,
    tagName: u64,
    tagSize: usize,
    pTag: ?*const c_void,
};
pub const DebugUtilsObjectTagInfoEXT = struct_DebugUtilsObjectTagInfoEXT;
pub const PFN_vkSetDebugUtilsObjectNameEXT = ?fn (Device, [*c]const DebugUtilsObjectNameInfoEXT) callconv(.C) Result;
pub const PFN_vkSetDebugUtilsObjectTagEXT = ?fn (Device, [*c]const DebugUtilsObjectTagInfoEXT) callconv(.C) Result;
pub const PFN_vkQueueBeginDebugUtilsLabelEXT = ?fn (Queue, [*c]const DebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkQueueEndDebugUtilsLabelEXT = ?fn (Queue) callconv(.C) void;
pub const PFN_vkQueueInsertDebugUtilsLabelEXT = ?fn (Queue, [*c]const DebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdBeginDebugUtilsLabelEXT = ?fn (CommandBuffer, [*c]const DebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdEndDebugUtilsLabelEXT = ?fn (CommandBuffer) callconv(.C) void;
pub const PFN_vkCmdInsertDebugUtilsLabelEXT = ?fn (CommandBuffer, [*c]const DebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCreateDebugUtilsMessengerEXT = ?fn (Instance, [*c]const DebugUtilsMessengerCreateInfoEXT, [*c]const AllocationCallbacks, [*c]DebugUtilsMessengerEXT) callconv(.C) Result;
pub const PFN_vkDestroyDebugUtilsMessengerEXT = ?fn (Instance, DebugUtilsMessengerEXT, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkSubmitDebugUtilsMessageEXT = ?fn (Instance, DebugUtilsMessageSeverityFlagBitsEXT, DebugUtilsMessageTypeFlagsEXT, [*c]const DebugUtilsMessengerCallbackDataEXT) callconv(.C) void;
pub extern fn vkSetDebugUtilsObjectNameEXT(device: Device, pNameInfo: [*c]const DebugUtilsObjectNameInfoEXT) Result;
pub extern fn vkSetDebugUtilsObjectTagEXT(device: Device, pTagInfo: [*c]const DebugUtilsObjectTagInfoEXT) Result;
pub extern fn vkQueueBeginDebugUtilsLabelEXT(queue: Queue, pLabelInfo: [*c]const DebugUtilsLabelEXT) void;
pub extern fn vkQueueEndDebugUtilsLabelEXT(queue: Queue) void;
pub extern fn vkQueueInsertDebugUtilsLabelEXT(queue: Queue, pLabelInfo: [*c]const DebugUtilsLabelEXT) void;
pub extern fn vkCmdBeginDebugUtilsLabelEXT(commandBuffer: CommandBuffer, pLabelInfo: [*c]const DebugUtilsLabelEXT) void;
pub extern fn vkCmdEndDebugUtilsLabelEXT(commandBuffer: CommandBuffer) void;
pub extern fn vkCmdInsertDebugUtilsLabelEXT(commandBuffer: CommandBuffer, pLabelInfo: [*c]const DebugUtilsLabelEXT) void;
pub extern fn vkCreateDebugUtilsMessengerEXT(instance: Instance, pCreateInfo: [*c]const DebugUtilsMessengerCreateInfoEXT, pAllocator: [*c]const AllocationCallbacks, pMessenger: [*c]DebugUtilsMessengerEXT) Result;
pub extern fn vkDestroyDebugUtilsMessengerEXT(instance: Instance, messenger: DebugUtilsMessengerEXT, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkSubmitDebugUtilsMessageEXT(instance: Instance, messageSeverity: DebugUtilsMessageSeverityFlagBitsEXT, messageTypes: DebugUtilsMessageTypeFlagsEXT, pCallbackData: [*c]const DebugUtilsMessengerCallbackDataEXT) void;
pub const SamplerReductionModeEXT = SamplerReductionMode;
pub const SamplerReductionModeCreateInfoEXT = SamplerReductionModeCreateInfo;
pub const PhysicalDeviceSamplerFilterMinmaxPropertiesEXT = PhysicalDeviceSamplerFilterMinmaxProperties;
pub const struct_PhysicalDeviceInlineUniformBlockFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    inlineUniformBlock: Bool32,
    descriptorBindingInlineUniformBlockUpdateAfterBind: Bool32,
};
pub const PhysicalDeviceInlineUniformBlockFeaturesEXT = struct_PhysicalDeviceInlineUniformBlockFeaturesEXT;
pub const struct_PhysicalDeviceInlineUniformBlockPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxInlineUniformBlockSize: u32,
    maxPerStageDescriptorInlineUniformBlocks: u32,
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    maxDescriptorSetInlineUniformBlocks: u32,
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
};
pub const PhysicalDeviceInlineUniformBlockPropertiesEXT = struct_PhysicalDeviceInlineUniformBlockPropertiesEXT;
pub const struct_WriteDescriptorSetInlineUniformBlockEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    dataSize: u32,
    pData: ?*const c_void,
};
pub const WriteDescriptorSetInlineUniformBlockEXT = struct_WriteDescriptorSetInlineUniformBlockEXT;
pub const struct_DescriptorPoolInlineUniformBlockCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    maxInlineUniformBlockBindings: u32,
};
pub const DescriptorPoolInlineUniformBlockCreateInfoEXT = struct_DescriptorPoolInlineUniformBlockCreateInfoEXT;
pub const struct_SampleLocationEXT = extern struct {
    x: f32,
    y: f32,
};
pub const SampleLocationEXT = struct_SampleLocationEXT;
pub const struct_SampleLocationsInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    sampleLocationsPerPixel: SampleCountFlagBits,
    sampleLocationGridSize: Extent2D,
    sampleLocationsCount: u32,
    pSampleLocations: [*c]const SampleLocationEXT,
};
pub const SampleLocationsInfoEXT = struct_SampleLocationsInfoEXT;
pub const struct_AttachmentSampleLocationsEXT = extern struct {
    attachmentIndex: u32,
    sampleLocationsInfo: SampleLocationsInfoEXT,
};
pub const AttachmentSampleLocationsEXT = struct_AttachmentSampleLocationsEXT;
pub const struct_SubpassSampleLocationsEXT = extern struct {
    subpassIndex: u32,
    sampleLocationsInfo: SampleLocationsInfoEXT,
};
pub const SubpassSampleLocationsEXT = struct_SubpassSampleLocationsEXT;
pub const struct_RenderPassSampleLocationsBeginInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    attachmentInitialSampleLocationsCount: u32,
    pAttachmentInitialSampleLocations: [*c]const AttachmentSampleLocationsEXT,
    postSubpassSampleLocationsCount: u32,
    pPostSubpassSampleLocations: [*c]const SubpassSampleLocationsEXT,
};
pub const RenderPassSampleLocationsBeginInfoEXT = struct_RenderPassSampleLocationsBeginInfoEXT;
pub const struct_PipelineSampleLocationsStateCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    sampleLocationsEnable: Bool32,
    sampleLocationsInfo: SampleLocationsInfoEXT,
};
pub const PipelineSampleLocationsStateCreateInfoEXT = struct_PipelineSampleLocationsStateCreateInfoEXT;
pub const struct_PhysicalDeviceSampleLocationsPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    sampleLocationSampleCounts: SampleCountFlags,
    maxSampleLocationGridSize: Extent2D,
    sampleLocationCoordinateRange: [2]f32,
    sampleLocationSubPixelBits: u32,
    variableSampleLocations: Bool32,
};
pub const PhysicalDeviceSampleLocationsPropertiesEXT = struct_PhysicalDeviceSampleLocationsPropertiesEXT;
pub const struct_MultisamplePropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxSampleLocationGridSize: Extent2D,
};
pub const MultisamplePropertiesEXT = struct_MultisamplePropertiesEXT;
pub const PFN_vkCmdSetSampleLocationsEXT = ?fn (CommandBuffer, [*c]const SampleLocationsInfoEXT) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ?fn (PhysicalDevice, SampleCountFlagBits, [*c]MultisamplePropertiesEXT) callconv(.C) void;
pub extern fn vkCmdSetSampleLocationsEXT(commandBuffer: CommandBuffer, pSampleLocationsInfo: [*c]const SampleLocationsInfoEXT) void;
pub extern fn vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: PhysicalDevice, samples: SampleCountFlagBits, pMultisampleProperties: [*c]MultisamplePropertiesEXT) void;
pub const BLEND_OVERLAP_UNCORRELATED_EXT = @enumToInt(enum_BlendOverlapEXT.BLEND_OVERLAP_UNCORRELATED_EXT);
pub const BLEND_OVERLAP_DISJOINT_EXT = @enumToInt(enum_BlendOverlapEXT.BLEND_OVERLAP_DISJOINT_EXT);
pub const BLEND_OVERLAP_CONJOINT_EXT = @enumToInt(enum_BlendOverlapEXT.BLEND_OVERLAP_CONJOINT_EXT);
pub const BLEND_OVERLAP_MAX_ENUM_EXT = @enumToInt(enum_BlendOverlapEXT.BLEND_OVERLAP_MAX_ENUM_EXT);
pub const enum_BlendOverlapEXT = extern enum(c_int) {
    BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    BLEND_OVERLAP_DISJOINT_EXT = 1,
    BLEND_OVERLAP_CONJOINT_EXT = 2,
    BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const BlendOverlapEXT = enum_BlendOverlapEXT;
pub const struct_PhysicalDeviceBlendOperationAdvancedFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    advancedBlendCoherentOperations: Bool32,
};
pub const PhysicalDeviceBlendOperationAdvancedFeaturesEXT = struct_PhysicalDeviceBlendOperationAdvancedFeaturesEXT;
pub const struct_PhysicalDeviceBlendOperationAdvancedPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    advancedBlendMaxColorAttachments: u32,
    advancedBlendIndependentBlend: Bool32,
    advancedBlendNonPremultipliedSrcColor: Bool32,
    advancedBlendNonPremultipliedDstColor: Bool32,
    advancedBlendCorrelatedOverlap: Bool32,
    advancedBlendAllOperations: Bool32,
};
pub const PhysicalDeviceBlendOperationAdvancedPropertiesEXT = struct_PhysicalDeviceBlendOperationAdvancedPropertiesEXT;
pub const struct_PipelineColorBlendAdvancedStateCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    srcPremultiplied: Bool32,
    dstPremultiplied: Bool32,
    blendOverlap: BlendOverlapEXT,
};
pub const PipelineColorBlendAdvancedStateCreateInfoEXT = struct_PipelineColorBlendAdvancedStateCreateInfoEXT;
pub const PipelineCoverageToColorStateCreateFlagsNV = Flags;
pub const struct_PipelineCoverageToColorStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineCoverageToColorStateCreateFlagsNV,
    coverageToColorEnable: Bool32,
    coverageToColorLocation: u32,
};
pub const PipelineCoverageToColorStateCreateInfoNV = struct_PipelineCoverageToColorStateCreateInfoNV;
pub const COVERAGE_MODULATION_MODE_NONE_NV = @enumToInt(enum_CoverageModulationModeNV.COVERAGE_MODULATION_MODE_NONE_NV);
pub const COVERAGE_MODULATION_MODE_RGB_NV = @enumToInt(enum_CoverageModulationModeNV.COVERAGE_MODULATION_MODE_RGB_NV);
pub const COVERAGE_MODULATION_MODE_ALPHA_NV = @enumToInt(enum_CoverageModulationModeNV.COVERAGE_MODULATION_MODE_ALPHA_NV);
pub const COVERAGE_MODULATION_MODE_RGBA_NV = @enumToInt(enum_CoverageModulationModeNV.COVERAGE_MODULATION_MODE_RGBA_NV);
pub const COVERAGE_MODULATION_MODE_MAX_ENUM_NV = @enumToInt(enum_CoverageModulationModeNV.COVERAGE_MODULATION_MODE_MAX_ENUM_NV);
pub const enum_CoverageModulationModeNV = extern enum(c_int) {
    COVERAGE_MODULATION_MODE_NONE_NV = 0,
    COVERAGE_MODULATION_MODE_RGB_NV = 1,
    COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
    COVERAGE_MODULATION_MODE_RGBA_NV = 3,
    COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const CoverageModulationModeNV = enum_CoverageModulationModeNV;
pub const PipelineCoverageModulationStateCreateFlagsNV = Flags;
pub const struct_PipelineCoverageModulationStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineCoverageModulationStateCreateFlagsNV,
    coverageModulationMode: CoverageModulationModeNV,
    coverageModulationTableEnable: Bool32,
    coverageModulationTableCount: u32,
    pCoverageModulationTable: [*c]const f32,
};
pub const PipelineCoverageModulationStateCreateInfoNV = struct_PipelineCoverageModulationStateCreateInfoNV;
pub const struct_PhysicalDeviceShaderSMBuiltinsPropertiesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderSMCount: u32,
    shaderWarpsPerSM: u32,
};
pub const PhysicalDeviceShaderSMBuiltinsPropertiesNV = struct_PhysicalDeviceShaderSMBuiltinsPropertiesNV;
pub const struct_PhysicalDeviceShaderSMBuiltinsFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderSMBuiltins: Bool32,
};
pub const PhysicalDeviceShaderSMBuiltinsFeaturesNV = struct_PhysicalDeviceShaderSMBuiltinsFeaturesNV;
pub const struct_DrmFormatModifierPropertiesEXT = extern struct {
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    drmFormatModifierTilingFeatures: FormatFeatureFlags,
};
pub const DrmFormatModifierPropertiesEXT = struct_DrmFormatModifierPropertiesEXT;
pub const struct_DrmFormatModifierPropertiesListEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifierProperties: [*c]DrmFormatModifierPropertiesEXT,
};
pub const DrmFormatModifierPropertiesListEXT = struct_DrmFormatModifierPropertiesListEXT;
pub const struct_PhysicalDeviceImageDrmFormatModifierInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    drmFormatModifier: u64,
    sharingMode: SharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
};
pub const PhysicalDeviceImageDrmFormatModifierInfoEXT = struct_PhysicalDeviceImageDrmFormatModifierInfoEXT;
pub const struct_ImageDrmFormatModifierListCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifiers: [*c]const u64,
};
pub const ImageDrmFormatModifierListCreateInfoEXT = struct_ImageDrmFormatModifierListCreateInfoEXT;
pub const struct_ImageDrmFormatModifierExplicitCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    pPlaneLayouts: [*c]const SubresourceLayout,
};
pub const ImageDrmFormatModifierExplicitCreateInfoEXT = struct_ImageDrmFormatModifierExplicitCreateInfoEXT;
pub const struct_ImageDrmFormatModifierPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    drmFormatModifier: u64,
};
pub const ImageDrmFormatModifierPropertiesEXT = struct_ImageDrmFormatModifierPropertiesEXT;
pub const PFN_vkGetImageDrmFormatModifierPropertiesEXT = ?fn (Device, Image, [*c]ImageDrmFormatModifierPropertiesEXT) callconv(.C) Result;
pub extern fn vkGetImageDrmFormatModifierPropertiesEXT(device: Device, image: Image, pProperties: [*c]ImageDrmFormatModifierPropertiesEXT) Result;
pub const struct_ValidationCacheEXT_T = opaque {};
pub const ValidationCacheEXT = ?*struct_ValidationCacheEXT_T;
pub const VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = @enumToInt(enum_ValidationCacheHeaderVersionEXT.VALIDATION_CACHE_HEADER_VERSION_ONE_EXT);
pub const VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = @enumToInt(enum_ValidationCacheHeaderVersionEXT.VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT);
pub const enum_ValidationCacheHeaderVersionEXT = extern enum(c_int) {
    VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
    VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const ValidationCacheHeaderVersionEXT = enum_ValidationCacheHeaderVersionEXT;
pub const ValidationCacheCreateFlagsEXT = Flags;
pub const struct_ValidationCacheCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: ValidationCacheCreateFlagsEXT,
    initialDataSize: usize,
    pInitialData: ?*const c_void,
};
pub const ValidationCacheCreateInfoEXT = struct_ValidationCacheCreateInfoEXT;
pub const struct_ShaderModuleValidationCacheCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    validationCache: ValidationCacheEXT,
};
pub const ShaderModuleValidationCacheCreateInfoEXT = struct_ShaderModuleValidationCacheCreateInfoEXT;
pub const PFN_vkCreateValidationCacheEXT = ?fn (Device, [*c]const ValidationCacheCreateInfoEXT, [*c]const AllocationCallbacks, [*c]ValidationCacheEXT) callconv(.C) Result;
pub const PFN_vkDestroyValidationCacheEXT = ?fn (Device, ValidationCacheEXT, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkMergeValidationCachesEXT = ?fn (Device, ValidationCacheEXT, u32, [*c]const ValidationCacheEXT) callconv(.C) Result;
pub const PFN_vkGetValidationCacheDataEXT = ?fn (Device, ValidationCacheEXT, [*c]usize, ?*c_void) callconv(.C) Result;
pub extern fn vkCreateValidationCacheEXT(device: Device, pCreateInfo: [*c]const ValidationCacheCreateInfoEXT, pAllocator: [*c]const AllocationCallbacks, pValidationCache: [*c]ValidationCacheEXT) Result;
pub extern fn vkDestroyValidationCacheEXT(device: Device, validationCache: ValidationCacheEXT, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkMergeValidationCachesEXT(device: Device, dstCache: ValidationCacheEXT, srcCacheCount: u32, pSrcCaches: [*c]const ValidationCacheEXT) Result;
pub extern fn vkGetValidationCacheDataEXT(device: Device, validationCache: ValidationCacheEXT, pDataSize: [*c]usize, pData: ?*c_void) Result;
pub const DescriptorBindingFlagBitsEXT = DescriptorBindingFlagBits;
pub const DescriptorBindingFlagsEXT = DescriptorBindingFlags;
pub const DescriptorSetLayoutBindingFlagsCreateInfoEXT = DescriptorSetLayoutBindingFlagsCreateInfo;
pub const PhysicalDeviceDescriptorIndexingFeaturesEXT = PhysicalDeviceDescriptorIndexingFeatures;
pub const PhysicalDeviceDescriptorIndexingPropertiesEXT = PhysicalDeviceDescriptorIndexingProperties;
pub const DescriptorSetVariableDescriptorCountAllocateInfoEXT = DescriptorSetVariableDescriptorCountAllocateInfo;
pub const DescriptorSetVariableDescriptorCountLayoutSupportEXT = DescriptorSetVariableDescriptorCountLayoutSupport;
pub const SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV);
pub const SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV);
pub const SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV);
pub const SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV);
pub const SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV);
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV);
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV);
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV);
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV);
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV);
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV);
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV);
pub const SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = @enumToInt(enum_ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV);
pub const enum_ShadingRatePaletteEntryNV = extern enum(c_int) {
    SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
    SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
    SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
    SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
    SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
    SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647,
    _,
};
pub const ShadingRatePaletteEntryNV = enum_ShadingRatePaletteEntryNV;
pub const COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = @enumToInt(enum_CoarseSampleOrderTypeNV.COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV);
pub const COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = @enumToInt(enum_CoarseSampleOrderTypeNV.COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV);
pub const COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = @enumToInt(enum_CoarseSampleOrderTypeNV.COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV);
pub const COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = @enumToInt(enum_CoarseSampleOrderTypeNV.COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV);
pub const COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = @enumToInt(enum_CoarseSampleOrderTypeNV.COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV);
pub const enum_CoarseSampleOrderTypeNV = extern enum(c_int) {
    COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
    COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
    COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
    COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
    COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const CoarseSampleOrderTypeNV = enum_CoarseSampleOrderTypeNV;
pub const struct_ShadingRatePaletteNV = extern struct {
    shadingRatePaletteEntryCount: u32,
    pShadingRatePaletteEntries: [*c]const ShadingRatePaletteEntryNV,
};
pub const ShadingRatePaletteNV = struct_ShadingRatePaletteNV;
pub const struct_PipelineViewportShadingRateImageStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    shadingRateImageEnable: Bool32,
    viewportCount: u32,
    pShadingRatePalettes: [*c]const ShadingRatePaletteNV,
};
pub const PipelineViewportShadingRateImageStateCreateInfoNV = struct_PipelineViewportShadingRateImageStateCreateInfoNV;
pub const struct_PhysicalDeviceShadingRateImageFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shadingRateImage: Bool32,
    shadingRateCoarseSampleOrder: Bool32,
};
pub const PhysicalDeviceShadingRateImageFeaturesNV = struct_PhysicalDeviceShadingRateImageFeaturesNV;
pub const struct_PhysicalDeviceShadingRateImagePropertiesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shadingRateTexelSize: Extent2D,
    shadingRatePaletteSize: u32,
    shadingRateMaxCoarseSamples: u32,
};
pub const PhysicalDeviceShadingRateImagePropertiesNV = struct_PhysicalDeviceShadingRateImagePropertiesNV;
pub const struct_CoarseSampleLocationNV = extern struct {
    pixelX: u32,
    pixelY: u32,
    sample: u32,
};
pub const CoarseSampleLocationNV = struct_CoarseSampleLocationNV;
pub const struct_CoarseSampleOrderCustomNV = extern struct {
    shadingRate: ShadingRatePaletteEntryNV,
    sampleCount: u32,
    sampleLocationCount: u32,
    pSampleLocations: [*c]const CoarseSampleLocationNV,
};
pub const CoarseSampleOrderCustomNV = struct_CoarseSampleOrderCustomNV;
pub const struct_PipelineViewportCoarseSampleOrderStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    sampleOrderType: CoarseSampleOrderTypeNV,
    customSampleOrderCount: u32,
    pCustomSampleOrders: [*c]const CoarseSampleOrderCustomNV,
};
pub const PipelineViewportCoarseSampleOrderStateCreateInfoNV = struct_PipelineViewportCoarseSampleOrderStateCreateInfoNV;
pub const PFN_vkCmdBindShadingRateImageNV = ?fn (CommandBuffer, ImageView, ImageLayout) callconv(.C) void;
pub const PFN_vkCmdSetViewportShadingRatePaletteNV = ?fn (CommandBuffer, u32, u32, [*c]const ShadingRatePaletteNV) callconv(.C) void;
pub const PFN_vkCmdSetCoarseSampleOrderNV = ?fn (CommandBuffer, CoarseSampleOrderTypeNV, u32, [*c]const CoarseSampleOrderCustomNV) callconv(.C) void;
pub extern fn vkCmdBindShadingRateImageNV(commandBuffer: CommandBuffer, imageView: ImageView, imageLayout: ImageLayout) void;
pub extern fn vkCmdSetViewportShadingRatePaletteNV(commandBuffer: CommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: [*c]const ShadingRatePaletteNV) void;
pub extern fn vkCmdSetCoarseSampleOrderNV(commandBuffer: CommandBuffer, sampleOrderType: CoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: [*c]const CoarseSampleOrderCustomNV) void;
pub const struct_AccelerationStructureKHR_T = opaque {};
pub const AccelerationStructureKHR = ?*struct_AccelerationStructureKHR_T;
pub const AccelerationStructureNV = AccelerationStructureKHR;
pub const RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = @enumToInt(enum_RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR);
pub const RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = @enumToInt(enum_RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR);
pub const RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = @enumToInt(enum_RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR);
pub const RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = @enumToInt(enum_RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV);
pub const RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = @enumToInt(enum_RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV);
pub const RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = @enumToInt(enum_RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV);
pub const RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = @enumToInt(enum_RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR);
pub const enum_RayTracingShaderGroupTypeKHR = extern enum(c_int) {
    RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
    RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
    RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
    RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0,
    RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1,
    RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2,
    RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const RayTracingShaderGroupTypeKHR = enum_RayTracingShaderGroupTypeKHR;
pub const RayTracingShaderGroupTypeNV = RayTracingShaderGroupTypeKHR;
pub const GEOMETRY_TYPE_TRIANGLES_KHR = @enumToInt(enum_GeometryTypeKHR.GEOMETRY_TYPE_TRIANGLES_KHR);
pub const GEOMETRY_TYPE_AABBS_KHR = @enumToInt(enum_GeometryTypeKHR.GEOMETRY_TYPE_AABBS_KHR);
pub const GEOMETRY_TYPE_INSTANCES_KHR = @enumToInt(enum_GeometryTypeKHR.GEOMETRY_TYPE_INSTANCES_KHR);
pub const GEOMETRY_TYPE_TRIANGLES_NV = @enumToInt(enum_GeometryTypeKHR.GEOMETRY_TYPE_TRIANGLES_NV);
pub const GEOMETRY_TYPE_AABBS_NV = @enumToInt(enum_GeometryTypeKHR.GEOMETRY_TYPE_AABBS_NV);
pub const GEOMETRY_TYPE_MAX_ENUM_KHR = @enumToInt(enum_GeometryTypeKHR.GEOMETRY_TYPE_MAX_ENUM_KHR);
pub const enum_GeometryTypeKHR = extern enum(c_int) {
    GEOMETRY_TYPE_TRIANGLES_KHR = 0,
    GEOMETRY_TYPE_AABBS_KHR = 1,
    GEOMETRY_TYPE_INSTANCES_KHR = 1000150000,
    GEOMETRY_TYPE_TRIANGLES_NV = 0,
    GEOMETRY_TYPE_AABBS_NV = 1,
    GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const GeometryTypeKHR = enum_GeometryTypeKHR;
pub const GeometryTypeNV = GeometryTypeKHR;
pub const ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = @enumToInt(enum_AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR);
pub const ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = @enumToInt(enum_AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR);
pub const ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = @enumToInt(enum_AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV);
pub const ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = @enumToInt(enum_AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV);
pub const ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = @enumToInt(enum_AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR);
pub const enum_AccelerationStructureTypeKHR = extern enum(c_int) {
    ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
    ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
    ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0,
    ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1,
    ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const AccelerationStructureTypeKHR = enum_AccelerationStructureTypeKHR;
pub const AccelerationStructureTypeNV = AccelerationStructureTypeKHR;
pub const COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = @enumToInt(enum_CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR);
pub const COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = @enumToInt(enum_CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR);
pub const COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = @enumToInt(enum_CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR);
pub const COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = @enumToInt(enum_CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR);
pub const COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = @enumToInt(enum_CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV);
pub const COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = @enumToInt(enum_CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV);
pub const COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = @enumToInt(enum_CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR);
pub const enum_CopyAccelerationStructureModeKHR = extern enum(c_int) {
    COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
    COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
    COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
    COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
    COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0,
    COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1,
    COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const CopyAccelerationStructureModeKHR = enum_CopyAccelerationStructureModeKHR;
pub const CopyAccelerationStructureModeNV = CopyAccelerationStructureModeKHR;
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR = @enumToInt(enum_AccelerationStructureMemoryRequirementsTypeKHR.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR);
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR = @enumToInt(enum_AccelerationStructureMemoryRequirementsTypeKHR.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR);
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = @enumToInt(enum_AccelerationStructureMemoryRequirementsTypeKHR.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR);
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = @enumToInt(enum_AccelerationStructureMemoryRequirementsTypeKHR.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV);
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = @enumToInt(enum_AccelerationStructureMemoryRequirementsTypeKHR.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV);
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = @enumToInt(enum_AccelerationStructureMemoryRequirementsTypeKHR.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV);
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR = @enumToInt(enum_AccelerationStructureMemoryRequirementsTypeKHR.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR);
pub const enum_AccelerationStructureMemoryRequirementsTypeKHR = extern enum(c_int) {
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR = 0,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR = 1,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = 2,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const AccelerationStructureMemoryRequirementsTypeKHR = enum_AccelerationStructureMemoryRequirementsTypeKHR;
pub const AccelerationStructureMemoryRequirementsTypeNV = AccelerationStructureMemoryRequirementsTypeKHR;
pub const GEOMETRY_OPAQUE_BIT_KHR = @enumToInt(enum_GeometryFlagBitsKHR.GEOMETRY_OPAQUE_BIT_KHR);
pub const GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = @enumToInt(enum_GeometryFlagBitsKHR.GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR);
pub const GEOMETRY_OPAQUE_BIT_NV = @enumToInt(enum_GeometryFlagBitsKHR.GEOMETRY_OPAQUE_BIT_NV);
pub const GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = @enumToInt(enum_GeometryFlagBitsKHR.GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV);
pub const GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_GeometryFlagBitsKHR.GEOMETRY_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_GeometryFlagBitsKHR = extern enum(c_int) {
    GEOMETRY_OPAQUE_BIT_KHR = 1,
    GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2,
    GEOMETRY_OPAQUE_BIT_NV = 1,
    GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2,
    GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const GeometryFlagBitsKHR = enum_GeometryFlagBitsKHR;
pub const GeometryFlagsKHR = Flags;
pub const GeometryFlagsNV = GeometryFlagsKHR;
pub const GeometryFlagBitsNV = GeometryFlagBitsKHR;
pub const GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = @enumToInt(enum_GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR);
pub const GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = @enumToInt(enum_GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR);
pub const GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = @enumToInt(enum_GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR);
pub const GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = @enumToInt(enum_GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR);
pub const GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = @enumToInt(enum_GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV);
pub const GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = @enumToInt(enum_GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV);
pub const GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = @enumToInt(enum_GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV);
pub const GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = @enumToInt(enum_GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV);
pub const GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_GeometryInstanceFlagBitsKHR = extern enum(c_int) {
    GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1,
    GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2,
    GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4,
    GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8,
    GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1,
    GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2,
    GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4,
    GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8,
    GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const GeometryInstanceFlagBitsKHR = enum_GeometryInstanceFlagBitsKHR;
pub const GeometryInstanceFlagsKHR = Flags;
pub const GeometryInstanceFlagsNV = GeometryInstanceFlagsKHR;
pub const GeometryInstanceFlagBitsNV = GeometryInstanceFlagBitsKHR;
pub const BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR);
pub const BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR);
pub const BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR);
pub const BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR);
pub const BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR);
pub const BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV);
pub const BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV);
pub const BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV);
pub const BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV);
pub const BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV);
pub const BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_BuildAccelerationStructureFlagBitsKHR = extern enum(c_int) {
    BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1,
    BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2,
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4,
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8,
    BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16,
    BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1,
    BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2,
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4,
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8,
    BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16,
    BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const BuildAccelerationStructureFlagBitsKHR = enum_BuildAccelerationStructureFlagBitsKHR;
pub const BuildAccelerationStructureFlagsKHR = Flags;
pub const BuildAccelerationStructureFlagsNV = BuildAccelerationStructureFlagsKHR;
pub const BuildAccelerationStructureFlagBitsNV = BuildAccelerationStructureFlagBitsKHR;
pub const struct_RayTracingShaderGroupCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    type: RayTracingShaderGroupTypeKHR,
    generalShader: u32,
    closestHitShader: u32,
    anyHitShader: u32,
    intersectionShader: u32,
};
pub const RayTracingShaderGroupCreateInfoNV = struct_RayTracingShaderGroupCreateInfoNV;
pub const struct_RayTracingPipelineCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineCreateFlags,
    stageCount: u32,
    pStages: [*c]const PipelineShaderStageCreateInfo,
    groupCount: u32,
    pGroups: [*c]const RayTracingShaderGroupCreateInfoNV,
    maxRecursionDepth: u32,
    layout: PipelineLayout,
    basePipelineHandle: Pipeline,
    basePipelineIndex: i32,
};
pub const RayTracingPipelineCreateInfoNV = struct_RayTracingPipelineCreateInfoNV;
pub const struct_GeometryTrianglesNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    vertexData: Buffer,
    vertexOffset: DeviceSize,
    vertexCount: u32,
    vertexStride: DeviceSize,
    vertexFormat: Format,
    indexData: Buffer,
    indexOffset: DeviceSize,
    indexCount: u32,
    indexType: IndexType,
    transformData: Buffer,
    transformOffset: DeviceSize,
};
pub const GeometryTrianglesNV = struct_GeometryTrianglesNV;
pub const struct_GeometryAABBNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    aabbData: Buffer,
    numAABBs: u32,
    stride: u32,
    offset: DeviceSize,
};
pub const GeometryAABBNV = struct_GeometryAABBNV;
pub const struct_GeometryDataNV = extern struct {
    triangles: GeometryTrianglesNV,
    aabbs: GeometryAABBNV,
};
pub const GeometryDataNV = struct_GeometryDataNV;
pub const struct_GeometryNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    geometryType: GeometryTypeKHR,
    geometry: GeometryDataNV,
    flags: GeometryFlagsKHR,
};
pub const GeometryNV = struct_GeometryNV;
pub const struct_AccelerationStructureInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    type: AccelerationStructureTypeNV,
    flags: BuildAccelerationStructureFlagsNV,
    instanceCount: u32,
    geometryCount: u32,
    pGeometries: [*c]const GeometryNV,
};
pub const AccelerationStructureInfoNV = struct_AccelerationStructureInfoNV;
pub const struct_AccelerationStructureCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    compactedSize: DeviceSize,
    info: AccelerationStructureInfoNV,
};
pub const AccelerationStructureCreateInfoNV = struct_AccelerationStructureCreateInfoNV;
pub const struct_BindAccelerationStructureMemoryInfoKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    accelerationStructure: AccelerationStructureKHR,
    memory: DeviceMemory,
    memoryOffset: DeviceSize,
    deviceIndexCount: u32,
    pDeviceIndices: [*c]const u32,
};
pub const BindAccelerationStructureMemoryInfoKHR = struct_BindAccelerationStructureMemoryInfoKHR;
pub const BindAccelerationStructureMemoryInfoNV = BindAccelerationStructureMemoryInfoKHR;
pub const struct_WriteDescriptorSetAccelerationStructureKHR = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    accelerationStructureCount: u32,
    pAccelerationStructures: [*c]const AccelerationStructureKHR,
};
pub const WriteDescriptorSetAccelerationStructureKHR = struct_WriteDescriptorSetAccelerationStructureKHR;
pub const WriteDescriptorSetAccelerationStructureNV = WriteDescriptorSetAccelerationStructureKHR;
pub const struct_AccelerationStructureMemoryRequirementsInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    type: AccelerationStructureMemoryRequirementsTypeNV,
    accelerationStructure: AccelerationStructureNV,
};
pub const AccelerationStructureMemoryRequirementsInfoNV = struct_AccelerationStructureMemoryRequirementsInfoNV;
pub const struct_PhysicalDeviceRayTracingPropertiesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderGroupHandleSize: u32,
    maxRecursionDepth: u32,
    maxShaderGroupStride: u32,
    shaderGroupBaseAlignment: u32,
    maxGeometryCount: u64,
    maxInstanceCount: u64,
    maxTriangleCount: u64,
    maxDescriptorSetAccelerationStructures: u32,
};
pub const PhysicalDeviceRayTracingPropertiesNV = struct_PhysicalDeviceRayTracingPropertiesNV;
pub const struct_TransformMatrixKHR = extern struct {
    matrix: [3][4]f32,
};
pub const TransformMatrixKHR = struct_TransformMatrixKHR;
pub const TransformMatrixNV = TransformMatrixKHR;
pub const struct_AabbPositionsKHR = extern struct {
    minX: f32,
    minY: f32,
    minZ: f32,
    maxX: f32,
    maxY: f32,
    maxZ: f32,
};
pub const AabbPositionsKHR = struct_AabbPositionsKHR;
pub const AabbPositionsNV = AabbPositionsKHR;
pub const struct_AccelerationStructureInstanceKHR = opaque {}; // /usr/include/vulkan/vulkan_core.h:9502:35: warning: struct demoted to opaque type - has bitfield
pub const AccelerationStructureInstanceKHR = struct_AccelerationStructureInstanceKHR;
pub const AccelerationStructureInstanceNV = AccelerationStructureInstanceKHR;
pub const PFN_vkCreateAccelerationStructureNV = ?fn (Device, [*c]const AccelerationStructureCreateInfoNV, [*c]const AllocationCallbacks, [*c]AccelerationStructureNV) callconv(.C) Result;
pub const PFN_vkDestroyAccelerationStructureKHR = ?fn (Device, AccelerationStructureKHR, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkDestroyAccelerationStructureNV = ?fn (Device, AccelerationStructureKHR, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureMemoryRequirementsNV = ?fn (Device, [*c]const AccelerationStructureMemoryRequirementsInfoNV, [*c]MemoryRequirements2KHR) callconv(.C) void;
pub const PFN_vkBindAccelerationStructureMemoryKHR = ?fn (Device, u32, [*c]const BindAccelerationStructureMemoryInfoKHR) callconv(.C) Result;
pub const PFN_vkBindAccelerationStructureMemoryNV = ?fn (Device, u32, [*c]const BindAccelerationStructureMemoryInfoKHR) callconv(.C) Result;
pub const PFN_vkCmdBuildAccelerationStructureNV = ?fn (CommandBuffer, [*c]const AccelerationStructureInfoNV, Buffer, DeviceSize, Bool32, AccelerationStructureKHR, AccelerationStructureKHR, Buffer, DeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureNV = ?fn (CommandBuffer, AccelerationStructureKHR, AccelerationStructureKHR, CopyAccelerationStructureModeKHR) callconv(.C) void;
pub const PFN_vkCmdTraceRaysNV = ?fn (CommandBuffer, Buffer, DeviceSize, Buffer, DeviceSize, DeviceSize, Buffer, DeviceSize, DeviceSize, Buffer, DeviceSize, DeviceSize, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesNV = ?fn (Device, PipelineCache, u32, [*c]const RayTracingPipelineCreateInfoNV, [*c]const AllocationCallbacks, [*c]Pipeline) callconv(.C) Result;
pub const PFN_vkGetRayTracingShaderGroupHandlesKHR = ?fn (Device, Pipeline, u32, u32, usize, ?*c_void) callconv(.C) Result;
pub const PFN_vkGetRayTracingShaderGroupHandlesNV = ?fn (Device, Pipeline, u32, u32, usize, ?*c_void) callconv(.C) Result;
pub const PFN_vkGetAccelerationStructureHandleNV = ?fn (Device, AccelerationStructureKHR, usize, ?*c_void) callconv(.C) Result;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ?fn (CommandBuffer, u32, [*c]const AccelerationStructureKHR, QueryType, QueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ?fn (CommandBuffer, u32, [*c]const AccelerationStructureKHR, QueryType, QueryPool, u32) callconv(.C) void;
pub const PFN_vkCompileDeferredNV = ?fn (Device, Pipeline, u32) callconv(.C) Result;
pub extern fn vkCreateAccelerationStructureNV(device: Device, pCreateInfo: [*c]const AccelerationStructureCreateInfoNV, pAllocator: [*c]const AllocationCallbacks, pAccelerationStructure: [*c]AccelerationStructureNV) Result;
pub extern fn vkDestroyAccelerationStructureKHR(device: Device, accelerationStructure: AccelerationStructureKHR, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkDestroyAccelerationStructureNV(device: Device, accelerationStructure: AccelerationStructureKHR, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkGetAccelerationStructureMemoryRequirementsNV(device: Device, pInfo: [*c]const AccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: [*c]MemoryRequirements2KHR) void;
pub extern fn vkBindAccelerationStructureMemoryKHR(device: Device, bindInfoCount: u32, pBindInfos: [*c]const BindAccelerationStructureMemoryInfoKHR) Result;
pub extern fn vkBindAccelerationStructureMemoryNV(device: Device, bindInfoCount: u32, pBindInfos: [*c]const BindAccelerationStructureMemoryInfoKHR) Result;
pub extern fn vkCmdBuildAccelerationStructureNV(commandBuffer: CommandBuffer, pInfo: [*c]const AccelerationStructureInfoNV, instanceData: Buffer, instanceOffset: DeviceSize, update: Bool32, dst: AccelerationStructureKHR, src: AccelerationStructureKHR, scratch: Buffer, scratchOffset: DeviceSize) void;
pub extern fn vkCmdCopyAccelerationStructureNV(commandBuffer: CommandBuffer, dst: AccelerationStructureKHR, src: AccelerationStructureKHR, mode: CopyAccelerationStructureModeKHR) void;
pub extern fn vkCmdTraceRaysNV(commandBuffer: CommandBuffer, raygenShaderBindingTableBuffer: Buffer, raygenShaderBindingOffset: DeviceSize, missShaderBindingTableBuffer: Buffer, missShaderBindingOffset: DeviceSize, missShaderBindingStride: DeviceSize, hitShaderBindingTableBuffer: Buffer, hitShaderBindingOffset: DeviceSize, hitShaderBindingStride: DeviceSize, callableShaderBindingTableBuffer: Buffer, callableShaderBindingOffset: DeviceSize, callableShaderBindingStride: DeviceSize, width: u32, height: u32, depth: u32) void;
pub extern fn vkCreateRayTracingPipelinesNV(device: Device, pipelineCache: PipelineCache, createInfoCount: u32, pCreateInfos: [*c]const RayTracingPipelineCreateInfoNV, pAllocator: [*c]const AllocationCallbacks, pPipelines: [*c]Pipeline) Result;
pub extern fn vkGetRayTracingShaderGroupHandlesKHR(device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*c_void) Result;
pub extern fn vkGetRayTracingShaderGroupHandlesNV(device: Device, pipeline: Pipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*c_void) Result;
pub extern fn vkGetAccelerationStructureHandleNV(device: Device, accelerationStructure: AccelerationStructureKHR, dataSize: usize, pData: ?*c_void) Result;
pub extern fn vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: [*c]const AccelerationStructureKHR, queryType: QueryType, queryPool: QueryPool, firstQuery: u32) void;
pub extern fn vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: CommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: [*c]const AccelerationStructureKHR, queryType: QueryType, queryPool: QueryPool, firstQuery: u32) void;
pub extern fn vkCompileDeferredNV(device: Device, pipeline: Pipeline, shader: u32) Result;
pub const struct_PhysicalDeviceRepresentativeFragmentTestFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    representativeFragmentTest: Bool32,
};
pub const PhysicalDeviceRepresentativeFragmentTestFeaturesNV = struct_PhysicalDeviceRepresentativeFragmentTestFeaturesNV;
pub const struct_PipelineRepresentativeFragmentTestStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    representativeFragmentTestEnable: Bool32,
};
pub const PipelineRepresentativeFragmentTestStateCreateInfoNV = struct_PipelineRepresentativeFragmentTestStateCreateInfoNV;
pub const struct_PhysicalDeviceImageViewImageFormatInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    imageViewType: ImageViewType,
};
pub const PhysicalDeviceImageViewImageFormatInfoEXT = struct_PhysicalDeviceImageViewImageFormatInfoEXT;
pub const struct_FilterCubicImageViewImageFormatPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    filterCubic: Bool32,
    filterCubicMinmax: Bool32,
};
pub const FilterCubicImageViewImageFormatPropertiesEXT = struct_FilterCubicImageViewImageFormatPropertiesEXT;
pub const QUEUE_GLOBAL_PRIORITY_LOW_EXT = @enumToInt(enum_QueueGlobalPriorityEXT.QUEUE_GLOBAL_PRIORITY_LOW_EXT);
pub const QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = @enumToInt(enum_QueueGlobalPriorityEXT.QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT);
pub const QUEUE_GLOBAL_PRIORITY_HIGH_EXT = @enumToInt(enum_QueueGlobalPriorityEXT.QUEUE_GLOBAL_PRIORITY_HIGH_EXT);
pub const QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = @enumToInt(enum_QueueGlobalPriorityEXT.QUEUE_GLOBAL_PRIORITY_REALTIME_EXT);
pub const QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = @enumToInt(enum_QueueGlobalPriorityEXT.QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT);
pub const enum_QueueGlobalPriorityEXT = extern enum(c_int) {
    QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
    QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
    QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
    QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
    QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const QueueGlobalPriorityEXT = enum_QueueGlobalPriorityEXT;
pub const struct_DeviceQueueGlobalPriorityCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    globalPriority: QueueGlobalPriorityEXT,
};
pub const DeviceQueueGlobalPriorityCreateInfoEXT = struct_DeviceQueueGlobalPriorityCreateInfoEXT;
pub const struct_ImportMemoryHostPointerInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    handleType: ExternalMemoryHandleTypeFlagBits,
    pHostPointer: ?*c_void,
};
pub const ImportMemoryHostPointerInfoEXT = struct_ImportMemoryHostPointerInfoEXT;
pub const struct_MemoryHostPointerPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    memoryTypeBits: u32,
};
pub const MemoryHostPointerPropertiesEXT = struct_MemoryHostPointerPropertiesEXT;
pub const struct_PhysicalDeviceExternalMemoryHostPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    minImportedHostPointerAlignment: DeviceSize,
};
pub const PhysicalDeviceExternalMemoryHostPropertiesEXT = struct_PhysicalDeviceExternalMemoryHostPropertiesEXT;
pub const PFN_vkGetMemoryHostPointerPropertiesEXT = ?fn (Device, ExternalMemoryHandleTypeFlagBits, ?*const c_void, [*c]MemoryHostPointerPropertiesEXT) callconv(.C) Result;
pub extern fn vkGetMemoryHostPointerPropertiesEXT(device: Device, handleType: ExternalMemoryHandleTypeFlagBits, pHostPointer: ?*const c_void, pMemoryHostPointerProperties: [*c]MemoryHostPointerPropertiesEXT) Result;
pub const PFN_vkCmdWriteBufferMarkerAMD = ?fn (CommandBuffer, PipelineStageFlagBits, Buffer, DeviceSize, u32) callconv(.C) void;
pub extern fn vkCmdWriteBufferMarkerAMD(commandBuffer: CommandBuffer, pipelineStage: PipelineStageFlagBits, dstBuffer: Buffer, dstOffset: DeviceSize, marker: u32) void;
pub const PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = @enumToInt(enum_PipelineCompilerControlFlagBitsAMD.PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD);
pub const enum_PipelineCompilerControlFlagBitsAMD = extern enum(c_int) {
    PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const PipelineCompilerControlFlagBitsAMD = enum_PipelineCompilerControlFlagBitsAMD;
pub const PipelineCompilerControlFlagsAMD = Flags;
pub const struct_PipelineCompilerControlCreateInfoAMD = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    compilerControlFlags: PipelineCompilerControlFlagsAMD,
};
pub const PipelineCompilerControlCreateInfoAMD = struct_PipelineCompilerControlCreateInfoAMD;
pub const TIME_DOMAIN_DEVICE_EXT = @enumToInt(enum_TimeDomainEXT.TIME_DOMAIN_DEVICE_EXT);
pub const TIME_DOMAIN_CLOCK_MONOTONIC_EXT = @enumToInt(enum_TimeDomainEXT.TIME_DOMAIN_CLOCK_MONOTONIC_EXT);
pub const TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = @enumToInt(enum_TimeDomainEXT.TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT);
pub const TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = @enumToInt(enum_TimeDomainEXT.TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT);
pub const TIME_DOMAIN_MAX_ENUM_EXT = @enumToInt(enum_TimeDomainEXT.TIME_DOMAIN_MAX_ENUM_EXT);
pub const enum_TimeDomainEXT = extern enum(c_int) {
    TIME_DOMAIN_DEVICE_EXT = 0,
    TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
    TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
    TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
    TIME_DOMAIN_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const TimeDomainEXT = enum_TimeDomainEXT;
pub const struct_CalibratedTimestampInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    timeDomain: TimeDomainEXT,
};
pub const CalibratedTimestampInfoEXT = struct_CalibratedTimestampInfoEXT;
pub const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ?fn (PhysicalDevice, [*c]u32, [*c]TimeDomainEXT) callconv(.C) Result;
pub const PFN_vkGetCalibratedTimestampsEXT = ?fn (Device, u32, [*c]const CalibratedTimestampInfoEXT, [*c]u64, [*c]u64) callconv(.C) Result;
pub extern fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: PhysicalDevice, pTimeDomainCount: [*c]u32, pTimeDomains: [*c]TimeDomainEXT) Result;
pub extern fn vkGetCalibratedTimestampsEXT(device: Device, timestampCount: u32, pTimestampInfos: [*c]const CalibratedTimestampInfoEXT, pTimestamps: [*c]u64, pMaxDeviation: [*c]u64) Result;
pub const struct_PhysicalDeviceShaderCorePropertiesAMD = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderEngineCount: u32,
    shaderArraysPerEngineCount: u32,
    computeUnitsPerShaderArray: u32,
    simdPerComputeUnit: u32,
    wavefrontsPerSimd: u32,
    wavefrontSize: u32,
    sgprsPerSimd: u32,
    minSgprAllocation: u32,
    maxSgprAllocation: u32,
    sgprAllocationGranularity: u32,
    vgprsPerSimd: u32,
    minVgprAllocation: u32,
    maxVgprAllocation: u32,
    vgprAllocationGranularity: u32,
};
pub const PhysicalDeviceShaderCorePropertiesAMD = struct_PhysicalDeviceShaderCorePropertiesAMD;
pub const MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = @enumToInt(enum_MemoryOverallocationBehaviorAMD.MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD);
pub const MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = @enumToInt(enum_MemoryOverallocationBehaviorAMD.MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD);
pub const MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = @enumToInt(enum_MemoryOverallocationBehaviorAMD.MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD);
pub const MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = @enumToInt(enum_MemoryOverallocationBehaviorAMD.MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD);
pub const enum_MemoryOverallocationBehaviorAMD = extern enum(c_int) {
    MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
    MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
    MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
    MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const MemoryOverallocationBehaviorAMD = enum_MemoryOverallocationBehaviorAMD;
pub const struct_DeviceMemoryOverallocationCreateInfoAMD = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    overallocationBehavior: MemoryOverallocationBehaviorAMD,
};
pub const DeviceMemoryOverallocationCreateInfoAMD = struct_DeviceMemoryOverallocationCreateInfoAMD;
pub const struct_PhysicalDeviceVertexAttributeDivisorPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxVertexAttribDivisor: u32,
};
pub const PhysicalDeviceVertexAttributeDivisorPropertiesEXT = struct_PhysicalDeviceVertexAttributeDivisorPropertiesEXT;
pub const struct_VertexInputBindingDivisorDescriptionEXT = extern struct {
    binding: u32,
    divisor: u32,
};
pub const VertexInputBindingDivisorDescriptionEXT = struct_VertexInputBindingDivisorDescriptionEXT;
pub const struct_PipelineVertexInputDivisorStateCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    vertexBindingDivisorCount: u32,
    pVertexBindingDivisors: [*c]const VertexInputBindingDivisorDescriptionEXT,
};
pub const PipelineVertexInputDivisorStateCreateInfoEXT = struct_PipelineVertexInputDivisorStateCreateInfoEXT;
pub const struct_PhysicalDeviceVertexAttributeDivisorFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    vertexAttributeInstanceRateDivisor: Bool32,
    vertexAttributeInstanceRateZeroDivisor: Bool32,
};
pub const PhysicalDeviceVertexAttributeDivisorFeaturesEXT = struct_PhysicalDeviceVertexAttributeDivisorFeaturesEXT;
pub const PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = @enumToInt(enum_PipelineCreationFeedbackFlagBitsEXT.PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT);
pub const PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = @enumToInt(enum_PipelineCreationFeedbackFlagBitsEXT.PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT);
pub const PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = @enumToInt(enum_PipelineCreationFeedbackFlagBitsEXT.PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT);
pub const PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_PipelineCreationFeedbackFlagBitsEXT.PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_PipelineCreationFeedbackFlagBitsEXT = extern enum(c_int) {
    PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1,
    PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2,
    PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4,
    PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const PipelineCreationFeedbackFlagBitsEXT = enum_PipelineCreationFeedbackFlagBitsEXT;
pub const PipelineCreationFeedbackFlagsEXT = Flags;
pub const struct_PipelineCreationFeedbackEXT = extern struct {
    flags: PipelineCreationFeedbackFlagsEXT,
    duration: u64,
};
pub const PipelineCreationFeedbackEXT = struct_PipelineCreationFeedbackEXT;
pub const struct_PipelineCreationFeedbackCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pPipelineCreationFeedback: [*c]PipelineCreationFeedbackEXT,
    pipelineStageCreationFeedbackCount: u32,
    pPipelineStageCreationFeedbacks: [*c]PipelineCreationFeedbackEXT,
};
pub const PipelineCreationFeedbackCreateInfoEXT = struct_PipelineCreationFeedbackCreateInfoEXT;
pub const struct_PhysicalDeviceComputeShaderDerivativesFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    computeDerivativeGroupQuads: Bool32,
    computeDerivativeGroupLinear: Bool32,
};
pub const PhysicalDeviceComputeShaderDerivativesFeaturesNV = struct_PhysicalDeviceComputeShaderDerivativesFeaturesNV;
pub const struct_PhysicalDeviceMeshShaderFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    taskShader: Bool32,
    meshShader: Bool32,
};
pub const PhysicalDeviceMeshShaderFeaturesNV = struct_PhysicalDeviceMeshShaderFeaturesNV;
pub const struct_PhysicalDeviceMeshShaderPropertiesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxDrawMeshTasksCount: u32,
    maxTaskWorkGroupInvocations: u32,
    maxTaskWorkGroupSize: [3]u32,
    maxTaskTotalMemorySize: u32,
    maxTaskOutputCount: u32,
    maxMeshWorkGroupInvocations: u32,
    maxMeshWorkGroupSize: [3]u32,
    maxMeshTotalMemorySize: u32,
    maxMeshOutputVertices: u32,
    maxMeshOutputPrimitives: u32,
    maxMeshMultiviewViewCount: u32,
    meshOutputPerVertexGranularity: u32,
    meshOutputPerPrimitiveGranularity: u32,
};
pub const PhysicalDeviceMeshShaderPropertiesNV = struct_PhysicalDeviceMeshShaderPropertiesNV;
pub const struct_DrawMeshTasksIndirectCommandNV = extern struct {
    taskCount: u32,
    firstTask: u32,
};
pub const DrawMeshTasksIndirectCommandNV = struct_DrawMeshTasksIndirectCommandNV;
pub const PFN_vkCmdDrawMeshTasksNV = ?fn (CommandBuffer, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectNV = ?fn (CommandBuffer, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectCountNV = ?fn (CommandBuffer, Buffer, DeviceSize, Buffer, DeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawMeshTasksNV(commandBuffer: CommandBuffer, taskCount: u32, firstTask: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectNV(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: CommandBuffer, buffer: Buffer, offset: DeviceSize, countBuffer: Buffer, countBufferOffset: DeviceSize, maxDrawCount: u32, stride: u32) void;
pub const struct_PhysicalDeviceFragmentShaderBarycentricFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    fragmentShaderBarycentric: Bool32,
};
pub const PhysicalDeviceFragmentShaderBarycentricFeaturesNV = struct_PhysicalDeviceFragmentShaderBarycentricFeaturesNV;
pub const struct_PhysicalDeviceShaderImageFootprintFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    imageFootprint: Bool32,
};
pub const PhysicalDeviceShaderImageFootprintFeaturesNV = struct_PhysicalDeviceShaderImageFootprintFeaturesNV;
pub const struct_PipelineViewportExclusiveScissorStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    exclusiveScissorCount: u32,
    pExclusiveScissors: [*c]const Rect2D,
};
pub const PipelineViewportExclusiveScissorStateCreateInfoNV = struct_PipelineViewportExclusiveScissorStateCreateInfoNV;
pub const struct_PhysicalDeviceExclusiveScissorFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    exclusiveScissor: Bool32,
};
pub const PhysicalDeviceExclusiveScissorFeaturesNV = struct_PhysicalDeviceExclusiveScissorFeaturesNV;
pub const PFN_vkCmdSetExclusiveScissorNV = ?fn (CommandBuffer, u32, u32, [*c]const Rect2D) callconv(.C) void;
pub extern fn vkCmdSetExclusiveScissorNV(commandBuffer: CommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: [*c]const Rect2D) void;
pub const struct_QueueFamilyCheckpointPropertiesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    checkpointExecutionStageMask: PipelineStageFlags,
};
pub const QueueFamilyCheckpointPropertiesNV = struct_QueueFamilyCheckpointPropertiesNV;
pub const struct_CheckpointDataNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    stage: PipelineStageFlagBits,
    pCheckpointMarker: ?*c_void,
};
pub const CheckpointDataNV = struct_CheckpointDataNV;
pub const PFN_vkCmdSetCheckpointNV = ?fn (CommandBuffer, ?*const c_void) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointDataNV = ?fn (Queue, [*c]u32, [*c]CheckpointDataNV) callconv(.C) void;
pub extern fn vkCmdSetCheckpointNV(commandBuffer: CommandBuffer, pCheckpointMarker: ?*const c_void) void;
pub extern fn vkGetQueueCheckpointDataNV(queue: Queue, pCheckpointDataCount: [*c]u32, pCheckpointData: [*c]CheckpointDataNV) void;
pub const struct_PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderIntegerFunctions2: Bool32,
};
pub const PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = struct_PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
pub const struct_PerformanceConfigurationINTEL_T = opaque {};
pub const PerformanceConfigurationINTEL = ?*struct_PerformanceConfigurationINTEL_T;
pub const PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = @enumToInt(enum_PerformanceConfigurationTypeINTEL.PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL);
pub const PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = @enumToInt(enum_PerformanceConfigurationTypeINTEL.PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL);
pub const enum_PerformanceConfigurationTypeINTEL = extern enum(c_int) {
    PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
    PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const PerformanceConfigurationTypeINTEL = enum_PerformanceConfigurationTypeINTEL;
pub const QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = @enumToInt(enum_QueryPoolSamplingModeINTEL.QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL);
pub const QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = @enumToInt(enum_QueryPoolSamplingModeINTEL.QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL);
pub const enum_QueryPoolSamplingModeINTEL = extern enum(c_int) {
    QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
    QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const QueryPoolSamplingModeINTEL = enum_QueryPoolSamplingModeINTEL;
pub const PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = @enumToInt(enum_PerformanceOverrideTypeINTEL.PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL);
pub const PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = @enumToInt(enum_PerformanceOverrideTypeINTEL.PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL);
pub const PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = @enumToInt(enum_PerformanceOverrideTypeINTEL.PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL);
pub const enum_PerformanceOverrideTypeINTEL = extern enum(c_int) {
    PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
    PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
    PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const PerformanceOverrideTypeINTEL = enum_PerformanceOverrideTypeINTEL;
pub const PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = @enumToInt(enum_PerformanceParameterTypeINTEL.PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL);
pub const PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = @enumToInt(enum_PerformanceParameterTypeINTEL.PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL);
pub const PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = @enumToInt(enum_PerformanceParameterTypeINTEL.PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL);
pub const enum_PerformanceParameterTypeINTEL = extern enum(c_int) {
    PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
    PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
    PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const PerformanceParameterTypeINTEL = enum_PerformanceParameterTypeINTEL;
pub const PERFORMANCE_VALUE_TYPE_UINT32_INTEL = @enumToInt(enum_PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_UINT32_INTEL);
pub const PERFORMANCE_VALUE_TYPE_UINT64_INTEL = @enumToInt(enum_PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_UINT64_INTEL);
pub const PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = @enumToInt(enum_PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_FLOAT_INTEL);
pub const PERFORMANCE_VALUE_TYPE_BOOL_INTEL = @enumToInt(enum_PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_BOOL_INTEL);
pub const PERFORMANCE_VALUE_TYPE_STRING_INTEL = @enumToInt(enum_PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_STRING_INTEL);
pub const PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = @enumToInt(enum_PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL);
pub const enum_PerformanceValueTypeINTEL = extern enum(c_int) {
    PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
    PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
    PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
    PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
    PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
    PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const PerformanceValueTypeINTEL = enum_PerformanceValueTypeINTEL;
pub const union_PerformanceValueDataINTEL = extern union {
    value32: u32,
    value64: u64,
    valueFloat: f32,
    valueBool: Bool32,
    valueString: [*c]const u8,
};
pub const PerformanceValueDataINTEL = union_PerformanceValueDataINTEL;
pub const struct_PerformanceValueINTEL = extern struct {
    type: PerformanceValueTypeINTEL,
    data: PerformanceValueDataINTEL,
};
pub const PerformanceValueINTEL = struct_PerformanceValueINTEL;
pub const struct_InitializePerformanceApiInfoINTEL = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pUserData: ?*c_void,
};
pub const InitializePerformanceApiInfoINTEL = struct_InitializePerformanceApiInfoINTEL;
pub const struct_QueryPoolPerformanceQueryCreateInfoINTEL = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    performanceCountersSampling: QueryPoolSamplingModeINTEL,
};
pub const QueryPoolPerformanceQueryCreateInfoINTEL = struct_QueryPoolPerformanceQueryCreateInfoINTEL;
pub const QueryPoolCreateInfoINTEL = QueryPoolPerformanceQueryCreateInfoINTEL;
pub const struct_PerformanceMarkerInfoINTEL = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    marker: u64,
};
pub const PerformanceMarkerInfoINTEL = struct_PerformanceMarkerInfoINTEL;
pub const struct_PerformanceStreamMarkerInfoINTEL = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    marker: u32,
};
pub const PerformanceStreamMarkerInfoINTEL = struct_PerformanceStreamMarkerInfoINTEL;
pub const struct_PerformanceOverrideInfoINTEL = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    type: PerformanceOverrideTypeINTEL,
    enable: Bool32,
    parameter: u64,
};
pub const PerformanceOverrideInfoINTEL = struct_PerformanceOverrideInfoINTEL;
pub const struct_PerformanceConfigurationAcquireInfoINTEL = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    type: PerformanceConfigurationTypeINTEL,
};
pub const PerformanceConfigurationAcquireInfoINTEL = struct_PerformanceConfigurationAcquireInfoINTEL;
pub const PFN_vkInitializePerformanceApiINTEL = ?fn (Device, [*c]const InitializePerformanceApiInfoINTEL) callconv(.C) Result;
pub const PFN_vkUninitializePerformanceApiINTEL = ?fn (Device) callconv(.C) void;
pub const PFN_vkCmdSetPerformanceMarkerINTEL = ?fn (CommandBuffer, [*c]const PerformanceMarkerInfoINTEL) callconv(.C) Result;
pub const PFN_vkCmdSetPerformanceStreamMarkerINTEL = ?fn (CommandBuffer, [*c]const PerformanceStreamMarkerInfoINTEL) callconv(.C) Result;
pub const PFN_vkCmdSetPerformanceOverrideINTEL = ?fn (CommandBuffer, [*c]const PerformanceOverrideInfoINTEL) callconv(.C) Result;
pub const PFN_vkAcquirePerformanceConfigurationINTEL = ?fn (Device, [*c]const PerformanceConfigurationAcquireInfoINTEL, [*c]PerformanceConfigurationINTEL) callconv(.C) Result;
pub const PFN_vkReleasePerformanceConfigurationINTEL = ?fn (Device, PerformanceConfigurationINTEL) callconv(.C) Result;
pub const PFN_vkQueueSetPerformanceConfigurationINTEL = ?fn (Queue, PerformanceConfigurationINTEL) callconv(.C) Result;
pub const PFN_vkGetPerformanceParameterINTEL = ?fn (Device, PerformanceParameterTypeINTEL, [*c]PerformanceValueINTEL) callconv(.C) Result;
pub extern fn vkInitializePerformanceApiINTEL(device: Device, pInitializeInfo: [*c]const InitializePerformanceApiInfoINTEL) Result;
pub extern fn vkUninitializePerformanceApiINTEL(device: Device) void;
pub extern fn vkCmdSetPerformanceMarkerINTEL(commandBuffer: CommandBuffer, pMarkerInfo: [*c]const PerformanceMarkerInfoINTEL) Result;
pub extern fn vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer: CommandBuffer, pMarkerInfo: [*c]const PerformanceStreamMarkerInfoINTEL) Result;
pub extern fn vkCmdSetPerformanceOverrideINTEL(commandBuffer: CommandBuffer, pOverrideInfo: [*c]const PerformanceOverrideInfoINTEL) Result;
pub extern fn vkAcquirePerformanceConfigurationINTEL(device: Device, pAcquireInfo: [*c]const PerformanceConfigurationAcquireInfoINTEL, pConfiguration: [*c]PerformanceConfigurationINTEL) Result;
pub extern fn vkReleasePerformanceConfigurationINTEL(device: Device, configuration: PerformanceConfigurationINTEL) Result;
pub extern fn vkQueueSetPerformanceConfigurationINTEL(queue: Queue, configuration: PerformanceConfigurationINTEL) Result;
pub extern fn vkGetPerformanceParameterINTEL(device: Device, parameter: PerformanceParameterTypeINTEL, pValue: [*c]PerformanceValueINTEL) Result;
pub const struct_PhysicalDevicePCIBusInfoPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    pciDomain: u32,
    pciBus: u32,
    pciDevice: u32,
    pciFunction: u32,
};
pub const PhysicalDevicePCIBusInfoPropertiesEXT = struct_PhysicalDevicePCIBusInfoPropertiesEXT;
pub const struct_DisplayNativeHdrSurfaceCapabilitiesAMD = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    localDimmingSupport: Bool32,
};
pub const DisplayNativeHdrSurfaceCapabilitiesAMD = struct_DisplayNativeHdrSurfaceCapabilitiesAMD;
pub const struct_SwapchainDisplayNativeHdrCreateInfoAMD = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    localDimmingEnable: Bool32,
};
pub const SwapchainDisplayNativeHdrCreateInfoAMD = struct_SwapchainDisplayNativeHdrCreateInfoAMD;
pub const PFN_vkSetLocalDimmingAMD = ?fn (Device, SwapchainKHR, Bool32) callconv(.C) void;
pub extern fn vkSetLocalDimmingAMD(device: Device, swapChain: SwapchainKHR, localDimmingEnable: Bool32) void;
pub const struct_PhysicalDeviceFragmentDensityMapFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    fragmentDensityMap: Bool32,
    fragmentDensityMapDynamic: Bool32,
    fragmentDensityMapNonSubsampledImages: Bool32,
};
pub const PhysicalDeviceFragmentDensityMapFeaturesEXT = struct_PhysicalDeviceFragmentDensityMapFeaturesEXT;
pub const struct_PhysicalDeviceFragmentDensityMapPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    minFragmentDensityTexelSize: Extent2D,
    maxFragmentDensityTexelSize: Extent2D,
    fragmentDensityInvocations: Bool32,
};
pub const PhysicalDeviceFragmentDensityMapPropertiesEXT = struct_PhysicalDeviceFragmentDensityMapPropertiesEXT;
pub const struct_RenderPassFragmentDensityMapCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    fragmentDensityMapAttachment: AttachmentReference,
};
pub const RenderPassFragmentDensityMapCreateInfoEXT = struct_RenderPassFragmentDensityMapCreateInfoEXT;
pub const PhysicalDeviceScalarBlockLayoutFeaturesEXT = PhysicalDeviceScalarBlockLayoutFeatures;
pub const struct_PhysicalDeviceSubgroupSizeControlFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    subgroupSizeControl: Bool32,
    computeFullSubgroups: Bool32,
};
pub const PhysicalDeviceSubgroupSizeControlFeaturesEXT = struct_PhysicalDeviceSubgroupSizeControlFeaturesEXT;
pub const struct_PhysicalDeviceSubgroupSizeControlPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    minSubgroupSize: u32,
    maxSubgroupSize: u32,
    maxComputeWorkgroupSubgroups: u32,
    requiredSubgroupSizeStages: ShaderStageFlags,
};
pub const PhysicalDeviceSubgroupSizeControlPropertiesEXT = struct_PhysicalDeviceSubgroupSizeControlPropertiesEXT;
pub const struct_PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    requiredSubgroupSize: u32,
};
pub const PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = struct_PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;
pub const SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = @enumToInt(enum_ShaderCorePropertiesFlagBitsAMD.SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD);
pub const enum_ShaderCorePropertiesFlagBitsAMD = extern enum(c_int) {
    SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const ShaderCorePropertiesFlagBitsAMD = enum_ShaderCorePropertiesFlagBitsAMD;
pub const ShaderCorePropertiesFlagsAMD = Flags;
pub const struct_PhysicalDeviceShaderCoreProperties2AMD = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderCoreFeatures: ShaderCorePropertiesFlagsAMD,
    activeComputeUnitCount: u32,
};
pub const PhysicalDeviceShaderCoreProperties2AMD = struct_PhysicalDeviceShaderCoreProperties2AMD;
pub const struct_PhysicalDeviceCoherentMemoryFeaturesAMD = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    deviceCoherentMemory: Bool32,
};
pub const PhysicalDeviceCoherentMemoryFeaturesAMD = struct_PhysicalDeviceCoherentMemoryFeaturesAMD;
pub const struct_PhysicalDeviceShaderImageAtomicInt64FeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderImageInt64Atomics: Bool32,
    sparseImageInt64Atomics: Bool32,
};
pub const PhysicalDeviceShaderImageAtomicInt64FeaturesEXT = struct_PhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
pub const struct_PhysicalDeviceMemoryBudgetPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    heapBudget: [16]DeviceSize,
    heapUsage: [16]DeviceSize,
};
pub const PhysicalDeviceMemoryBudgetPropertiesEXT = struct_PhysicalDeviceMemoryBudgetPropertiesEXT;
pub const struct_PhysicalDeviceMemoryPriorityFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    memoryPriority: Bool32,
};
pub const PhysicalDeviceMemoryPriorityFeaturesEXT = struct_PhysicalDeviceMemoryPriorityFeaturesEXT;
pub const struct_MemoryPriorityAllocateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    priority: f32,
};
pub const MemoryPriorityAllocateInfoEXT = struct_MemoryPriorityAllocateInfoEXT;
pub const struct_PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    dedicatedAllocationImageAliasing: Bool32,
};
pub const PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = struct_PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
pub const struct_PhysicalDeviceBufferDeviceAddressFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    bufferDeviceAddress: Bool32,
    bufferDeviceAddressCaptureReplay: Bool32,
    bufferDeviceAddressMultiDevice: Bool32,
};
pub const PhysicalDeviceBufferDeviceAddressFeaturesEXT = struct_PhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const PhysicalDeviceBufferAddressFeaturesEXT = PhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const BufferDeviceAddressInfoEXT = BufferDeviceAddressInfo;
pub const struct_BufferDeviceAddressCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    deviceAddress: DeviceAddress,
};
pub const BufferDeviceAddressCreateInfoEXT = struct_BufferDeviceAddressCreateInfoEXT;
pub const PFN_vkGetBufferDeviceAddressEXT = ?fn (Device, [*c]const BufferDeviceAddressInfo) callconv(.C) DeviceAddress;
pub extern fn vkGetBufferDeviceAddressEXT(device: Device, pInfo: [*c]const BufferDeviceAddressInfo) DeviceAddress;
pub const TOOL_PURPOSE_VALIDATION_BIT_EXT = @enumToInt(enum_ToolPurposeFlagBitsEXT.TOOL_PURPOSE_VALIDATION_BIT_EXT);
pub const TOOL_PURPOSE_PROFILING_BIT_EXT = @enumToInt(enum_ToolPurposeFlagBitsEXT.TOOL_PURPOSE_PROFILING_BIT_EXT);
pub const TOOL_PURPOSE_TRACING_BIT_EXT = @enumToInt(enum_ToolPurposeFlagBitsEXT.TOOL_PURPOSE_TRACING_BIT_EXT);
pub const TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = @enumToInt(enum_ToolPurposeFlagBitsEXT.TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT);
pub const TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = @enumToInt(enum_ToolPurposeFlagBitsEXT.TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT);
pub const TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = @enumToInt(enum_ToolPurposeFlagBitsEXT.TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT);
pub const TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = @enumToInt(enum_ToolPurposeFlagBitsEXT.TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT);
pub const TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_ToolPurposeFlagBitsEXT.TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_ToolPurposeFlagBitsEXT = extern enum(c_int) {
    TOOL_PURPOSE_VALIDATION_BIT_EXT = 1,
    TOOL_PURPOSE_PROFILING_BIT_EXT = 2,
    TOOL_PURPOSE_TRACING_BIT_EXT = 4,
    TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8,
    TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16,
    TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32,
    TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64,
    TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const ToolPurposeFlagBitsEXT = enum_ToolPurposeFlagBitsEXT;
pub const ToolPurposeFlagsEXT = Flags;
pub const struct_PhysicalDeviceToolPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    name: [256]u8,
    version: [256]u8,
    purposes: ToolPurposeFlagsEXT,
    description: [256]u8,
    layer: [256]u8,
};
pub const PhysicalDeviceToolPropertiesEXT = struct_PhysicalDeviceToolPropertiesEXT;
pub const PFN_vkGetPhysicalDeviceToolPropertiesEXT = ?fn (PhysicalDevice, [*c]u32, [*c]PhysicalDeviceToolPropertiesEXT) callconv(.C) Result;
pub extern fn vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice: PhysicalDevice, pToolCount: [*c]u32, pToolProperties: [*c]PhysicalDeviceToolPropertiesEXT) Result;
pub const ImageStencilUsageCreateInfoEXT = ImageStencilUsageCreateInfo;
pub const VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = @enumToInt(enum_ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT);
pub const VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = @enumToInt(enum_ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT);
pub const VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = @enumToInt(enum_ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT);
pub const VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = @enumToInt(enum_ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT);
pub const VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = @enumToInt(enum_ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT);
pub const VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = @enumToInt(enum_ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT);
pub const enum_ValidationFeatureEnableEXT = extern enum(c_int) {
    VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
    VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
    VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
    VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
    VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const ValidationFeatureEnableEXT = enum_ValidationFeatureEnableEXT;
pub const VALIDATION_FEATURE_DISABLE_ALL_EXT = @enumToInt(enum_ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_ALL_EXT);
pub const VALIDATION_FEATURE_DISABLE_SHADERS_EXT = @enumToInt(enum_ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_SHADERS_EXT);
pub const VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = @enumToInt(enum_ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT);
pub const VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = @enumToInt(enum_ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT);
pub const VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = @enumToInt(enum_ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT);
pub const VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = @enumToInt(enum_ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT);
pub const VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = @enumToInt(enum_ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT);
pub const VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = @enumToInt(enum_ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT);
pub const enum_ValidationFeatureDisableEXT = extern enum(c_int) {
    VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
    VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
    VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
    VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
    VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
    VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
    VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const ValidationFeatureDisableEXT = enum_ValidationFeatureDisableEXT;
pub const struct_ValidationFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    enabledValidationFeatureCount: u32,
    pEnabledValidationFeatures: [*c]const ValidationFeatureEnableEXT,
    disabledValidationFeatureCount: u32,
    pDisabledValidationFeatures: [*c]const ValidationFeatureDisableEXT,
};
pub const ValidationFeaturesEXT = struct_ValidationFeaturesEXT;
pub const COMPONENT_TYPE_FLOAT16_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_FLOAT16_NV);
pub const COMPONENT_TYPE_FLOAT32_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_FLOAT32_NV);
pub const COMPONENT_TYPE_FLOAT64_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_FLOAT64_NV);
pub const COMPONENT_TYPE_SINT8_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_SINT8_NV);
pub const COMPONENT_TYPE_SINT16_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_SINT16_NV);
pub const COMPONENT_TYPE_SINT32_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_SINT32_NV);
pub const COMPONENT_TYPE_SINT64_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_SINT64_NV);
pub const COMPONENT_TYPE_UINT8_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_UINT8_NV);
pub const COMPONENT_TYPE_UINT16_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_UINT16_NV);
pub const COMPONENT_TYPE_UINT32_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_UINT32_NV);
pub const COMPONENT_TYPE_UINT64_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_UINT64_NV);
pub const COMPONENT_TYPE_MAX_ENUM_NV = @enumToInt(enum_ComponentTypeNV.COMPONENT_TYPE_MAX_ENUM_NV);
pub const enum_ComponentTypeNV = extern enum(c_int) {
    COMPONENT_TYPE_FLOAT16_NV = 0,
    COMPONENT_TYPE_FLOAT32_NV = 1,
    COMPONENT_TYPE_FLOAT64_NV = 2,
    COMPONENT_TYPE_SINT8_NV = 3,
    COMPONENT_TYPE_SINT16_NV = 4,
    COMPONENT_TYPE_SINT32_NV = 5,
    COMPONENT_TYPE_SINT64_NV = 6,
    COMPONENT_TYPE_UINT8_NV = 7,
    COMPONENT_TYPE_UINT16_NV = 8,
    COMPONENT_TYPE_UINT32_NV = 9,
    COMPONENT_TYPE_UINT64_NV = 10,
    COMPONENT_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const ComponentTypeNV = enum_ComponentTypeNV;
pub const SCOPE_DEVICE_NV = @enumToInt(enum_ScopeNV.SCOPE_DEVICE_NV);
pub const SCOPE_WORKGROUP_NV = @enumToInt(enum_ScopeNV.SCOPE_WORKGROUP_NV);
pub const SCOPE_SUBGROUP_NV = @enumToInt(enum_ScopeNV.SCOPE_SUBGROUP_NV);
pub const SCOPE_QUEUE_FAMILY_NV = @enumToInt(enum_ScopeNV.SCOPE_QUEUE_FAMILY_NV);
pub const SCOPE_MAX_ENUM_NV = @enumToInt(enum_ScopeNV.SCOPE_MAX_ENUM_NV);
pub const enum_ScopeNV = extern enum(c_int) {
    SCOPE_DEVICE_NV = 1,
    SCOPE_WORKGROUP_NV = 2,
    SCOPE_SUBGROUP_NV = 3,
    SCOPE_QUEUE_FAMILY_NV = 5,
    SCOPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const ScopeNV = enum_ScopeNV;
pub const struct_CooperativeMatrixPropertiesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    MSize: u32,
    NSize: u32,
    KSize: u32,
    AType: ComponentTypeNV,
    BType: ComponentTypeNV,
    CType: ComponentTypeNV,
    DType: ComponentTypeNV,
    scope: ScopeNV,
};
pub const CooperativeMatrixPropertiesNV = struct_CooperativeMatrixPropertiesNV;
pub const struct_PhysicalDeviceCooperativeMatrixFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    cooperativeMatrix: Bool32,
    cooperativeMatrixRobustBufferAccess: Bool32,
};
pub const PhysicalDeviceCooperativeMatrixFeaturesNV = struct_PhysicalDeviceCooperativeMatrixFeaturesNV;
pub const struct_PhysicalDeviceCooperativeMatrixPropertiesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    cooperativeMatrixSupportedStages: ShaderStageFlags,
};
pub const PhysicalDeviceCooperativeMatrixPropertiesNV = struct_PhysicalDeviceCooperativeMatrixPropertiesNV;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ?fn (PhysicalDevice, [*c]u32, [*c]CooperativeMatrixPropertiesNV) callconv(.C) Result;
pub extern fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: PhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]CooperativeMatrixPropertiesNV) Result;
pub const COVERAGE_REDUCTION_MODE_MERGE_NV = @enumToInt(enum_CoverageReductionModeNV.COVERAGE_REDUCTION_MODE_MERGE_NV);
pub const COVERAGE_REDUCTION_MODE_TRUNCATE_NV = @enumToInt(enum_CoverageReductionModeNV.COVERAGE_REDUCTION_MODE_TRUNCATE_NV);
pub const COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = @enumToInt(enum_CoverageReductionModeNV.COVERAGE_REDUCTION_MODE_MAX_ENUM_NV);
pub const enum_CoverageReductionModeNV = extern enum(c_int) {
    COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
    COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
    COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const CoverageReductionModeNV = enum_CoverageReductionModeNV;
pub const PipelineCoverageReductionStateCreateFlagsNV = Flags;
pub const struct_PhysicalDeviceCoverageReductionModeFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    coverageReductionMode: Bool32,
};
pub const PhysicalDeviceCoverageReductionModeFeaturesNV = struct_PhysicalDeviceCoverageReductionModeFeaturesNV;
pub const struct_PipelineCoverageReductionStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PipelineCoverageReductionStateCreateFlagsNV,
    coverageReductionMode: CoverageReductionModeNV,
};
pub const PipelineCoverageReductionStateCreateInfoNV = struct_PipelineCoverageReductionStateCreateInfoNV;
pub const struct_FramebufferMixedSamplesCombinationNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    coverageReductionMode: CoverageReductionModeNV,
    rasterizationSamples: SampleCountFlagBits,
    depthStencilSamples: SampleCountFlags,
    colorSamples: SampleCountFlags,
};
pub const FramebufferMixedSamplesCombinationNV = struct_FramebufferMixedSamplesCombinationNV;
pub const PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = ?fn (PhysicalDevice, [*c]u32, [*c]FramebufferMixedSamplesCombinationNV) callconv(.C) Result;
pub extern fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: PhysicalDevice, pCombinationCount: [*c]u32, pCombinations: [*c]FramebufferMixedSamplesCombinationNV) Result;
pub const struct_PhysicalDeviceFragmentShaderInterlockFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    fragmentShaderSampleInterlock: Bool32,
    fragmentShaderPixelInterlock: Bool32,
    fragmentShaderShadingRateInterlock: Bool32,
};
pub const PhysicalDeviceFragmentShaderInterlockFeaturesEXT = struct_PhysicalDeviceFragmentShaderInterlockFeaturesEXT;
pub const struct_PhysicalDeviceYcbcrImageArraysFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    ycbcrImageArrays: Bool32,
};
pub const PhysicalDeviceYcbcrImageArraysFeaturesEXT = struct_PhysicalDeviceYcbcrImageArraysFeaturesEXT;
pub const HeadlessSurfaceCreateFlagsEXT = Flags;
pub const struct_HeadlessSurfaceCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: HeadlessSurfaceCreateFlagsEXT,
};
pub const HeadlessSurfaceCreateInfoEXT = struct_HeadlessSurfaceCreateInfoEXT;
pub const PFN_vkCreateHeadlessSurfaceEXT = ?fn (Instance, [*c]const HeadlessSurfaceCreateInfoEXT, [*c]const AllocationCallbacks, [*c]SurfaceKHR) callconv(.C) Result;
pub extern fn vkCreateHeadlessSurfaceEXT(instance: Instance, pCreateInfo: [*c]const HeadlessSurfaceCreateInfoEXT, pAllocator: [*c]const AllocationCallbacks, pSurface: [*c]SurfaceKHR) Result;
pub const LINE_RASTERIZATION_MODE_DEFAULT_EXT = @enumToInt(enum_LineRasterizationModeEXT.LINE_RASTERIZATION_MODE_DEFAULT_EXT);
pub const LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = @enumToInt(enum_LineRasterizationModeEXT.LINE_RASTERIZATION_MODE_RECTANGULAR_EXT);
pub const LINE_RASTERIZATION_MODE_BRESENHAM_EXT = @enumToInt(enum_LineRasterizationModeEXT.LINE_RASTERIZATION_MODE_BRESENHAM_EXT);
pub const LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = @enumToInt(enum_LineRasterizationModeEXT.LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT);
pub const LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = @enumToInt(enum_LineRasterizationModeEXT.LINE_RASTERIZATION_MODE_MAX_ENUM_EXT);
pub const enum_LineRasterizationModeEXT = extern enum(c_int) {
    LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
    LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
    LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
    LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
    LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const LineRasterizationModeEXT = enum_LineRasterizationModeEXT;
pub const struct_PhysicalDeviceLineRasterizationFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    rectangularLines: Bool32,
    bresenhamLines: Bool32,
    smoothLines: Bool32,
    stippledRectangularLines: Bool32,
    stippledBresenhamLines: Bool32,
    stippledSmoothLines: Bool32,
};
pub const PhysicalDeviceLineRasterizationFeaturesEXT = struct_PhysicalDeviceLineRasterizationFeaturesEXT;
pub const struct_PhysicalDeviceLineRasterizationPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    lineSubPixelPrecisionBits: u32,
};
pub const PhysicalDeviceLineRasterizationPropertiesEXT = struct_PhysicalDeviceLineRasterizationPropertiesEXT;
pub const struct_PipelineRasterizationLineStateCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    lineRasterizationMode: LineRasterizationModeEXT,
    stippledLineEnable: Bool32,
    lineStippleFactor: u32,
    lineStipplePattern: u16,
};
pub const PipelineRasterizationLineStateCreateInfoEXT = struct_PipelineRasterizationLineStateCreateInfoEXT;
pub const PFN_vkCmdSetLineStippleEXT = ?fn (CommandBuffer, u32, u16) callconv(.C) void;
pub extern fn vkCmdSetLineStippleEXT(commandBuffer: CommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) void;
pub const struct_PhysicalDeviceShaderAtomicFloatFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderBufferFloat32Atomics: Bool32,
    shaderBufferFloat32AtomicAdd: Bool32,
    shaderBufferFloat64Atomics: Bool32,
    shaderBufferFloat64AtomicAdd: Bool32,
    shaderSharedFloat32Atomics: Bool32,
    shaderSharedFloat32AtomicAdd: Bool32,
    shaderSharedFloat64Atomics: Bool32,
    shaderSharedFloat64AtomicAdd: Bool32,
    shaderImageFloat32Atomics: Bool32,
    shaderImageFloat32AtomicAdd: Bool32,
    sparseImageFloat32Atomics: Bool32,
    sparseImageFloat32AtomicAdd: Bool32,
};
pub const PhysicalDeviceShaderAtomicFloatFeaturesEXT = struct_PhysicalDeviceShaderAtomicFloatFeaturesEXT;
pub const PhysicalDeviceHostQueryResetFeaturesEXT = PhysicalDeviceHostQueryResetFeatures;
pub const PFN_vkResetQueryPoolEXT = ?fn (Device, QueryPool, u32, u32) callconv(.C) void;
pub extern fn vkResetQueryPoolEXT(device: Device, queryPool: QueryPool, firstQuery: u32, queryCount: u32) void;
pub const struct_PhysicalDeviceIndexTypeUint8FeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    indexTypeUint8: Bool32,
};
pub const PhysicalDeviceIndexTypeUint8FeaturesEXT = struct_PhysicalDeviceIndexTypeUint8FeaturesEXT;
pub const struct_PhysicalDeviceExtendedDynamicStateFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    extendedDynamicState: Bool32,
};
pub const PhysicalDeviceExtendedDynamicStateFeaturesEXT = struct_PhysicalDeviceExtendedDynamicStateFeaturesEXT;
pub const PFN_vkCmdSetCullModeEXT = ?fn (CommandBuffer, CullModeFlags) callconv(.C) void;
pub const PFN_vkCmdSetFrontFaceEXT = ?fn (CommandBuffer, FrontFace) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveTopologyEXT = ?fn (CommandBuffer, PrimitiveTopology) callconv(.C) void;
pub const PFN_vkCmdSetViewportWithCountEXT = ?fn (CommandBuffer, u32, [*c]const Viewport) callconv(.C) void;
pub const PFN_vkCmdSetScissorWithCountEXT = ?fn (CommandBuffer, u32, [*c]const Rect2D) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers2EXT = ?fn (CommandBuffer, u32, u32, [*c]const Buffer, [*c]const DeviceSize, [*c]const DeviceSize, [*c]const DeviceSize) callconv(.C) void;
pub const PFN_vkCmdSetDepthTestEnableEXT = ?fn (CommandBuffer, Bool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthWriteEnableEXT = ?fn (CommandBuffer, Bool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthCompareOpEXT = ?fn (CommandBuffer, CompareOp) callconv(.C) void;
pub const PFN_vkCmdSetDepthBoundsTestEnableEXT = ?fn (CommandBuffer, Bool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilTestEnableEXT = ?fn (CommandBuffer, Bool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilOpEXT = ?fn (CommandBuffer, StencilFaceFlags, StencilOp, StencilOp, StencilOp, CompareOp) callconv(.C) void;
pub extern fn vkCmdSetCullModeEXT(commandBuffer: CommandBuffer, cullMode: CullModeFlags) void;
pub extern fn vkCmdSetFrontFaceEXT(commandBuffer: CommandBuffer, frontFace: FrontFace) void;
pub extern fn vkCmdSetPrimitiveTopologyEXT(commandBuffer: CommandBuffer, primitiveTopology: PrimitiveTopology) void;
pub extern fn vkCmdSetViewportWithCountEXT(commandBuffer: CommandBuffer, viewportCount: u32, pViewports: [*c]const Viewport) void;
pub extern fn vkCmdSetScissorWithCountEXT(commandBuffer: CommandBuffer, scissorCount: u32, pScissors: [*c]const Rect2D) void;
pub extern fn vkCmdBindVertexBuffers2EXT(commandBuffer: CommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const Buffer, pOffsets: [*c]const DeviceSize, pSizes: [*c]const DeviceSize, pStrides: [*c]const DeviceSize) void;
pub extern fn vkCmdSetDepthTestEnableEXT(commandBuffer: CommandBuffer, depthTestEnable: Bool32) void;
pub extern fn vkCmdSetDepthWriteEnableEXT(commandBuffer: CommandBuffer, depthWriteEnable: Bool32) void;
pub extern fn vkCmdSetDepthCompareOpEXT(commandBuffer: CommandBuffer, depthCompareOp: CompareOp) void;
pub extern fn vkCmdSetDepthBoundsTestEnableEXT(commandBuffer: CommandBuffer, depthBoundsTestEnable: Bool32) void;
pub extern fn vkCmdSetStencilTestEnableEXT(commandBuffer: CommandBuffer, stencilTestEnable: Bool32) void;
pub extern fn vkCmdSetStencilOpEXT(commandBuffer: CommandBuffer, faceMask: StencilFaceFlags, failOp: StencilOp, passOp: StencilOp, depthFailOp: StencilOp, compareOp: CompareOp) void;
pub const struct_PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    shaderDemoteToHelperInvocation: Bool32,
};
pub const PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = struct_PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;
pub const struct_IndirectCommandsLayoutNV_T = opaque {};
pub const IndirectCommandsLayoutNV = ?*struct_IndirectCommandsLayoutNV_T;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = @enumToInt(enum_IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV);
pub const INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = @enumToInt(enum_IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV);
pub const INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = @enumToInt(enum_IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV);
pub const INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = @enumToInt(enum_IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV);
pub const INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = @enumToInt(enum_IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV);
pub const INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = @enumToInt(enum_IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV);
pub const INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = @enumToInt(enum_IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV);
pub const INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = @enumToInt(enum_IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV);
pub const INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = @enumToInt(enum_IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV);
pub const enum_IndirectCommandsTokenTypeNV = extern enum(c_int) {
    INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
    INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
    INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
    INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
    INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
    INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const IndirectCommandsTokenTypeNV = enum_IndirectCommandsTokenTypeNV;
pub const INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = @enumToInt(enum_IndirectStateFlagBitsNV.INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV);
pub const INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_IndirectStateFlagBitsNV.INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV);
pub const enum_IndirectStateFlagBitsNV = extern enum(c_int) {
    INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1,
    INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const IndirectStateFlagBitsNV = enum_IndirectStateFlagBitsNV;
pub const IndirectStateFlagsNV = Flags;
pub const INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = @enumToInt(enum_IndirectCommandsLayoutUsageFlagBitsNV.INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV);
pub const INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = @enumToInt(enum_IndirectCommandsLayoutUsageFlagBitsNV.INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV);
pub const INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = @enumToInt(enum_IndirectCommandsLayoutUsageFlagBitsNV.INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV);
pub const INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_IndirectCommandsLayoutUsageFlagBitsNV.INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV);
pub const enum_IndirectCommandsLayoutUsageFlagBitsNV = extern enum(c_int) {
    INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1,
    INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2,
    INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4,
    INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const IndirectCommandsLayoutUsageFlagBitsNV = enum_IndirectCommandsLayoutUsageFlagBitsNV;
pub const IndirectCommandsLayoutUsageFlagsNV = Flags;
pub const struct_PhysicalDeviceDeviceGeneratedCommandsPropertiesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxGraphicsShaderGroupCount: u32,
    maxIndirectSequenceCount: u32,
    maxIndirectCommandsTokenCount: u32,
    maxIndirectCommandsStreamCount: u32,
    maxIndirectCommandsTokenOffset: u32,
    maxIndirectCommandsStreamStride: u32,
    minSequencesCountBufferOffsetAlignment: u32,
    minSequencesIndexBufferOffsetAlignment: u32,
    minIndirectCommandsBufferOffsetAlignment: u32,
};
pub const PhysicalDeviceDeviceGeneratedCommandsPropertiesNV = struct_PhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
pub const struct_PhysicalDeviceDeviceGeneratedCommandsFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    deviceGeneratedCommands: Bool32,
};
pub const PhysicalDeviceDeviceGeneratedCommandsFeaturesNV = struct_PhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
pub const struct_GraphicsShaderGroupCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    stageCount: u32,
    pStages: [*c]const PipelineShaderStageCreateInfo,
    pVertexInputState: [*c]const PipelineVertexInputStateCreateInfo,
    pTessellationState: [*c]const PipelineTessellationStateCreateInfo,
};
pub const GraphicsShaderGroupCreateInfoNV = struct_GraphicsShaderGroupCreateInfoNV;
pub const struct_GraphicsPipelineShaderGroupsCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    groupCount: u32,
    pGroups: [*c]const GraphicsShaderGroupCreateInfoNV,
    pipelineCount: u32,
    pPipelines: [*c]const Pipeline,
};
pub const GraphicsPipelineShaderGroupsCreateInfoNV = struct_GraphicsPipelineShaderGroupsCreateInfoNV;
pub const struct_BindShaderGroupIndirectCommandNV = extern struct {
    groupIndex: u32,
};
pub const BindShaderGroupIndirectCommandNV = struct_BindShaderGroupIndirectCommandNV;
pub const struct_BindIndexBufferIndirectCommandNV = extern struct {
    bufferAddress: DeviceAddress,
    size: u32,
    indexType: IndexType,
};
pub const BindIndexBufferIndirectCommandNV = struct_BindIndexBufferIndirectCommandNV;
pub const struct_BindVertexBufferIndirectCommandNV = extern struct {
    bufferAddress: DeviceAddress,
    size: u32,
    stride: u32,
};
pub const BindVertexBufferIndirectCommandNV = struct_BindVertexBufferIndirectCommandNV;
pub const struct_SetStateFlagsIndirectCommandNV = extern struct {
    data: u32,
};
pub const SetStateFlagsIndirectCommandNV = struct_SetStateFlagsIndirectCommandNV;
pub const struct_IndirectCommandsStreamNV = extern struct {
    buffer: Buffer,
    offset: DeviceSize,
};
pub const IndirectCommandsStreamNV = struct_IndirectCommandsStreamNV;
pub const struct_IndirectCommandsLayoutTokenNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    tokenType: IndirectCommandsTokenTypeNV,
    stream: u32,
    offset: u32,
    vertexBindingUnit: u32,
    vertexDynamicStride: Bool32,
    pushconstantPipelineLayout: PipelineLayout,
    pushconstantShaderStageFlags: ShaderStageFlags,
    pushconstantOffset: u32,
    pushconstantSize: u32,
    indirectStateFlags: IndirectStateFlagsNV,
    indexTypeCount: u32,
    pIndexTypes: [*c]const IndexType,
    pIndexTypeValues: [*c]const u32,
};
pub const IndirectCommandsLayoutTokenNV = struct_IndirectCommandsLayoutTokenNV;
pub const struct_IndirectCommandsLayoutCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: IndirectCommandsLayoutUsageFlagsNV,
    pipelineBindPoint: PipelineBindPoint,
    tokenCount: u32,
    pTokens: [*c]const IndirectCommandsLayoutTokenNV,
    streamCount: u32,
    pStreamStrides: [*c]const u32,
};
pub const IndirectCommandsLayoutCreateInfoNV = struct_IndirectCommandsLayoutCreateInfoNV;
pub const struct_GeneratedCommandsInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pipelineBindPoint: PipelineBindPoint,
    pipeline: Pipeline,
    indirectCommandsLayout: IndirectCommandsLayoutNV,
    streamCount: u32,
    pStreams: [*c]const IndirectCommandsStreamNV,
    sequencesCount: u32,
    preprocessBuffer: Buffer,
    preprocessOffset: DeviceSize,
    preprocessSize: DeviceSize,
    sequencesCountBuffer: Buffer,
    sequencesCountOffset: DeviceSize,
    sequencesIndexBuffer: Buffer,
    sequencesIndexOffset: DeviceSize,
};
pub const GeneratedCommandsInfoNV = struct_GeneratedCommandsInfoNV;
pub const struct_GeneratedCommandsMemoryRequirementsInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    pipelineBindPoint: PipelineBindPoint,
    pipeline: Pipeline,
    indirectCommandsLayout: IndirectCommandsLayoutNV,
    maxSequencesCount: u32,
};
pub const GeneratedCommandsMemoryRequirementsInfoNV = struct_GeneratedCommandsMemoryRequirementsInfoNV;
pub const PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ?fn (Device, [*c]const GeneratedCommandsMemoryRequirementsInfoNV, [*c]MemoryRequirements2) callconv(.C) void;
pub const PFN_vkCmdPreprocessGeneratedCommandsNV = ?fn (CommandBuffer, [*c]const GeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdExecuteGeneratedCommandsNV = ?fn (CommandBuffer, Bool32, [*c]const GeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdBindPipelineShaderGroupNV = ?fn (CommandBuffer, PipelineBindPoint, Pipeline, u32) callconv(.C) void;
pub const PFN_vkCreateIndirectCommandsLayoutNV = ?fn (Device, [*c]const IndirectCommandsLayoutCreateInfoNV, [*c]const AllocationCallbacks, [*c]IndirectCommandsLayoutNV) callconv(.C) Result;
pub const PFN_vkDestroyIndirectCommandsLayoutNV = ?fn (Device, IndirectCommandsLayoutNV, [*c]const AllocationCallbacks) callconv(.C) void;
pub extern fn vkGetGeneratedCommandsMemoryRequirementsNV(device: Device, pInfo: [*c]const GeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: [*c]MemoryRequirements2) void;
pub extern fn vkCmdPreprocessGeneratedCommandsNV(commandBuffer: CommandBuffer, pGeneratedCommandsInfo: [*c]const GeneratedCommandsInfoNV) void;
pub extern fn vkCmdExecuteGeneratedCommandsNV(commandBuffer: CommandBuffer, isPreprocessed: Bool32, pGeneratedCommandsInfo: [*c]const GeneratedCommandsInfoNV) void;
pub extern fn vkCmdBindPipelineShaderGroupNV(commandBuffer: CommandBuffer, pipelineBindPoint: PipelineBindPoint, pipeline: Pipeline, groupIndex: u32) void;
pub extern fn vkCreateIndirectCommandsLayoutNV(device: Device, pCreateInfo: [*c]const IndirectCommandsLayoutCreateInfoNV, pAllocator: [*c]const AllocationCallbacks, pIndirectCommandsLayout: [*c]IndirectCommandsLayoutNV) Result;
pub extern fn vkDestroyIndirectCommandsLayoutNV(device: Device, indirectCommandsLayout: IndirectCommandsLayoutNV, pAllocator: [*c]const AllocationCallbacks) void;
pub const struct_PhysicalDeviceTexelBufferAlignmentFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    texelBufferAlignment: Bool32,
};
pub const PhysicalDeviceTexelBufferAlignmentFeaturesEXT = struct_PhysicalDeviceTexelBufferAlignmentFeaturesEXT;
pub const struct_PhysicalDeviceTexelBufferAlignmentPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    storageTexelBufferOffsetAlignmentBytes: DeviceSize,
    storageTexelBufferOffsetSingleTexelAlignment: Bool32,
    uniformTexelBufferOffsetAlignmentBytes: DeviceSize,
    uniformTexelBufferOffsetSingleTexelAlignment: Bool32,
};
pub const PhysicalDeviceTexelBufferAlignmentPropertiesEXT = struct_PhysicalDeviceTexelBufferAlignmentPropertiesEXT;
pub const struct_RenderPassTransformBeginInfoQCOM = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    transform: SurfaceTransformFlagBitsKHR,
};
pub const RenderPassTransformBeginInfoQCOM = struct_RenderPassTransformBeginInfoQCOM;
pub const struct_CommandBufferInheritanceRenderPassTransformInfoQCOM = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    transform: SurfaceTransformFlagBitsKHR,
    renderArea: Rect2D,
};
pub const CommandBufferInheritanceRenderPassTransformInfoQCOM = struct_CommandBufferInheritanceRenderPassTransformInfoQCOM;
pub const DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = @enumToInt(enum_DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT);
pub const DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = @enumToInt(enum_DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT);
pub const DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = @enumToInt(enum_DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT);
pub const DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = @enumToInt(enum_DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT);
pub const DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = @enumToInt(enum_DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT);
pub const DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = @enumToInt(enum_DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT);
pub const enum_DeviceMemoryReportEventTypeEXT = extern enum(c_int) {
    DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
    DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
    DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
    DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
    DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,
    DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const DeviceMemoryReportEventTypeEXT = enum_DeviceMemoryReportEventTypeEXT;
pub const DeviceMemoryReportFlagsEXT = Flags;
pub const struct_PhysicalDeviceDeviceMemoryReportFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    deviceMemoryReport: Bool32,
};
pub const PhysicalDeviceDeviceMemoryReportFeaturesEXT = struct_PhysicalDeviceDeviceMemoryReportFeaturesEXT;
pub const struct_DeviceMemoryReportCallbackDataEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DeviceMemoryReportFlagsEXT,
    type: DeviceMemoryReportEventTypeEXT,
    memoryObjectId: u64,
    size: DeviceSize,
    objectType: ObjectType,
    objectHandle: u64,
    heapIndex: u32,
};
pub const DeviceMemoryReportCallbackDataEXT = struct_DeviceMemoryReportCallbackDataEXT;
pub const PFN_vkDeviceMemoryReportCallbackEXT = ?fn ([*c]const DeviceMemoryReportCallbackDataEXT, ?*c_void) callconv(.C) void;
pub const struct_DeviceDeviceMemoryReportCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DeviceMemoryReportFlagsEXT,
    pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT,
    pUserData: ?*c_void,
};
pub const DeviceDeviceMemoryReportCreateInfoEXT = struct_DeviceDeviceMemoryReportCreateInfoEXT;
pub const struct_PhysicalDeviceRobustness2FeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    robustBufferAccess2: Bool32,
    robustImageAccess2: Bool32,
    nullDescriptor: Bool32,
};
pub const PhysicalDeviceRobustness2FeaturesEXT = struct_PhysicalDeviceRobustness2FeaturesEXT;
pub const struct_PhysicalDeviceRobustness2PropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    robustStorageBufferAccessSizeAlignment: DeviceSize,
    robustUniformBufferAccessSizeAlignment: DeviceSize,
};
pub const PhysicalDeviceRobustness2PropertiesEXT = struct_PhysicalDeviceRobustness2PropertiesEXT;
pub const struct_SamplerCustomBorderColorCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    customBorderColor: ClearColorValue,
    format: Format,
};
pub const SamplerCustomBorderColorCreateInfoEXT = struct_SamplerCustomBorderColorCreateInfoEXT;
pub const struct_PhysicalDeviceCustomBorderColorPropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxCustomBorderColorSamplers: u32,
};
pub const PhysicalDeviceCustomBorderColorPropertiesEXT = struct_PhysicalDeviceCustomBorderColorPropertiesEXT;
pub const struct_PhysicalDeviceCustomBorderColorFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    customBorderColors: Bool32,
    customBorderColorWithoutFormat: Bool32,
};
pub const PhysicalDeviceCustomBorderColorFeaturesEXT = struct_PhysicalDeviceCustomBorderColorFeaturesEXT;
pub const struct_PrivateDataSlotEXT_T = opaque {};
pub const PrivateDataSlotEXT = ?*struct_PrivateDataSlotEXT_T;
pub const PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_PrivateDataSlotCreateFlagBitsEXT.PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_PrivateDataSlotCreateFlagBitsEXT = extern enum(c_int) {
    PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const PrivateDataSlotCreateFlagBitsEXT = enum_PrivateDataSlotCreateFlagBitsEXT;
pub const PrivateDataSlotCreateFlagsEXT = Flags;
pub const struct_PhysicalDevicePrivateDataFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    privateData: Bool32,
};
pub const PhysicalDevicePrivateDataFeaturesEXT = struct_PhysicalDevicePrivateDataFeaturesEXT;
pub const struct_DevicePrivateDataCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    privateDataSlotRequestCount: u32,
};
pub const DevicePrivateDataCreateInfoEXT = struct_DevicePrivateDataCreateInfoEXT;
pub const struct_PrivateDataSlotCreateInfoEXT = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: PrivateDataSlotCreateFlagsEXT,
};
pub const PrivateDataSlotCreateInfoEXT = struct_PrivateDataSlotCreateInfoEXT;
pub const PFN_vkCreatePrivateDataSlotEXT = ?fn (Device, [*c]const PrivateDataSlotCreateInfoEXT, [*c]const AllocationCallbacks, [*c]PrivateDataSlotEXT) callconv(.C) Result;
pub const PFN_vkDestroyPrivateDataSlotEXT = ?fn (Device, PrivateDataSlotEXT, [*c]const AllocationCallbacks) callconv(.C) void;
pub const PFN_vkSetPrivateDataEXT = ?fn (Device, ObjectType, u64, PrivateDataSlotEXT, u64) callconv(.C) Result;
pub const PFN_vkGetPrivateDataEXT = ?fn (Device, ObjectType, u64, PrivateDataSlotEXT, [*c]u64) callconv(.C) void;
pub extern fn vkCreatePrivateDataSlotEXT(device: Device, pCreateInfo: [*c]const PrivateDataSlotCreateInfoEXT, pAllocator: [*c]const AllocationCallbacks, pPrivateDataSlot: [*c]PrivateDataSlotEXT) Result;
pub extern fn vkDestroyPrivateDataSlotEXT(device: Device, privateDataSlot: PrivateDataSlotEXT, pAllocator: [*c]const AllocationCallbacks) void;
pub extern fn vkSetPrivateDataEXT(device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlotEXT, data: u64) Result;
pub extern fn vkGetPrivateDataEXT(device: Device, objectType: ObjectType, objectHandle: u64, privateDataSlot: PrivateDataSlotEXT, pData: [*c]u64) void;
pub const struct_PhysicalDevicePipelineCreationCacheControlFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    pipelineCreationCacheControl: Bool32,
};
pub const PhysicalDevicePipelineCreationCacheControlFeaturesEXT = struct_PhysicalDevicePipelineCreationCacheControlFeaturesEXT;
pub const DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = @enumToInt(enum_DeviceDiagnosticsConfigFlagBitsNV.DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV);
pub const DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = @enumToInt(enum_DeviceDiagnosticsConfigFlagBitsNV.DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV);
pub const DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = @enumToInt(enum_DeviceDiagnosticsConfigFlagBitsNV.DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV);
pub const DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_DeviceDiagnosticsConfigFlagBitsNV.DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV);
pub const enum_DeviceDiagnosticsConfigFlagBitsNV = extern enum(c_int) {
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1,
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2,
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4,
    DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const DeviceDiagnosticsConfigFlagBitsNV = enum_DeviceDiagnosticsConfigFlagBitsNV;
pub const DeviceDiagnosticsConfigFlagsNV = Flags;
pub const struct_PhysicalDeviceDiagnosticsConfigFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    diagnosticsConfig: Bool32,
};
pub const PhysicalDeviceDiagnosticsConfigFeaturesNV = struct_PhysicalDeviceDiagnosticsConfigFeaturesNV;
pub const struct_DeviceDiagnosticsConfigCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    flags: DeviceDiagnosticsConfigFlagsNV,
};
pub const DeviceDiagnosticsConfigCreateInfoNV = struct_DeviceDiagnosticsConfigCreateInfoNV;
pub const FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = @enumToInt(enum_FragmentShadingRateTypeNV.FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV);
pub const FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = @enumToInt(enum_FragmentShadingRateTypeNV.FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV);
pub const FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = @enumToInt(enum_FragmentShadingRateTypeNV.FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV);
pub const enum_FragmentShadingRateTypeNV = extern enum(c_int) {
    FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
    FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,
    FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const FragmentShadingRateTypeNV = enum_FragmentShadingRateTypeNV;
pub const FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV);
pub const FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV);
pub const FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV);
pub const FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV);
pub const FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV);
pub const FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV);
pub const FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV);
pub const FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV);
pub const FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV);
pub const FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV);
pub const FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV);
pub const FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV);
pub const FRAGMENT_SHADING_RATE_MAX_ENUM_NV = @enumToInt(enum_FragmentShadingRateNV.FRAGMENT_SHADING_RATE_MAX_ENUM_NV);
pub const enum_FragmentShadingRateNV = extern enum(c_int) {
    FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
    FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
    FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
    FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
    FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
    FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
    FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
    FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
    FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
    FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
    FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15,
    FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const FragmentShadingRateNV = enum_FragmentShadingRateNV;
pub const struct_PhysicalDeviceFragmentShadingRateEnumsFeaturesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    fragmentShadingRateEnums: Bool32,
    supersampleFragmentShadingRates: Bool32,
    noInvocationFragmentShadingRates: Bool32,
};
pub const PhysicalDeviceFragmentShadingRateEnumsFeaturesNV = struct_PhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
pub const struct_PhysicalDeviceFragmentShadingRateEnumsPropertiesNV = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    maxFragmentShadingRateInvocationCount: SampleCountFlagBits,
};
pub const PhysicalDeviceFragmentShadingRateEnumsPropertiesNV = struct_PhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
pub const struct_PipelineFragmentShadingRateEnumStateCreateInfoNV = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    shadingRateType: FragmentShadingRateTypeNV,
    shadingRate: FragmentShadingRateNV,
    combinerOps: [2]FragmentShadingRateCombinerOpKHR,
};
pub const PipelineFragmentShadingRateEnumStateCreateInfoNV = struct_PipelineFragmentShadingRateEnumStateCreateInfoNV;
pub const PFN_vkCmdSetFragmentShadingRateEnumNV = ?fn (CommandBuffer, FragmentShadingRateNV, [*c]const FragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub extern fn vkCmdSetFragmentShadingRateEnumNV(commandBuffer: CommandBuffer, shadingRate: FragmentShadingRateNV, combinerOps: [*c]const FragmentShadingRateCombinerOpKHR) void;
pub const struct_PhysicalDeviceFragmentDensityMap2FeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    fragmentDensityMapDeferred: Bool32,
};
pub const PhysicalDeviceFragmentDensityMap2FeaturesEXT = struct_PhysicalDeviceFragmentDensityMap2FeaturesEXT;
pub const struct_PhysicalDeviceFragmentDensityMap2PropertiesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    subsampledLoads: Bool32,
    subsampledCoarseReconstructionEarlyAccess: Bool32,
    maxSubsampledArrayLayers: u32,
    maxDescriptorSetSubsampledSamplers: u32,
};
pub const PhysicalDeviceFragmentDensityMap2PropertiesEXT = struct_PhysicalDeviceFragmentDensityMap2PropertiesEXT;
pub const struct_CopyCommandTransformInfoQCOM = extern struct {
    sType: StructureType,
    pNext: ?*const c_void,
    transform: SurfaceTransformFlagBitsKHR,
};
pub const CopyCommandTransformInfoQCOM = struct_CopyCommandTransformInfoQCOM;
pub const struct_PhysicalDeviceImageRobustnessFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    robustImageAccess: Bool32,
};
pub const PhysicalDeviceImageRobustnessFeaturesEXT = struct_PhysicalDeviceImageRobustnessFeaturesEXT;
pub const struct_PhysicalDevice4444FormatsFeaturesEXT = extern struct {
    sType: StructureType,
    pNext: ?*c_void,
    formatA4R4G4B4: Bool32,
    formatA4B4G4R4: Bool32,
};
pub const PhysicalDevice4444FormatsFeaturesEXT = struct_PhysicalDevice4444FormatsFeaturesEXT;
pub const __INTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):62:9
pub const __UINTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):66:9
pub const __PTRDIFF_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):73:9
pub const __INTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):77:9
pub const __SIZE_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):81:9
pub const __UINTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):96:9
pub const __INT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):159:9
pub const __UINT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):187:9
pub const __INT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):225:9
pub const __UINT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):229:9
pub const __INT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):265:9
pub const __UINT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):269:9
pub const __GLIBC_USE = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/features.h:179:9
pub const __NTH = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/sys/cdefs.h:57:11
pub const __NTHNL = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/sys/cdefs.h:58:11
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/sys/cdefs.h:105:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token .Hash"); // /usr/include/sys/cdefs.h:106:9
pub const __ptr_t = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/sys/cdefs.h:109:9
pub const __warndecl = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/include/sys/cdefs.h:133:10
pub const __warnattr = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/sys/cdefs.h:134:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/include/sys/cdefs.h:135:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token .LBracket"); // /usr/include/sys/cdefs.h:143:10
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token .Hash"); // /usr/include/sys/cdefs.h:174:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token .Hash"); // /usr/include/sys/cdefs.h:181:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token .Hash"); // /usr/include/sys/cdefs.h:183:11
pub const __ASMNAME2 = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/sys/cdefs.h:187:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/sys/cdefs.h:219:10
pub const __extern_inline = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/include/sys/cdefs.h:346:11
pub const __extern_always_inline = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/include/sys/cdefs.h:347:11
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/sys/cdefs.h:441:10
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/sys/cdefs.h:512:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/sys/cdefs.h:513:10
pub const __glibc_macro_warning1 = @compileError("unable to translate C expr: unexpected token .Hash"); // /usr/include/sys/cdefs.h:527:10
pub const __attr_access = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/sys/cdefs.h:559:11
pub const __S16_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:109:9
pub const __U16_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:110:9
pub const __SLONGWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:113:9
pub const __ULONGWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:114:9
pub const __SQUAD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:128:10
pub const __UQUAD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:129:10
pub const __SWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:130:10
pub const __UWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:131:10
pub const __S64_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:134:10
pub const __U64_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /usr/include/bits/types.h:135:10
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_typedef"); // /usr/include/bits/types.h:137:10
pub const __TIMER_T_TYPE = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/bits/typesizes.h:71:9
pub const __FSID_T_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /usr/include/bits/typesizes.h:73:9
pub const __INT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/stdint.h:106:11
pub const __UINT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/stdint.h:107:11
pub const INT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/stdint.h:252:11
pub const UINT32_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/stdint.h:260:10
pub const UINT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/stdint.h:262:11
pub const INTMAX_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/stdint.h:269:11
pub const UINTMAX_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/stdint.h:270:11
pub const DEFINE_HANDLE = @compileError("unable to translate C expr: unexpected token .Keyword_typedef"); // /usr/include/vulkan/vulkan_core.h:25:9
pub const DEFINE_NON_DISPATCHABLE_HANDLE = @compileError("unable to translate C expr: unexpected token .Keyword_typedef"); // /usr/include/vulkan/vulkan_core.h:30:17
pub const __llvm__ = 1;
pub const __clang__ = 1;
pub const __clang_major__ = 11;
pub const __clang_minor__ = 0;
pub const __clang_patchlevel__ = 0;
pub const __clang_version__ = "11.0.0 ";
pub const __GNUC__ = 4;
pub const __GNUC_MINOR__ = 2;
pub const __GNUC_PATCHLEVEL__ = 1;
pub const __GXX_ABI_VERSION = 1002;
pub const __ATOMIC_RELAXED = 0;
pub const __ATOMIC_CONSUME = 1;
pub const __ATOMIC_ACQUIRE = 2;
pub const __ATOMIC_RELEASE = 3;
pub const __ATOMIC_ACQ_REL = 4;
pub const __ATOMIC_SEQ_CST = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const __VERSION__ = "Clang 11.0.0";
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const __OPTIMIZE__ = 1;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = 1;
pub const _LP64 = 1;
pub const __LP64__ = 1;
pub const __CHAR_BIT__ = 8;
pub const __SCHAR_MAX__ = 127;
pub const __SHRT_MAX__ = 32767;
pub const __INT_MAX__ = 2147483647;
pub const __LONG_MAX__ = @as(c_long, 9223372036854775807);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = 2147483647;
pub const __WINT_MAX__ = @as(c_uint, 4294967295);
pub const __INTMAX_MAX__ = @as(c_long, 9223372036854775807);
pub const __SIZE_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINTMAX_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __PTRDIFF_MAX__ = @as(c_long, 9223372036854775807);
pub const __INTPTR_MAX__ = @as(c_long, 9223372036854775807);
pub const __UINTPTR_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __SIZEOF_DOUBLE__ = 8;
pub const __SIZEOF_FLOAT__ = 4;
pub const __SIZEOF_INT__ = 4;
pub const __SIZEOF_LONG__ = 8;
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const __SIZEOF_POINTER__ = 8;
pub const __SIZEOF_SHORT__ = 2;
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const __SIZEOF_SIZE_T__ = 8;
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __SIZEOF_WINT_T__ = 4;
pub const __SIZEOF_INT128__ = 16;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = L;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const __INTMAX_WIDTH__ = 64;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __PTRDIFF_WIDTH__ = 64;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __INTPTR_WIDTH__ = 64;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __SIZE_WIDTH__ = 64;
pub const __WCHAR_TYPE__ = c_int;
pub const __WCHAR_WIDTH__ = 32;
pub const __WINT_TYPE__ = c_uint;
pub const __WINT_WIDTH__ = 32;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTMAX_WIDTH__ = 64;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __UINTPTR_WIDTH__ = 64;
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = 1;
pub const __FLT_DIG__ = 6;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = 1;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const __FLT_MAX_10_EXP__ = 38;
pub const __FLT_MAX_EXP__ = 128;
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -37;
pub const __FLT_MIN_EXP__ = -125;
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __DBL_HAS_DENORM__ = 1;
pub const __DBL_DIG__ = 15;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const __DBL_HAS_INFINITY__ = 1;
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __DBL_MANT_DIG__ = 53;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __DBL_MAX_EXP__ = 1024;
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const __DBL_MIN_10_EXP__ = -307;
pub const __DBL_MIN_EXP__ = -1021;
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = 1;
pub const __LDBL_DIG__ = 18;
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const __LDBL_MANT_DIG__ = 64;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const __LDBL_MAX_EXP__ = 16384;
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -4931;
pub const __LDBL_MIN_EXP__ = -16381;
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = 64;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const __WINT_UNSIGNED__ = 1;
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = L;
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_MAX__ = 255;
pub const __INT8_MAX__ = 127;
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_MAX__ = 65535;
pub const __INT16_MAX__ = 32767;
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = U;
pub const __UINT32_MAX__ = @as(c_uint, 4294967295);
pub const __INT32_MAX__ = 2147483647;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = UL;
pub const __UINT64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = 127;
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = 255;
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = 32767;
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = 65535;
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = 127;
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = 255;
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = 32767;
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __FINITE_MATH_ONLY__ = 0;
pub const __GNUC_STDC_INLINE__ = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __PIC__ = 2;
pub const __pic__ = 2;
pub const __PIE__ = 2;
pub const __pie__ = 2;
pub const __FLT_EVAL_METHOD__ = 0;
pub const __FLT_RADIX__ = 2;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __GCC_ASM_FLAG_OUTPUTS__ = 1;
pub const __code_model_small__ = 1;
pub const __amd64__ = 1;
pub const __amd64 = 1;
pub const __x86_64 = 1;
pub const __x86_64__ = 1;
pub const __SEG_GS = 1;
pub const __SEG_FS = 1;
pub const __seg_gs = __attribute__(address_space(256));
pub const __seg_fs = __attribute__(address_space(257));
pub const __znver1 = 1;
pub const __znver1__ = 1;
pub const __tune_znver1__ = 1;
pub const __NO_MATH_INLINES = 1;
pub const __AES__ = 1;
pub const __PCLMUL__ = 1;
pub const __LZCNT__ = 1;
pub const __RDRND__ = 1;
pub const __FSGSBASE__ = 1;
pub const __BMI__ = 1;
pub const __BMI2__ = 1;
pub const __POPCNT__ = 1;
pub const __PRFCHW__ = 1;
pub const __RDSEED__ = 1;
pub const __ADX__ = 1;
pub const __MWAITX__ = 1;
pub const __MOVBE__ = 1;
pub const __SSE4A__ = 1;
pub const __FMA__ = 1;
pub const __F16C__ = 1;
pub const __SHA__ = 1;
pub const __FXSR__ = 1;
pub const __XSAVE__ = 1;
pub const __XSAVEOPT__ = 1;
pub const __XSAVEC__ = 1;
pub const __XSAVES__ = 1;
pub const __CLFLUSHOPT__ = 1;
pub const __CLZERO__ = 1;
pub const __AVX2__ = 1;
pub const __AVX__ = 1;
pub const __SSE4_2__ = 1;
pub const __SSE4_1__ = 1;
pub const __SSSE3__ = 1;
pub const __SSE3__ = 1;
pub const __SSE2__ = 1;
pub const __SSE2_MATH__ = 1;
pub const __SSE__ = 1;
pub const __SSE_MATH__ = 1;
pub const __MMX__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub const __SIZEOF_FLOAT128__ = 16;
pub const unix = 1;
pub const __unix = 1;
pub const __unix__ = 1;
pub const linux = 1;
pub const __linux = 1;
pub const __linux__ = 1;
pub const __ELF__ = 1;
pub const __gnu_linux__ = 1;
pub const __FLOAT128__ = 1;
pub const __STDC__ = 1;
pub const __STDC_HOSTED__ = 1;
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = 1;
pub const __STDC_UTF_32__ = 1;
pub const _DEBUG = 1;
pub const VULKAN_H_ = 1;
pub const NULL = (@import("std").meta.cast(?*c_void, 0));
pub inline fn offsetof(t: anytype, d: anytype) @TypeOf(__builtin_offsetof(t, d)) {
    return __builtin_offsetof(t, d);
}
pub const _STDINT_H = 1;
pub const _FEATURES_H = 1;
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << 16) + __GNUC_MINOR__) >= ((maj << 16) + min)) {
    return ((__GNUC__ << 16) + __GNUC_MINOR__) >= ((maj << 16) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << 16) + __clang_minor__) >= ((maj << 16) + min)) {
    return ((__clang_major__ << 16) + __clang_minor__) >= ((maj << 16) + min);
}
pub const _DEFAULT_SOURCE = 1;
pub const __GLIBC_USE_ISOC2X = 0;
pub const __USE_ISOC11 = 1;
pub const __USE_ISOC99 = 1;
pub const __USE_ISOC95 = 1;
pub const __USE_POSIX_IMPLICITLY = 1;
pub const _POSIX_SOURCE = 1;
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = 1;
pub const __USE_POSIX2 = 1;
pub const __USE_POSIX199309 = 1;
pub const __USE_POSIX199506 = 1;
pub const __USE_XOPEN2K = 1;
pub const __USE_XOPEN2K8 = 1;
pub const _ATFILE_SOURCE = 1;
pub const __USE_MISC = 1;
pub const __USE_ATFILE = 1;
pub const __USE_FORTIFY_LEVEL = 0;
pub const __GLIBC_USE_DEPRECATED_GETS = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF = 0;
pub const _STDC_PREDEF_H = 1;
pub const __STDC_IEC_559__ = 1;
pub const __STDC_IEC_559_COMPLEX__ = 1;
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = 6;
pub const __GLIBC__ = 2;
pub const __GLIBC_MINOR__ = 32;
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << 16) + __GLIBC_MINOR__) >= ((maj << 16) + min)) {
    return ((__GLIBC__ << 16) + __GLIBC_MINOR__) >= ((maj << 16) + min);
}
pub const _SYS_CDEFS_H = 1;
pub const __THROW = __attribute__(__nothrow__ ++ __LEAF);
pub const __THROWNL = __attribute__(__nothrow__);
pub inline fn __glibc_clang_has_extension(ext: anytype) @TypeOf(__has_extension(ext)) {
    return __has_extension(ext);
}
pub inline fn __P(args: anytype) @TypeOf(args) {
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    return args;
}
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > 1)) {
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > 1);
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, 0)) {
    return __builtin_object_size(ptr, 0);
}
pub const __glibc_c99_flexarr_available = 1;
pub inline fn __ASMNAME(cname: anytype) @TypeOf(__ASMNAME2(__USER_LABEL_PREFIX__, cname)) {
    return __ASMNAME2(__USER_LABEL_PREFIX__, cname);
}
pub const __attribute_malloc__ = __attribute__(__malloc__);
pub const __attribute_pure__ = __attribute__(__pure__);
pub const __attribute_const__ = __attribute__(__const__);
pub const __attribute_used__ = __attribute__(__used__);
pub const __attribute_noinline__ = __attribute__(__noinline__);
pub const __attribute_deprecated__ = __attribute__(__deprecated__);
pub inline fn __attribute_deprecated_msg__(msg: anytype) @TypeOf(__attribute__(__deprecated__(msg))) {
    return __attribute__(__deprecated__(msg));
}
pub inline fn __attribute_format_arg__(x: anytype) @TypeOf(__attribute__(__format_arg__(x))) {
    return __attribute__(__format_arg__(x));
}
pub inline fn __attribute_format_strfmon__(a: anytype, b: anytype) @TypeOf(__attribute__(__format__(__strfmon__, a, b))) {
    return __attribute__(__format__(__strfmon__, a, b));
}
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute__(__nonnull__ ++ params)) {
    return __attribute__(__nonnull__ ++ params);
}
pub const __attribute_warn_unused_result__ = __attribute__(__warn_unused_result__);
pub const __always_inline = __inline ++ __attribute__(__always_inline__);
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = __restrict;
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, 0)) {
    return __builtin_expect(cond, 0);
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, 1)) {
    return __builtin_expect(cond, 1);
}
pub inline fn __glibc_has_attribute(attr: anytype) @TypeOf(__has_attribute(attr)) {
    return __has_attribute(attr);
}
pub const __WORDSIZE = 64;
pub const __WORDSIZE_TIME64_COMPAT32 = 1;
pub const __SYSCALL_WORDSIZE = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    return name ++ proto ++ __THROW;
}
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    return __REDIRECT_NTH(name, proto, alias);
}
pub inline fn __glibc_macro_warning(message: anytype) @TypeOf(__glibc_macro_warning1(GCC ++ warning ++ message)) {
    return __glibc_macro_warning1(GCC ++ warning ++ message);
}
pub const __HAVE_GENERIC_SELECTION = 1;
pub const __USE_EXTERN_INLINES = 1;
pub const __GLIBC_USE_LIB_EXT2 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = 0;
pub const _BITS_TYPES_H = 1;
pub const __TIMESIZE = __WORDSIZE;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const _BITS_TYPESIZES_H = 1;
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = 1;
pub const __INO_T_MATCHES_INO64_T = 1;
pub const __RLIM_T_MATCHES_RLIM64_T = 1;
pub const __STATFS_MATCHES_STATFS64 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;
pub const __FD_SETSIZE = 1024;
pub const _BITS_TIME64_H = 1;
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = 1;
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - 1;
pub const _BITS_STDINT_INTN_H = 1;
pub const _BITS_STDINT_UINTN_H = 1;
pub const INT8_MIN = -128;
pub const INT16_MIN = -32767 - 1;
pub const INT32_MIN = -2147483647 - 1;
pub const INT64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INT8_MAX = 127;
pub const INT16_MAX = 32767;
pub const INT32_MAX = 2147483647;
pub const INT64_MAX = __INT64_C(9223372036854775807);
pub const UINT8_MAX = 255;
pub const UINT16_MAX = 65535;
pub const UINT32_MAX = @as(c_uint, 4294967295);
pub const UINT64_MAX = __UINT64_C(18446744073709551615);
pub const INT_LEAST8_MIN = -128;
pub const INT_LEAST16_MIN = -32767 - 1;
pub const INT_LEAST32_MIN = -2147483647 - 1;
pub const INT_LEAST64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INT_LEAST8_MAX = 127;
pub const INT_LEAST16_MAX = 32767;
pub const INT_LEAST32_MAX = 2147483647;
pub const INT_LEAST64_MAX = __INT64_C(9223372036854775807);
pub const UINT_LEAST8_MAX = 255;
pub const UINT_LEAST16_MAX = 65535;
pub const UINT_LEAST32_MAX = @as(c_uint, 4294967295);
pub const UINT_LEAST64_MAX = __UINT64_C(18446744073709551615);
pub const INT_FAST8_MIN = -128;
pub const INT_FAST16_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const INT_FAST32_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const INT_FAST64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INT_FAST8_MAX = 127;
pub const INT_FAST16_MAX = @as(c_long, 9223372036854775807);
pub const INT_FAST32_MAX = @as(c_long, 9223372036854775807);
pub const INT_FAST64_MAX = __INT64_C(9223372036854775807);
pub const UINT_FAST8_MAX = 255;
pub const UINT_FAST16_MAX = @as(c_ulong, 18446744073709551615);
pub const UINT_FAST32_MAX = @as(c_ulong, 18446744073709551615);
pub const UINT_FAST64_MAX = __UINT64_C(18446744073709551615);
pub const INTPTR_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const INTPTR_MAX = @as(c_long, 9223372036854775807);
pub const UINTPTR_MAX = @as(c_ulong, 18446744073709551615);
pub const INTMAX_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INTMAX_MAX = __INT64_C(9223372036854775807);
pub const UINTMAX_MAX = __UINT64_C(18446744073709551615);
pub const PTRDIFF_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const PTRDIFF_MAX = @as(c_long, 9223372036854775807);
pub const SIG_ATOMIC_MIN = -2147483647 - 1;
pub const SIG_ATOMIC_MAX = 2147483647;
pub const SIZE_MAX = @as(c_ulong, 18446744073709551615);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @as(c_uint, 4294967295);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub const VULKAN_CORE_H_ = 1;
pub const VERSION_1_0 = 1;
pub inline fn MAKE_VERSION(major: anytype, minor: anytype, patch: anytype) @TypeOf((((@import("std").meta.cast(u32, major)) << 22) | ((@import("std").meta.cast(u32, minor)) << 12)) | (@import("std").meta.cast(u32, patch))) {
    return (((@import("std").meta.cast(u32, major)) << 22) | ((@import("std").meta.cast(u32, minor)) << 12)) | (@import("std").meta.cast(u32, patch));
}
pub const API_VERSION_1_0 = MAKE_VERSION(1, 0, 0);
pub const HEADER_VERSION = 160;
pub const HEADER_VERSION_COMPLETE = MAKE_VERSION(1, 2, HEADER_VERSION);
pub inline fn VERSION_MAJOR(version: anytype) @TypeOf((@import("std").meta.cast(u32, version)) >> 22) {
    return (@import("std").meta.cast(u32, version)) >> 22;
}
pub inline fn VERSION_MINOR(version: anytype) @TypeOf(((@import("std").meta.cast(u32, version)) >> 12) & 0x3ff) {
    return ((@import("std").meta.cast(u32, version)) >> 12) & 0x3ff;
}
pub inline fn VERSION_PATCH(version: anytype) @TypeOf((@import("std").meta.cast(u32, version)) & 0xfff) {
    return (@import("std").meta.cast(u32, version)) & 0xfff;
}
pub const NULL_HANDLE = 0;
pub const ATTACHMENT_UNUSED = ~@as(c_uint, 0);
pub const FALSE = 0;
pub const LOD_CLAMP_NONE = @as(f32, 1000.0);
pub const QUEUE_FAMILY_IGNORED = ~@as(c_uint, 0);
pub const REMAINING_ARRAY_LAYERS = ~@as(c_uint, 0);
pub const REMAINING_MIP_LEVELS = ~@as(c_uint, 0);
pub const SUBPASS_EXTERNAL = ~@as(c_uint, 0);
pub const TRUE = 1;
pub const WHOLE_SIZE = ~@as(c_ulonglong, 0);
pub const MAX_MEMORY_TYPES = 32;
pub const MAX_MEMORY_HEAPS = 16;
pub const MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
pub const UUID_SIZE = 16;
pub const MAX_EXTENSION_NAME_SIZE = 256;
pub const MAX_DESCRIPTION_SIZE = 256;
pub const VERSION_1_1 = 1;
pub const API_VERSION_1_1 = MAKE_VERSION(1, 1, 0);
pub const MAX_DEVICE_GROUP_SIZE = 32;
pub const LUID_SIZE = 8;
pub const QUEUE_FAMILY_EXTERNAL = ~@as(c_uint, 0) - 1;
pub const VERSION_1_2 = 1;
pub const API_VERSION_1_2 = MAKE_VERSION(1, 2, 0);
pub const MAX_DRIVER_NAME_SIZE = 256;
pub const MAX_DRIVER_INFO_SIZE = 256;
pub const KHR_surface = 1;
pub const KHR_SURFACE_SPEC_VERSION = 25;
pub const KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";
pub const KHR_swapchain = 1;
pub const KHR_SWAPCHAIN_SPEC_VERSION = 70;
pub const KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";
pub const KHR_display = 1;
pub const KHR_DISPLAY_SPEC_VERSION = 23;
pub const KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
pub const KHR_display_swapchain = 1;
pub const KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10;
pub const KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";
pub const KHR_sampler_mirror_clamp_to_edge = 1;
pub const KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3;
pub const KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";
pub const KHR_multiview = 1;
pub const KHR_MULTIVIEW_SPEC_VERSION = 1;
pub const KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
pub const KHR_get_physical_device_properties2 = 1;
pub const KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2;
pub const KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
pub const KHR_device_group = 1;
pub const KHR_DEVICE_GROUP_SPEC_VERSION = 4;
pub const KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
pub const KHR_shader_draw_parameters = 1;
pub const KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1;
pub const KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";
pub const KHR_maintenance1 = 1;
pub const KHR_MAINTENANCE1_SPEC_VERSION = 2;
pub const KHR_MAINTENANCE1_EXTENSION_NAME = "VK_KHR_maintenance1";
pub const KHR_device_group_creation = 1;
pub const KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1;
pub const KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
pub const MAX_DEVICE_GROUP_SIZE_KHR = MAX_DEVICE_GROUP_SIZE;
pub const KHR_external_memory_capabilities = 1;
pub const KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
pub const KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
pub const LUID_SIZE_KHR = LUID_SIZE;
pub const KHR_external_memory = 1;
pub const KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1;
pub const KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
pub const QUEUE_FAMILY_EXTERNAL_KHR = QUEUE_FAMILY_EXTERNAL;
pub const KHR_external_memory_fd = 1;
pub const KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1;
pub const KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";
pub const KHR_external_semaphore_capabilities = 1;
pub const KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1;
pub const KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
pub const KHR_external_semaphore = 1;
pub const KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1;
pub const KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
pub const KHR_external_semaphore_fd = 1;
pub const KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1;
pub const KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";
pub const KHR_push_descriptor = 1;
pub const KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2;
pub const KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";
pub const KHR_shader_float16_int8 = 1;
pub const KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1;
pub const KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
pub const KHR_16bit_storage = 1;
pub const KHR_16BIT_STORAGE_SPEC_VERSION = 1;
pub const KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
pub const KHR_incremental_present = 1;
pub const KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 1;
pub const KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";
pub const KHR_descriptor_update_template = 1;
pub const KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1;
pub const KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
pub const KHR_imageless_framebuffer = 1;
pub const KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1;
pub const KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
pub const KHR_create_renderpass2 = 1;
pub const KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1;
pub const KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
pub const KHR_shared_presentable_image = 1;
pub const KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1;
pub const KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";
pub const KHR_external_fence_capabilities = 1;
pub const KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1;
pub const KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
pub const KHR_external_fence = 1;
pub const KHR_EXTERNAL_FENCE_SPEC_VERSION = 1;
pub const KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
pub const KHR_external_fence_fd = 1;
pub const KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1;
pub const KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";
pub const KHR_performance_query = 1;
pub const KHR_PERFORMANCE_QUERY_SPEC_VERSION = 1;
pub const KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";
pub const KHR_maintenance2 = 1;
pub const KHR_MAINTENANCE2_SPEC_VERSION = 1;
pub const KHR_MAINTENANCE2_EXTENSION_NAME = "VK_KHR_maintenance2";
pub const KHR_get_surface_capabilities2 = 1;
pub const KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1;
pub const KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";
pub const KHR_variable_pointers = 1;
pub const KHR_VARIABLE_POINTERS_SPEC_VERSION = 1;
pub const KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
pub const KHR_get_display_properties2 = 1;
pub const KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1;
pub const KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";
pub const KHR_dedicated_allocation = 1;
pub const KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3;
pub const KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
pub const KHR_storage_buffer_storage_class = 1;
pub const KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1;
pub const KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";
pub const KHR_relaxed_block_layout = 1;
pub const KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1;
pub const KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";
pub const KHR_get_memory_requirements2 = 1;
pub const KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1;
pub const KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
pub const KHR_image_format_list = 1;
pub const KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1;
pub const KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
pub const KHR_sampler_ycbcr_conversion = 1;
pub const KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14;
pub const KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
pub const KHR_bind_memory2 = 1;
pub const KHR_BIND_MEMORY_2_SPEC_VERSION = 1;
pub const KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
pub const KHR_maintenance3 = 1;
pub const KHR_MAINTENANCE3_SPEC_VERSION = 1;
pub const KHR_MAINTENANCE3_EXTENSION_NAME = "VK_KHR_maintenance3";
pub const KHR_draw_indirect_count = 1;
pub const KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1;
pub const KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
pub const KHR_shader_subgroup_extended_types = 1;
pub const KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = 1;
pub const KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";
pub const KHR_8bit_storage = 1;
pub const KHR_8BIT_STORAGE_SPEC_VERSION = 1;
pub const KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
pub const KHR_shader_atomic_int64 = 1;
pub const KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1;
pub const KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
pub const KHR_shader_clock = 1;
pub const KHR_SHADER_CLOCK_SPEC_VERSION = 1;
pub const KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";
pub const KHR_driver_properties = 1;
pub const KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1;
pub const KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
pub const MAX_DRIVER_NAME_SIZE_KHR = MAX_DRIVER_NAME_SIZE;
pub const MAX_DRIVER_INFO_SIZE_KHR = MAX_DRIVER_INFO_SIZE;
pub const KHR_shader_float_controls = 1;
pub const KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4;
pub const KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
pub const KHR_depth_stencil_resolve = 1;
pub const KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1;
pub const KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
pub const KHR_swapchain_mutable_format = 1;
pub const KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1;
pub const KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";
pub const KHR_timeline_semaphore = 1;
pub const KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = 2;
pub const KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";
pub const KHR_vulkan_memory_model = 1;
pub const KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3;
pub const KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
pub const KHR_shader_terminate_invocation = 1;
pub const KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = 1;
pub const KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";
pub const KHR_fragment_shading_rate = 1;
pub const KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = 1;
pub const KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";
pub const KHR_spirv_1_4 = 1;
pub const KHR_SPIRV_1_4_SPEC_VERSION = 1;
pub const KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";
pub const KHR_surface_protected_capabilities = 1;
pub const KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1;
pub const KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";
pub const KHR_separate_depth_stencil_layouts = 1;
pub const KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = 1;
pub const KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";
pub const KHR_uniform_buffer_standard_layout = 1;
pub const KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1;
pub const KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
pub const KHR_buffer_device_address = 1;
pub const KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 1;
pub const KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";
pub const KHR_pipeline_executable_properties = 1;
pub const KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1;
pub const KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";
pub const KHR_shader_non_semantic_info = 1;
pub const KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = 1;
pub const KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";
pub const KHR_copy_commands2 = 1;
pub const KHR_COPY_COMMANDS_2_SPEC_VERSION = 1;
pub const KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";
pub const EXT_debug_report = 1;
pub const EXT_DEBUG_REPORT_SPEC_VERSION = 9;
pub const EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";
pub const NV_glsl_shader = 1;
pub const NV_GLSL_SHADER_SPEC_VERSION = 1;
pub const NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";
pub const EXT_depth_range_unrestricted = 1;
pub const EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1;
pub const EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";
pub const IMG_filter_cubic = 1;
pub const IMG_FILTER_CUBIC_SPEC_VERSION = 1;
pub const IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";
pub const AMD_rasterization_order = 1;
pub const AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1;
pub const AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";
pub const AMD_shader_trinary_minmax = 1;
pub const AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1;
pub const AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";
pub const AMD_shader_explicit_vertex_parameter = 1;
pub const AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1;
pub const AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";
pub const EXT_debug_marker = 1;
pub const EXT_DEBUG_MARKER_SPEC_VERSION = 4;
pub const EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";
pub const AMD_gcn_shader = 1;
pub const AMD_GCN_SHADER_SPEC_VERSION = 1;
pub const AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";
pub const NV_dedicated_allocation = 1;
pub const NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1;
pub const NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";
pub const EXT_transform_feedback = 1;
pub const EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1;
pub const EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
pub const NVX_image_view_handle = 1;
pub const NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 2;
pub const NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";
pub const AMD_draw_indirect_count = 1;
pub const AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2;
pub const AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
pub const AMD_negative_viewport_height = 1;
pub const AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1;
pub const AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";
pub const AMD_gpu_shader_half_float = 1;
pub const AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2;
pub const AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";
pub const AMD_shader_ballot = 1;
pub const AMD_SHADER_BALLOT_SPEC_VERSION = 1;
pub const AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";
pub const AMD_texture_gather_bias_lod = 1;
pub const AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1;
pub const AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";
pub const AMD_shader_info = 1;
pub const AMD_SHADER_INFO_SPEC_VERSION = 1;
pub const AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";
pub const AMD_shader_image_load_store_lod = 1;
pub const AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1;
pub const AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";
pub const NV_corner_sampled_image = 1;
pub const NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2;
pub const NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";
pub const IMG_format_pvrtc = 1;
pub const IMG_FORMAT_PVRTC_SPEC_VERSION = 1;
pub const IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";
pub const NV_external_memory_capabilities = 1;
pub const NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
pub const NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";
pub const NV_external_memory = 1;
pub const NV_EXTERNAL_MEMORY_SPEC_VERSION = 1;
pub const NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";
pub const EXT_validation_flags = 1;
pub const EXT_VALIDATION_FLAGS_SPEC_VERSION = 2;
pub const EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";
pub const EXT_shader_subgroup_ballot = 1;
pub const EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1;
pub const EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";
pub const EXT_shader_subgroup_vote = 1;
pub const EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1;
pub const EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";
pub const EXT_texture_compression_astc_hdr = 1;
pub const EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1;
pub const EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
pub const EXT_astc_decode_mode = 1;
pub const EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1;
pub const EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";
pub const EXT_conditional_rendering = 1;
pub const EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2;
pub const EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";
pub const NV_clip_space_w_scaling = 1;
pub const NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1;
pub const NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";
pub const EXT_direct_mode_display = 1;
pub const EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1;
pub const EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
pub const EXT_display_surface_counter = 1;
pub const EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1;
pub const EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";
pub const EXT_display_control = 1;
pub const EXT_DISPLAY_CONTROL_SPEC_VERSION = 1;
pub const EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";
pub const GOOGLE_display_timing = 1;
pub const GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1;
pub const GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";
pub const NV_sample_mask_override_coverage = 1;
pub const NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1;
pub const NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";
pub const NV_geometry_shader_passthrough = 1;
pub const NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1;
pub const NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";
pub const NV_viewport_array2 = 1;
pub const NV_VIEWPORT_ARRAY2_SPEC_VERSION = 1;
pub const NV_VIEWPORT_ARRAY2_EXTENSION_NAME = "VK_NV_viewport_array2";
pub const NVX_multiview_per_view_attributes = 1;
pub const NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1;
pub const NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";
pub const NV_viewport_swizzle = 1;
pub const NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1;
pub const NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";
pub const EXT_discard_rectangles = 1;
pub const EXT_DISCARD_RECTANGLES_SPEC_VERSION = 1;
pub const EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";
pub const EXT_conservative_rasterization = 1;
pub const EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1;
pub const EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";
pub const EXT_depth_clip_enable = 1;
pub const EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1;
pub const EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
pub const EXT_swapchain_colorspace = 1;
pub const EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 4;
pub const EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";
pub const EXT_hdr_metadata = 1;
pub const EXT_HDR_METADATA_SPEC_VERSION = 2;
pub const EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";
pub const EXT_external_memory_dma_buf = 1;
pub const EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1;
pub const EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";
pub const EXT_queue_family_foreign = 1;
pub const EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1;
pub const EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
pub const QUEUE_FAMILY_FOREIGN_EXT = ~@as(c_uint, 0) - 2;
pub const EXT_debug_utils = 1;
pub const EXT_DEBUG_UTILS_SPEC_VERSION = 2;
pub const EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
pub const EXT_sampler_filter_minmax = 1;
pub const EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2;
pub const EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
pub const AMD_gpu_shader_int16 = 1;
pub const AMD_GPU_SHADER_INT16_SPEC_VERSION = 2;
pub const AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";
pub const AMD_mixed_attachment_samples = 1;
pub const AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1;
pub const AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";
pub const AMD_shader_fragment_mask = 1;
pub const AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1;
pub const AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";
pub const EXT_inline_uniform_block = 1;
pub const EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1;
pub const EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
pub const EXT_shader_stencil_export = 1;
pub const EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1;
pub const EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";
pub const EXT_sample_locations = 1;
pub const EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1;
pub const EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";
pub const EXT_blend_operation_advanced = 1;
pub const EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2;
pub const EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";
pub const NV_fragment_coverage_to_color = 1;
pub const NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1;
pub const NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
pub const NV_framebuffer_mixed_samples = 1;
pub const NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1;
pub const NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";
pub const NV_fill_rectangle = 1;
pub const NV_FILL_RECTANGLE_SPEC_VERSION = 1;
pub const NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";
pub const NV_shader_sm_builtins = 1;
pub const NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1;
pub const NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";
pub const EXT_post_depth_coverage = 1;
pub const EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1;
pub const EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";
pub const EXT_image_drm_format_modifier = 1;
pub const EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 1;
pub const EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";
pub const EXT_validation_cache = 1;
pub const EXT_VALIDATION_CACHE_SPEC_VERSION = 1;
pub const EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";
pub const EXT_descriptor_indexing = 1;
pub const EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2;
pub const EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
pub const EXT_shader_viewport_index_layer = 1;
pub const EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1;
pub const EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";
pub const NV_shading_rate_image = 1;
pub const NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3;
pub const NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";
pub const NV_ray_tracing = 1;
pub const NV_RAY_TRACING_SPEC_VERSION = 3;
pub const NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
pub const SHADER_UNUSED_KHR = ~@as(c_uint, 0);
pub const SHADER_UNUSED_NV = SHADER_UNUSED_KHR;
pub const NV_representative_fragment_test = 1;
pub const NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2;
pub const NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";
pub const EXT_filter_cubic = 1;
pub const EXT_FILTER_CUBIC_SPEC_VERSION = 3;
pub const EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";
pub const QCOM_render_pass_shader_resolve = 1;
pub const QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = 4;
pub const QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";
pub const EXT_global_priority = 1;
pub const EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2;
pub const EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
pub const EXT_external_memory_host = 1;
pub const EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1;
pub const EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";
pub const AMD_buffer_marker = 1;
pub const AMD_BUFFER_MARKER_SPEC_VERSION = 1;
pub const AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
pub const AMD_pipeline_compiler_control = 1;
pub const AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1;
pub const AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";
pub const EXT_calibrated_timestamps = 1;
pub const EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 1;
pub const EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";
pub const AMD_shader_core_properties = 1;
pub const AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2;
pub const AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";
pub const AMD_memory_overallocation_behavior = 1;
pub const AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1;
pub const AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";
pub const EXT_vertex_attribute_divisor = 1;
pub const EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3;
pub const EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";
pub const EXT_pipeline_creation_feedback = 1;
pub const EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1;
pub const EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
pub const NV_shader_subgroup_partitioned = 1;
pub const NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1;
pub const NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";
pub const NV_compute_shader_derivatives = 1;
pub const NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1;
pub const NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";
pub const NV_mesh_shader = 1;
pub const NV_MESH_SHADER_SPEC_VERSION = 1;
pub const NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";
pub const NV_fragment_shader_barycentric = 1;
pub const NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;
pub const NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";
pub const NV_shader_image_footprint = 1;
pub const NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2;
pub const NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";
pub const NV_scissor_exclusive = 1;
pub const NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 1;
pub const NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";
pub const NV_device_diagnostic_checkpoints = 1;
pub const NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2;
pub const NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";
pub const INTEL_shader_integer_functions2 = 1;
pub const INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1;
pub const INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";
pub const INTEL_performance_query = 1;
pub const INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 2;
pub const INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";
pub const EXT_pci_bus_info = 1;
pub const EXT_PCI_BUS_INFO_SPEC_VERSION = 2;
pub const EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";
pub const AMD_display_native_hdr = 1;
pub const AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1;
pub const AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";
pub const EXT_fragment_density_map = 1;
pub const EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 1;
pub const EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";
pub const EXT_scalar_block_layout = 1;
pub const EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1;
pub const EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
pub const GOOGLE_hlsl_functionality1 = 1;
pub const GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = 1;
pub const GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
pub const GOOGLE_decorate_string = 1;
pub const GOOGLE_DECORATE_STRING_SPEC_VERSION = 1;
pub const GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";
pub const EXT_subgroup_size_control = 1;
pub const EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2;
pub const EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
pub const AMD_shader_core_properties2 = 1;
pub const AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1;
pub const AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";
pub const AMD_device_coherent_memory = 1;
pub const AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1;
pub const AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";
pub const EXT_shader_image_atomic_int64 = 1;
pub const EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = 1;
pub const EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";
pub const EXT_memory_budget = 1;
pub const EXT_MEMORY_BUDGET_SPEC_VERSION = 1;
pub const EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";
pub const EXT_memory_priority = 1;
pub const EXT_MEMORY_PRIORITY_SPEC_VERSION = 1;
pub const EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";
pub const NV_dedicated_allocation_image_aliasing = 1;
pub const NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1;
pub const NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";
pub const EXT_buffer_device_address = 1;
pub const EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2;
pub const EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";
pub const EXT_tooling_info = 1;
pub const EXT_TOOLING_INFO_SPEC_VERSION = 1;
pub const EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";
pub const EXT_separate_stencil_usage = 1;
pub const EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1;
pub const EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
pub const EXT_validation_features = 1;
pub const EXT_VALIDATION_FEATURES_SPEC_VERSION = 4;
pub const EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";
pub const NV_cooperative_matrix = 1;
pub const NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1;
pub const NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";
pub const NV_coverage_reduction_mode = 1;
pub const NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1;
pub const NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";
pub const EXT_fragment_shader_interlock = 1;
pub const EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1;
pub const EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";
pub const EXT_ycbcr_image_arrays = 1;
pub const EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1;
pub const EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";
pub const EXT_headless_surface = 1;
pub const EXT_HEADLESS_SURFACE_SPEC_VERSION = 1;
pub const EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
pub const EXT_line_rasterization = 1;
pub const EXT_LINE_RASTERIZATION_SPEC_VERSION = 1;
pub const EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";
pub const EXT_shader_atomic_float = 1;
pub const EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = 1;
pub const EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";
pub const EXT_host_query_reset = 1;
pub const EXT_HOST_QUERY_RESET_SPEC_VERSION = 1;
pub const EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
pub const EXT_index_type_uint8 = 1;
pub const EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1;
pub const EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";
pub const EXT_extended_dynamic_state = 1;
pub const EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = 1;
pub const EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";
pub const EXT_shader_demote_to_helper_invocation = 1;
pub const EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1;
pub const EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
pub const NV_device_generated_commands = 1;
pub const NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3;
pub const NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";
pub const EXT_texel_buffer_alignment = 1;
pub const EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1;
pub const EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";
pub const QCOM_render_pass_transform = 1;
pub const QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = 1;
pub const QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";
pub const EXT_device_memory_report = 1;
pub const EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = 1;
pub const EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";
pub const EXT_robustness2 = 1;
pub const EXT_ROBUSTNESS_2_SPEC_VERSION = 1;
pub const EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";
pub const EXT_custom_border_color = 1;
pub const EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = 12;
pub const EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";
pub const GOOGLE_user_type = 1;
pub const GOOGLE_USER_TYPE_SPEC_VERSION = 1;
pub const GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";
pub const EXT_private_data = 1;
pub const EXT_PRIVATE_DATA_SPEC_VERSION = 1;
pub const EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";
pub const EXT_pipeline_creation_cache_control = 1;
pub const EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = 3;
pub const EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";
pub const NV_device_diagnostics_config = 1;
pub const NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = 1;
pub const NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";
pub const QCOM_render_pass_store_ops = 1;
pub const QCOM_render_pass_store_ops_SPEC_VERSION = 2;
pub const QCOM_render_pass_store_ops_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";
pub const NV_fragment_shading_rate_enums = 1;
pub const NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = 1;
pub const NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";
pub const EXT_fragment_density_map2 = 1;
pub const EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = 1;
pub const EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";
pub const QCOM_rotated_copy_commands = 1;
pub const QCOM_rotated_copy_commands_SPEC_VERSION = 0;
pub const QCOM_rotated_copy_commands_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";
pub const EXT_image_robustness = 1;
pub const EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = 1;
pub const EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";
pub const EXT_4444_formats = 1;
pub const EXT_4444_FORMATS_SPEC_VERSION = 1;
pub const EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";
pub const Buffer_T = struct_Buffer_T;
pub const Image_T = struct_Image_T;
pub const Instance_T = struct_Instance_T;
pub const PhysicalDevice_T = struct_PhysicalDevice_T;
pub const Device_T = struct_Device_T;
pub const Queue_T = struct_Queue_T;
pub const Semaphore_T = struct_Semaphore_T;
pub const CommandBuffer_T = struct_CommandBuffer_T;
pub const Fence_T = struct_Fence_T;
pub const DeviceMemory_T = struct_DeviceMemory_T;
pub const Event_T = struct_Event_T;
pub const QueryPool_T = struct_QueryPool_T;
pub const BufferView_T = struct_BufferView_T;
pub const ImageView_T = struct_ImageView_T;
pub const ShaderModule_T = struct_ShaderModule_T;
pub const PipelineCache_T = struct_PipelineCache_T;
pub const PipelineLayout_T = struct_PipelineLayout_T;
pub const Pipeline_T = struct_Pipeline_T;
pub const RenderPass_T = struct_RenderPass_T;
pub const DescriptorSetLayout_T = struct_DescriptorSetLayout_T;
pub const Sampler_T = struct_Sampler_T;
pub const DescriptorSet_T = struct_DescriptorSet_T;
pub const DescriptorPool_T = struct_DescriptorPool_T;
pub const Framebuffer_T = struct_Framebuffer_T;
pub const CommandPool_T = struct_CommandPool_T;
pub const SamplerYcbcrConversion_T = struct_SamplerYcbcrConversion_T;
pub const DescriptorUpdateTemplate_T = struct_DescriptorUpdateTemplate_T;
pub const SurfaceKHR_T = struct_SurfaceKHR_T;
pub const SwapchainKHR_T = struct_SwapchainKHR_T;
pub const DisplayKHR_T = struct_DisplayKHR_T;
pub const DisplayModeKHR_T = struct_DisplayModeKHR_T;
pub const DebugReportCallbackEXT_T = struct_DebugReportCallbackEXT_T;
pub const DebugUtilsMessengerEXT_T = struct_DebugUtilsMessengerEXT_T;
pub const ValidationCacheEXT_T = struct_ValidationCacheEXT_T;
pub const AccelerationStructureKHR_T = struct_AccelerationStructureKHR_T;
pub const PerformanceConfigurationINTEL_T = struct_PerformanceConfigurationINTEL_T;
pub const IndirectCommandsLayoutNV_T = struct_IndirectCommandsLayoutNV_T;
pub const PrivateDataSlotEXT_T = struct_PrivateDataSlotEXT_T;
