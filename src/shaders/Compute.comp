#version 450

#define groupSize 8
#define subdiv 2
#define vpercell 2
#define textureWidth 2048

layout (local_size_x = groupSize, local_size_y = groupSize, local_size_z = 1 ) in;

layout(binding = 0) uniform restrict readonly UniformBufferObject
{
    mat4 view;
    vec4 position;
    int buffer_size;
    float FOV;
    float margin;
    float limit;
	vec2 screen_size;
};

layout(binding = 1) restrict readonly buffer octDataBuffer {
	ivec2 octData[]; // x: parent, y: children
};
layout(binding = 2) uniform sampler2D values;
layout(binding = 3) uniform restrict writeonly image2D dest;

int index = 0;
vec2 dimensions;

vec3 lower = vec3(0, 0, 0);
float scale = 1;

float sam(vec2 p)
{
    return texture(values, (p + vec2(.5, .5)) * dimensions).x;
}

float sample_at(vec3 d, float scale)
{
    int cellindex = index * vpercell*vpercell;
    vec2 p = ivec2(cellindex % textureWidth, cellindex / textureWidth * vpercell);

    float loadL = sam(d.xy + p);
    float loadH = sam(d.xy + p + vec2(vpercell, 0));
    float result = (mix(loadL, loadH, d.z) - .25) * scale * 4;
    return result;
}

float interpol_world(vec3 pos)
{
    vec3 d = clamp((pos - lower) / scale, 0, 1); //smoothstep(lower, higher, pos);//
    return sample_at(d, scale);
}

vec3 gradient(vec3 pos)
{
    vec3 d = clamp((pos - lower) / scale, 0, 1);
    vec2 p = ivec2((index * 4) % textureWidth, index * 4 / textureWidth * 2);
    vec2 ph = p + vec2(vpercell, 0);

    vec2 xzl = (vec2(d.x, 0) + p);

    float xl = mix(sam(vec2(0, d.y) + p), sam(vec2(0, d.y) + ph), d.z);
    float xh = mix(sam(vec2(1, d.y) + p), sam(vec2(1, d.y) + ph), d.z);

    float yl = mix(sam(vec2(d.x, 0) + p), sam(vec2(d.x, 0) + ph), d.z);
    float yh = mix(sam(vec2(d.x, 1) + p), sam(vec2(d.x, 1) + ph), d.z);
    
    float zl = sam(d.xy + p);
    float zh = sam(d.xy + ph);

    return vec3(xh-xl, yh-yl, zh-zl);
}

void scale_down(ivec3 p)
{
    scale /= subdiv;
    lower += vec3(p) * scale;
}



void find(vec3 pos)
{
    int iterations = 0;
    index = 0;
    ivec2 c = octData[index];
    /*
    while (!box.inside(pos) && c.parent >= 0) {
        index = c.parent;
        c = data[index];
        box.scale_up();
    }*/

    lower = vec3(0, 0, 0);
    scale = 1;

    while (index < buffer_size && iterations < 12 && c.y >= 0)
    {
        ivec3 dir = min(ivec3(clamp((pos - lower) / scale, 0, 1) * subdiv), ivec3(subdiv - 1, subdiv - 1, subdiv - 1));
        int p = dir.x + dir.y * subdiv + dir.z * subdiv * subdiv;
        index = c.y + p;
        c = octData[index];
        scale_down(dir);
        iterations++;
    }
}

vec3 ray(ivec2 coord, vec2 destsize)
{
	vec2 screendir = vec2(coord) / destsize.y - vec2(destsize.x / destsize.y * .5, .5);
	vec4 dir = view * vec3(screendir * FOV, .5).xyzz;
	return normalize(dir.xyz);
}

void main()
{
	ivec2 pospx = ivec2(gl_GlobalInvocationID.xy);
	ivec2 destsize = imageSize(dest);
	dimensions = vec2(1) / textureSize(values, 0);
	if (pospx.x >= destsize.x || pospx.y >= destsize.y) {
    	return;
	}

	float prox = 1;

	vec3 pos = position.xyz;
	vec3 dir = ray(pospx, vec2(destsize));

	// imageStore(dest, pospx, vec4(interpol_world(pos), 0, 0, 1));
	// return;

	for (int i = 0; (prox > margin * 2 || prox < 0) && i < 100; i++) {
		if (dot(pos - vec3(0.5), pos - vec3(0.5)) > limit) {
			imageStore(dest, pospx, vec4(0.005, 0.01, 0.2, 1.0));
			return;
		}
		find(pos);
        prox = interpol_world(pos);
        pos += dir * prox;// * (1 - inf.margin);
    }
    float angle = abs(dot(dir, normalize(gradient(pos))));
	imageStore(dest, pospx, vec4(angle, angle, angle, 1.0));
}