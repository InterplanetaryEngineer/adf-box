#version 450

#define groupSize 8
#define subdiv 2
#define valres 4
#define textureWidth 16384

layout (local_size_x = groupSize, local_size_y = groupSize, local_size_z = 1 ) in;

layout(binding = 0) uniform restrict readonly UniformBufferObject
{
    mat4 view;
    vec4 position;
    int buffer_size;
    float FOV;
    float margin;
    float limit;
    vec4 light;
	vec2 screen_size;
    float intensity;
};

layout(binding = 1) restrict readonly buffer octDataBuffer {
	int octData[];
};
layout(binding = 2) restrict readonly buffer materialBuffer {
	uint materialData[];
};

layout(binding = 3) uniform restrict writeonly image2D dest;
layout(binding = 4) uniform sampler2D values;

int index = 0;
int last_index = 0;
vec2 dimfactor;

vec3 lower = vec3(0, 0, 0);
float scale = 1;
void find(vec3 pos);
vec4 sam(vec2 p)
{
    return texture(values, (p + vec2(.5, .5)) * dimfactor);
}

float sample_at(vec3 d, float scale)
{
    int cellindex = index * valres;
    vec2 p = ivec2(cellindex % textureWidth, cellindex / textureWidth * valres);

    vec4 load = sam(d.xy * 3 + p);
    float f = d.z * 3;
    vec4 weights = vec4(1 - f, 1 - abs(f - 1), 1 - abs(f - 2), f - 2);
    float interpolated = dot(load, clamp(weights, 0, 1));
    float result = (interpolated - .25) * scale * 4;
    return result;
}

float interpol_world(vec3 pos)
{
    find(pos);
    vec3 d = clamp((pos - lower) / scale, 0, 1); //smoothstep(lower, higher, pos);//
    return sample_at(d, scale);
}

vec3 gradient(vec3 pos, float scale)
{
    vec2 dp = vec2(scale, 0);
    vec3 d = vec3(
        interpol_world(pos + dp.xyy),
        interpol_world(pos + dp.yxy),
        interpol_world(pos + dp.yyx));
    vec3 k = vec3(
        interpol_world(pos - dp.xyy),
        interpol_world(pos - dp.yxy),
        interpol_world(pos - dp.yyx));

    return d - k;
}

void scale_down(ivec3 p)
{
    scale /= subdiv;
    lower += vec3(p) * scale;
}



void find(vec3 pos)
{
    index = 0;
    lower = vec3(0, 0, 0);
    scale = 1;

    while (index < buffer_size)
    {
        const ivec3 dir = min(ivec3(clamp((pos - lower) / scale, 0, 1) * subdiv), ivec3(subdiv - 1, subdiv - 1, subdiv - 1));
        const int p = dir.x + dir.y * subdiv + dir.z * subdiv * subdiv;
        const int next = octData[index * 8 + p];
        if (next < 0)
            return;
        last_index = index;
        index = next;
        scale_down(dir);
    }
}

vec3 ray(ivec2 coord, vec2 destsize)
{
	vec2 screendir = vec2(coord) / destsize.y - vec2(destsize.x / destsize.y * .5, .5);
	vec4 dir = view * vec3(screendir * FOV, .5).xyzz;
	return normalize(dir.xyz);
}

vec4 uintToRgba(uint x) {
    float a = x % 256;
    x /= 256;
    float b = x % 256;
    x /= 256;
    float g = x % 256;
    x /= 256;
    float r = x;
    return vec4(r, g, b, a) / 256;
}

void shade(ivec2 pospx, float brightness, vec3 normal, uint mat_index) {
    imageStore(dest, pospx, vec4(brightness - normal.y*0.05 + 0.05) * uintToRgba(materialData[mat_index]));
}

void main()
{
	ivec2 pospx = ivec2(gl_GlobalInvocationID.xy);
	ivec2 destsize = imageSize(dest);
	dimfactor = vec2(1) / textureSize(values, 0);
	if (pospx.x >= destsize.x || pospx.y >= destsize.y) {
    	return;
	}

	float prox = 1;

	vec3 pos = position.xyz;
	vec3 dir = ray(pospx, vec2(destsize));

	for (int i = 0; (prox > margin * 2 || prox < 0) && i < 100; i++) {
		if (dot(pos - vec3(0.5), pos - vec3(0.5)) > limit) {
			imageStore(dest, pospx, vec4(0.005, 0.01, 0.2, 1.0));
			return;
		}
		//find(pos);
        prox = interpol_world(pos);
        pos += dir * prox;
    }
    uint mat_index = last_index;

    dir = normalize(light.xyz - pos);
    vec3 normal = normalize(gradient(pos, 0.001));
    pos += dir * margin * 10;
    float angle = dot(dir, normal);
    if (angle < 0) {
        shade(pospx, 0.0, normal, mat_index);
        return;
    }
    float dist = length(light.xyz - pos) / 2;

    for (int i = 0; (prox > -margin) && i < 40; i++) {
        if (prox > dist || any(lessThan(pos, vec3(0))) || any(greaterThan(pos, vec3(1)))) {
            float attenuation = angle / (dist*dist) *  (exp2(intensity) - 1);
            shade(pospx, attenuation, normal, mat_index);
            return;
        }
        //find(pos);
        prox = interpol_world(pos);
        pos += dir * prox;// * (1 - inf.margin);
    }
    shade(pospx, 0.0, normal, mat_index);
}
